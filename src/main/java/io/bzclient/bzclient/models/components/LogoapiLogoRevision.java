/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class LogoapiLogoRevision {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colors")
    private Optional<? extends LogoapiLogoColors> colors;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_cik")
    private Optional<String> companyCik;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_url")
    private Optional<String> companyUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<String> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted_at")
    private Optional<String> deletedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("files")
    private Optional<? extends LogoapiLogoRevisionFiles> files;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isin")
    private Optional<String> isin;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_audited")
    private Optional<String> lastAudited;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mic_code")
    private Optional<String> micCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("symbol")
    private Optional<String> symbol;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<String> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by_user_id")
    private Optional<String> updatedByUserId;

    @JsonCreator
    public LogoapiLogoRevision(
            @JsonProperty("colors") Optional<? extends LogoapiLogoColors> colors,
            @JsonProperty("company_cik") Optional<String> companyCik,
            @JsonProperty("company_url") Optional<String> companyUrl,
            @JsonProperty("created_at") Optional<String> createdAt,
            @JsonProperty("deleted_at") Optional<String> deletedAt,
            @JsonProperty("files") Optional<? extends LogoapiLogoRevisionFiles> files,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("isin") Optional<String> isin,
            @JsonProperty("last_audited") Optional<String> lastAudited,
            @JsonProperty("mic_code") Optional<String> micCode,
            @JsonProperty("symbol") Optional<String> symbol,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("updated_at") Optional<String> updatedAt,
            @JsonProperty("updated_by_user_id") Optional<String> updatedByUserId) {
        Utils.checkNotNull(colors, "colors");
        Utils.checkNotNull(companyCik, "companyCik");
        Utils.checkNotNull(companyUrl, "companyUrl");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(deletedAt, "deletedAt");
        Utils.checkNotNull(files, "files");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isin, "isin");
        Utils.checkNotNull(lastAudited, "lastAudited");
        Utils.checkNotNull(micCode, "micCode");
        Utils.checkNotNull(symbol, "symbol");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedByUserId, "updatedByUserId");
        this.colors = colors;
        this.companyCik = companyCik;
        this.companyUrl = companyUrl;
        this.createdAt = createdAt;
        this.deletedAt = deletedAt;
        this.files = files;
        this.id = id;
        this.isin = isin;
        this.lastAudited = lastAudited;
        this.micCode = micCode;
        this.symbol = symbol;
        this.type = type;
        this.updatedAt = updatedAt;
        this.updatedByUserId = updatedByUserId;
    }
    
    public LogoapiLogoRevision() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LogoapiLogoColors> colors() {
        return (Optional<LogoapiLogoColors>) colors;
    }

    @JsonIgnore
    public Optional<String> companyCik() {
        return companyCik;
    }

    @JsonIgnore
    public Optional<String> companyUrl() {
        return companyUrl;
    }

    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> deletedAt() {
        return deletedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LogoapiLogoRevisionFiles> files() {
        return (Optional<LogoapiLogoRevisionFiles>) files;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> isin() {
        return isin;
    }

    @JsonIgnore
    public Optional<String> lastAudited() {
        return lastAudited;
    }

    @JsonIgnore
    public Optional<String> micCode() {
        return micCode;
    }

    @JsonIgnore
    public Optional<String> symbol() {
        return symbol;
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    @JsonIgnore
    public Optional<String> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> updatedByUserId() {
        return updatedByUserId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public LogoapiLogoRevision withColors(LogoapiLogoColors colors) {
        Utils.checkNotNull(colors, "colors");
        this.colors = Optional.ofNullable(colors);
        return this;
    }

    public LogoapiLogoRevision withColors(Optional<? extends LogoapiLogoColors> colors) {
        Utils.checkNotNull(colors, "colors");
        this.colors = colors;
        return this;
    }

    public LogoapiLogoRevision withCompanyCik(String companyCik) {
        Utils.checkNotNull(companyCik, "companyCik");
        this.companyCik = Optional.ofNullable(companyCik);
        return this;
    }

    public LogoapiLogoRevision withCompanyCik(Optional<String> companyCik) {
        Utils.checkNotNull(companyCik, "companyCik");
        this.companyCik = companyCik;
        return this;
    }

    public LogoapiLogoRevision withCompanyUrl(String companyUrl) {
        Utils.checkNotNull(companyUrl, "companyUrl");
        this.companyUrl = Optional.ofNullable(companyUrl);
        return this;
    }

    public LogoapiLogoRevision withCompanyUrl(Optional<String> companyUrl) {
        Utils.checkNotNull(companyUrl, "companyUrl");
        this.companyUrl = companyUrl;
        return this;
    }

    public LogoapiLogoRevision withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public LogoapiLogoRevision withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public LogoapiLogoRevision withDeletedAt(String deletedAt) {
        Utils.checkNotNull(deletedAt, "deletedAt");
        this.deletedAt = Optional.ofNullable(deletedAt);
        return this;
    }

    public LogoapiLogoRevision withDeletedAt(Optional<String> deletedAt) {
        Utils.checkNotNull(deletedAt, "deletedAt");
        this.deletedAt = deletedAt;
        return this;
    }

    public LogoapiLogoRevision withFiles(LogoapiLogoRevisionFiles files) {
        Utils.checkNotNull(files, "files");
        this.files = Optional.ofNullable(files);
        return this;
    }

    public LogoapiLogoRevision withFiles(Optional<? extends LogoapiLogoRevisionFiles> files) {
        Utils.checkNotNull(files, "files");
        this.files = files;
        return this;
    }

    public LogoapiLogoRevision withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public LogoapiLogoRevision withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public LogoapiLogoRevision withIsin(String isin) {
        Utils.checkNotNull(isin, "isin");
        this.isin = Optional.ofNullable(isin);
        return this;
    }

    public LogoapiLogoRevision withIsin(Optional<String> isin) {
        Utils.checkNotNull(isin, "isin");
        this.isin = isin;
        return this;
    }

    public LogoapiLogoRevision withLastAudited(String lastAudited) {
        Utils.checkNotNull(lastAudited, "lastAudited");
        this.lastAudited = Optional.ofNullable(lastAudited);
        return this;
    }

    public LogoapiLogoRevision withLastAudited(Optional<String> lastAudited) {
        Utils.checkNotNull(lastAudited, "lastAudited");
        this.lastAudited = lastAudited;
        return this;
    }

    public LogoapiLogoRevision withMicCode(String micCode) {
        Utils.checkNotNull(micCode, "micCode");
        this.micCode = Optional.ofNullable(micCode);
        return this;
    }

    public LogoapiLogoRevision withMicCode(Optional<String> micCode) {
        Utils.checkNotNull(micCode, "micCode");
        this.micCode = micCode;
        return this;
    }

    public LogoapiLogoRevision withSymbol(String symbol) {
        Utils.checkNotNull(symbol, "symbol");
        this.symbol = Optional.ofNullable(symbol);
        return this;
    }

    public LogoapiLogoRevision withSymbol(Optional<String> symbol) {
        Utils.checkNotNull(symbol, "symbol");
        this.symbol = symbol;
        return this;
    }

    public LogoapiLogoRevision withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public LogoapiLogoRevision withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public LogoapiLogoRevision withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public LogoapiLogoRevision withUpdatedAt(Optional<String> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public LogoapiLogoRevision withUpdatedByUserId(String updatedByUserId) {
        Utils.checkNotNull(updatedByUserId, "updatedByUserId");
        this.updatedByUserId = Optional.ofNullable(updatedByUserId);
        return this;
    }

    public LogoapiLogoRevision withUpdatedByUserId(Optional<String> updatedByUserId) {
        Utils.checkNotNull(updatedByUserId, "updatedByUserId");
        this.updatedByUserId = updatedByUserId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LogoapiLogoRevision other = (LogoapiLogoRevision) o;
        return 
            Objects.deepEquals(this.colors, other.colors) &&
            Objects.deepEquals(this.companyCik, other.companyCik) &&
            Objects.deepEquals(this.companyUrl, other.companyUrl) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.deletedAt, other.deletedAt) &&
            Objects.deepEquals(this.files, other.files) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.isin, other.isin) &&
            Objects.deepEquals(this.lastAudited, other.lastAudited) &&
            Objects.deepEquals(this.micCode, other.micCode) &&
            Objects.deepEquals(this.symbol, other.symbol) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.updatedByUserId, other.updatedByUserId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            colors,
            companyCik,
            companyUrl,
            createdAt,
            deletedAt,
            files,
            id,
            isin,
            lastAudited,
            micCode,
            symbol,
            type,
            updatedAt,
            updatedByUserId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LogoapiLogoRevision.class,
                "colors", colors,
                "companyCik", companyCik,
                "companyUrl", companyUrl,
                "createdAt", createdAt,
                "deletedAt", deletedAt,
                "files", files,
                "id", id,
                "isin", isin,
                "lastAudited", lastAudited,
                "micCode", micCode,
                "symbol", symbol,
                "type", type,
                "updatedAt", updatedAt,
                "updatedByUserId", updatedByUserId);
    }
    
    public final static class Builder {
 
        private Optional<? extends LogoapiLogoColors> colors = Optional.empty();
 
        private Optional<String> companyCik = Optional.empty();
 
        private Optional<String> companyUrl = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<String> deletedAt = Optional.empty();
 
        private Optional<? extends LogoapiLogoRevisionFiles> files = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> isin = Optional.empty();
 
        private Optional<String> lastAudited = Optional.empty();
 
        private Optional<String> micCode = Optional.empty();
 
        private Optional<String> symbol = Optional.empty();
 
        private Optional<String> type = Optional.empty();
 
        private Optional<String> updatedAt = Optional.empty();
 
        private Optional<String> updatedByUserId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder colors(LogoapiLogoColors colors) {
            Utils.checkNotNull(colors, "colors");
            this.colors = Optional.ofNullable(colors);
            return this;
        }

        public Builder colors(Optional<? extends LogoapiLogoColors> colors) {
            Utils.checkNotNull(colors, "colors");
            this.colors = colors;
            return this;
        }

        public Builder companyCik(String companyCik) {
            Utils.checkNotNull(companyCik, "companyCik");
            this.companyCik = Optional.ofNullable(companyCik);
            return this;
        }

        public Builder companyCik(Optional<String> companyCik) {
            Utils.checkNotNull(companyCik, "companyCik");
            this.companyCik = companyCik;
            return this;
        }

        public Builder companyUrl(String companyUrl) {
            Utils.checkNotNull(companyUrl, "companyUrl");
            this.companyUrl = Optional.ofNullable(companyUrl);
            return this;
        }

        public Builder companyUrl(Optional<String> companyUrl) {
            Utils.checkNotNull(companyUrl, "companyUrl");
            this.companyUrl = companyUrl;
            return this;
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder deletedAt(String deletedAt) {
            Utils.checkNotNull(deletedAt, "deletedAt");
            this.deletedAt = Optional.ofNullable(deletedAt);
            return this;
        }

        public Builder deletedAt(Optional<String> deletedAt) {
            Utils.checkNotNull(deletedAt, "deletedAt");
            this.deletedAt = deletedAt;
            return this;
        }

        public Builder files(LogoapiLogoRevisionFiles files) {
            Utils.checkNotNull(files, "files");
            this.files = Optional.ofNullable(files);
            return this;
        }

        public Builder files(Optional<? extends LogoapiLogoRevisionFiles> files) {
            Utils.checkNotNull(files, "files");
            this.files = files;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder isin(String isin) {
            Utils.checkNotNull(isin, "isin");
            this.isin = Optional.ofNullable(isin);
            return this;
        }

        public Builder isin(Optional<String> isin) {
            Utils.checkNotNull(isin, "isin");
            this.isin = isin;
            return this;
        }

        public Builder lastAudited(String lastAudited) {
            Utils.checkNotNull(lastAudited, "lastAudited");
            this.lastAudited = Optional.ofNullable(lastAudited);
            return this;
        }

        public Builder lastAudited(Optional<String> lastAudited) {
            Utils.checkNotNull(lastAudited, "lastAudited");
            this.lastAudited = lastAudited;
            return this;
        }

        public Builder micCode(String micCode) {
            Utils.checkNotNull(micCode, "micCode");
            this.micCode = Optional.ofNullable(micCode);
            return this;
        }

        public Builder micCode(Optional<String> micCode) {
            Utils.checkNotNull(micCode, "micCode");
            this.micCode = micCode;
            return this;
        }

        public Builder symbol(String symbol) {
            Utils.checkNotNull(symbol, "symbol");
            this.symbol = Optional.ofNullable(symbol);
            return this;
        }

        public Builder symbol(Optional<String> symbol) {
            Utils.checkNotNull(symbol, "symbol");
            this.symbol = symbol;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<String> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedByUserId(String updatedByUserId) {
            Utils.checkNotNull(updatedByUserId, "updatedByUserId");
            this.updatedByUserId = Optional.ofNullable(updatedByUserId);
            return this;
        }

        public Builder updatedByUserId(Optional<String> updatedByUserId) {
            Utils.checkNotNull(updatedByUserId, "updatedByUserId");
            this.updatedByUserId = updatedByUserId;
            return this;
        }
        
        public LogoapiLogoRevision build() {
            return new LogoapiLogoRevision(
                colors,
                companyCik,
                companyUrl,
                createdAt,
                deletedAt,
                files,
                id,
                isin,
                lastAudited,
                micCode,
                symbol,
                type,
                updatedAt,
                updatedByUserId);
        }
    }
}

