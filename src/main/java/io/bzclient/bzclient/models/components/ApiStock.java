/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class ApiStock {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cusip")
    private Optional<String> cusip;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isin")
    private Optional<String> isin;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonCreator
    public ApiStock(
            @JsonProperty("cusip") Optional<String> cusip,
            @JsonProperty("isin") Optional<String> isin,
            @JsonProperty("name") Optional<String> name) {
        Utils.checkNotNull(cusip, "cusip");
        Utils.checkNotNull(isin, "isin");
        Utils.checkNotNull(name, "name");
        this.cusip = cusip;
        this.isin = isin;
        this.name = name;
    }
    
    public ApiStock() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> cusip() {
        return cusip;
    }

    @JsonIgnore
    public Optional<String> isin() {
        return isin;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ApiStock withCusip(String cusip) {
        Utils.checkNotNull(cusip, "cusip");
        this.cusip = Optional.ofNullable(cusip);
        return this;
    }

    public ApiStock withCusip(Optional<String> cusip) {
        Utils.checkNotNull(cusip, "cusip");
        this.cusip = cusip;
        return this;
    }

    public ApiStock withIsin(String isin) {
        Utils.checkNotNull(isin, "isin");
        this.isin = Optional.ofNullable(isin);
        return this;
    }

    public ApiStock withIsin(Optional<String> isin) {
        Utils.checkNotNull(isin, "isin");
        this.isin = isin;
        return this;
    }

    public ApiStock withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public ApiStock withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiStock other = (ApiStock) o;
        return 
            Objects.deepEquals(this.cusip, other.cusip) &&
            Objects.deepEquals(this.isin, other.isin) &&
            Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cusip,
            isin,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApiStock.class,
                "cusip", cusip,
                "isin", isin,
                "name", name);
    }
    
    public final static class Builder {
 
        private Optional<String> cusip = Optional.empty();
 
        private Optional<String> isin = Optional.empty();
 
        private Optional<String> name = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder cusip(String cusip) {
            Utils.checkNotNull(cusip, "cusip");
            this.cusip = Optional.ofNullable(cusip);
            return this;
        }

        public Builder cusip(Optional<String> cusip) {
            Utils.checkNotNull(cusip, "cusip");
            this.cusip = cusip;
            return this;
        }

        public Builder isin(String isin) {
            Utils.checkNotNull(isin, "isin");
            this.isin = Optional.ofNullable(isin);
            return this;
        }

        public Builder isin(Optional<String> isin) {
            Utils.checkNotNull(isin, "isin");
            this.isin = isin;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public ApiStock build() {
            return new ApiStock(
                cusip,
                isin,
                name);
        }
    }
}

