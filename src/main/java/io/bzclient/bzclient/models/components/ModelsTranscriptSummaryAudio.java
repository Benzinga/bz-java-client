/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ModelsTranscriptSummaryAudio {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_file")
    private Optional<? extends ModelsTranscriptAudioFile> audioFile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("call_id")
    private Optional<String> callId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    private Optional<Long> created;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private Optional<String> date;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security")
    private Optional<? extends ModelsSecurity> security;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_time")
    private Optional<String> startTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated")
    private Optional<Long> updated;

    @JsonCreator
    public ModelsTranscriptSummaryAudio(
            @JsonProperty("audio_file") Optional<? extends ModelsTranscriptAudioFile> audioFile,
            @JsonProperty("call_id") Optional<String> callId,
            @JsonProperty("created") Optional<Long> created,
            @JsonProperty("date") Optional<String> date,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("security") Optional<? extends ModelsSecurity> security,
            @JsonProperty("start_time") Optional<String> startTime,
            @JsonProperty("updated") Optional<Long> updated) {
        Utils.checkNotNull(audioFile, "audioFile");
        Utils.checkNotNull(callId, "callId");
        Utils.checkNotNull(created, "created");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(security, "security");
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(updated, "updated");
        this.audioFile = audioFile;
        this.callId = callId;
        this.created = created;
        this.date = date;
        this.id = id;
        this.security = security;
        this.startTime = startTime;
        this.updated = updated;
    }
    
    public ModelsTranscriptSummaryAudio() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ModelsTranscriptAudioFile> audioFile() {
        return (Optional<ModelsTranscriptAudioFile>) audioFile;
    }

    @JsonIgnore
    public Optional<String> callId() {
        return callId;
    }

    @JsonIgnore
    public Optional<Long> created() {
        return created;
    }

    @JsonIgnore
    public Optional<String> date() {
        return date;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ModelsSecurity> security() {
        return (Optional<ModelsSecurity>) security;
    }

    @JsonIgnore
    public Optional<String> startTime() {
        return startTime;
    }

    @JsonIgnore
    public Optional<Long> updated() {
        return updated;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModelsTranscriptSummaryAudio withAudioFile(ModelsTranscriptAudioFile audioFile) {
        Utils.checkNotNull(audioFile, "audioFile");
        this.audioFile = Optional.ofNullable(audioFile);
        return this;
    }

    public ModelsTranscriptSummaryAudio withAudioFile(Optional<? extends ModelsTranscriptAudioFile> audioFile) {
        Utils.checkNotNull(audioFile, "audioFile");
        this.audioFile = audioFile;
        return this;
    }

    public ModelsTranscriptSummaryAudio withCallId(String callId) {
        Utils.checkNotNull(callId, "callId");
        this.callId = Optional.ofNullable(callId);
        return this;
    }

    public ModelsTranscriptSummaryAudio withCallId(Optional<String> callId) {
        Utils.checkNotNull(callId, "callId");
        this.callId = callId;
        return this;
    }

    public ModelsTranscriptSummaryAudio withCreated(long created) {
        Utils.checkNotNull(created, "created");
        this.created = Optional.ofNullable(created);
        return this;
    }

    public ModelsTranscriptSummaryAudio withCreated(Optional<Long> created) {
        Utils.checkNotNull(created, "created");
        this.created = created;
        return this;
    }

    public ModelsTranscriptSummaryAudio withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    public ModelsTranscriptSummaryAudio withDate(Optional<String> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public ModelsTranscriptSummaryAudio withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ModelsTranscriptSummaryAudio withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ModelsTranscriptSummaryAudio withSecurity(ModelsSecurity security) {
        Utils.checkNotNull(security, "security");
        this.security = Optional.ofNullable(security);
        return this;
    }

    public ModelsTranscriptSummaryAudio withSecurity(Optional<? extends ModelsSecurity> security) {
        Utils.checkNotNull(security, "security");
        this.security = security;
        return this;
    }

    public ModelsTranscriptSummaryAudio withStartTime(String startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = Optional.ofNullable(startTime);
        return this;
    }

    public ModelsTranscriptSummaryAudio withStartTime(Optional<String> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    public ModelsTranscriptSummaryAudio withUpdated(long updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = Optional.ofNullable(updated);
        return this;
    }

    public ModelsTranscriptSummaryAudio withUpdated(Optional<Long> updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = updated;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelsTranscriptSummaryAudio other = (ModelsTranscriptSummaryAudio) o;
        return 
            Objects.deepEquals(this.audioFile, other.audioFile) &&
            Objects.deepEquals(this.callId, other.callId) &&
            Objects.deepEquals(this.created, other.created) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.security, other.security) &&
            Objects.deepEquals(this.startTime, other.startTime) &&
            Objects.deepEquals(this.updated, other.updated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            audioFile,
            callId,
            created,
            date,
            id,
            security,
            startTime,
            updated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModelsTranscriptSummaryAudio.class,
                "audioFile", audioFile,
                "callId", callId,
                "created", created,
                "date", date,
                "id", id,
                "security", security,
                "startTime", startTime,
                "updated", updated);
    }
    
    public final static class Builder {
 
        private Optional<? extends ModelsTranscriptAudioFile> audioFile = Optional.empty();
 
        private Optional<String> callId = Optional.empty();
 
        private Optional<Long> created = Optional.empty();
 
        private Optional<String> date = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends ModelsSecurity> security = Optional.empty();
 
        private Optional<String> startTime = Optional.empty();
 
        private Optional<Long> updated = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder audioFile(ModelsTranscriptAudioFile audioFile) {
            Utils.checkNotNull(audioFile, "audioFile");
            this.audioFile = Optional.ofNullable(audioFile);
            return this;
        }

        public Builder audioFile(Optional<? extends ModelsTranscriptAudioFile> audioFile) {
            Utils.checkNotNull(audioFile, "audioFile");
            this.audioFile = audioFile;
            return this;
        }

        public Builder callId(String callId) {
            Utils.checkNotNull(callId, "callId");
            this.callId = Optional.ofNullable(callId);
            return this;
        }

        public Builder callId(Optional<String> callId) {
            Utils.checkNotNull(callId, "callId");
            this.callId = callId;
            return this;
        }

        public Builder created(long created) {
            Utils.checkNotNull(created, "created");
            this.created = Optional.ofNullable(created);
            return this;
        }

        public Builder created(Optional<Long> created) {
            Utils.checkNotNull(created, "created");
            this.created = created;
            return this;
        }

        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        public Builder date(Optional<String> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder security(ModelsSecurity security) {
            Utils.checkNotNull(security, "security");
            this.security = Optional.ofNullable(security);
            return this;
        }

        public Builder security(Optional<? extends ModelsSecurity> security) {
            Utils.checkNotNull(security, "security");
            this.security = security;
            return this;
        }

        public Builder startTime(String startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        public Builder startTime(Optional<String> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }

        public Builder updated(long updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = Optional.ofNullable(updated);
            return this;
        }

        public Builder updated(Optional<Long> updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = updated;
            return this;
        }
        
        public ModelsTranscriptSummaryAudio build() {
            return new ModelsTranscriptSummaryAudio(
                audioFile,
                callId,
                created,
                date,
                id,
                security,
                startTime,
                updated);
        }
    }
}

