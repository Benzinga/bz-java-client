/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ModelsRmvdJSON {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removed")
    private Optional<? extends List<ModelsRmvd>> removed;

    @JsonCreator
    public ModelsRmvdJSON(
            @JsonProperty("removed") Optional<? extends List<ModelsRmvd>> removed) {
        Utils.checkNotNull(removed, "removed");
        this.removed = removed;
    }
    
    public ModelsRmvdJSON() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ModelsRmvd>> removed() {
        return (Optional<List<ModelsRmvd>>) removed;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModelsRmvdJSON withRemoved(List<ModelsRmvd> removed) {
        Utils.checkNotNull(removed, "removed");
        this.removed = Optional.ofNullable(removed);
        return this;
    }

    public ModelsRmvdJSON withRemoved(Optional<? extends List<ModelsRmvd>> removed) {
        Utils.checkNotNull(removed, "removed");
        this.removed = removed;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelsRmvdJSON other = (ModelsRmvdJSON) o;
        return 
            Objects.deepEquals(this.removed, other.removed);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            removed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModelsRmvdJSON.class,
                "removed", removed);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<ModelsRmvd>> removed = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder removed(List<ModelsRmvd> removed) {
            Utils.checkNotNull(removed, "removed");
            this.removed = Optional.ofNullable(removed);
            return this;
        }

        public Builder removed(Optional<? extends List<ModelsRmvd>> removed) {
            Utils.checkNotNull(removed, "removed");
            this.removed = removed;
            return this;
        }
        
        public ModelsRmvdJSON build() {
            return new ModelsRmvdJSON(
                removed);
        }
    }
}

