/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class ModelsNewsquantified {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("1_Minute%")
    private Optional<String> oneMinutePercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("5_Minutes%")
    private Optional<String> fiveMinutesPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("10_Minutes%")
    private Optional<String> tenMinutesPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("30_Minutes%")
    private Optional<String> thirtyMinutesPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("30_Seconds%")
    private Optional<String> thirtySecondsPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("60_Minutes%")
    private Optional<String> sixtyMinutesPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("90_Minutes%")
    private Optional<String> ninetyMinutesPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("120_Minutes%")
    private Optional<String> oneHundredAndTwentyMinutesPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ATR_Ratio")
    private Optional<String> atrRatio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ATR14")
    private Optional<String> atr14;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AllTicks")
    private Optional<String> allTicks;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AllVWAP")
    private Optional<String> allVWAP;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AnalystAction")
    private Optional<String> analystAction;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AnalystActionFrom")
    private Optional<String> analystActionFrom;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AnalystActionTo")
    private Optional<String> analystActionTo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AnalystFirm")
    private Optional<String> analystFirm;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Close_Vol")
    private Optional<String> closeVol;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Comments")
    private Optional<String> comments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Curr_Vol")
    private Optional<String> currVol;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Date")
    private Optional<String> date;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DayOpen")
    private Optional<String> dayOpen;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DividendYield%")
    private Optional<String> dividendYieldPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EODClose")
    private Optional<String> eodClose;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EODHigh")
    private Optional<String> eodHigh;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EODLow")
    private Optional<String> eodLow;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EODVWAP")
    private Optional<String> eodvwap;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EPSAction")
    private Optional<String> epsAction;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EPSActual")
    private Optional<String> epsActual;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Ex")
    private Optional<String> ex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Headlines")
    private Optional<String> headlines;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HighExcStdDev")
    private Optional<String> highExcStdDev;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("L1")
    private Optional<String> l1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("L2")
    private Optional<String> l2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("L3")
    private Optional<String> l3;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("L4")
    private Optional<String> l4;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("L5")
    private Optional<String> l5;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("L10")
    private Optional<String> l10;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("L20")
    private Optional<String> l20;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("L75")
    private Optional<String> l75;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LS")
    private Optional<String> ls;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LowExcStdDev")
    private Optional<String> lowExcStdDev;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MainVWAP")
    private Optional<String> mainVWAP;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxDnAmt")
    private Optional<String> maxDnAmt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxUpAmt")
    private Optional<String> maxUpAmt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MktCap(1000)")
    private Optional<String> mktCap1000;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Mov_Vol")
    private Optional<String> movVol;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NewsSess")
    private Optional<String> newsSess;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Open_Vol")
    private Optional<String> openVol;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OpenGap%")
    private Optional<String> openGapPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("P1")
    private Optional<String> p1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("P2")
    private Optional<String> p2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("P3")
    private Optional<String> p3;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("P4")
    private Optional<String> p4;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("P5")
    private Optional<String> p5;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("P10")
    private Optional<String> p10;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("P20")
    private Optional<String> p20;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("P75")
    private Optional<String> p75;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PERatio")
    private Optional<String> peRatio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PID")
    private Optional<String> pid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PUBt")
    private Optional<String> puBt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PostVWAP")
    private Optional<String> postVWAP;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PreVWAP")
    private Optional<String> preVWAP;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Prev_Vol")
    private Optional<String> prevVol;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PrevClose")
    private Optional<String> prevClose;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Provider")
    private Optional<String> provider;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RECt")
    private Optional<String> reCt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Range%")
    private Optional<String> rangePercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RangeAmt")
    private Optional<String> rangeAmt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RangeStdDev")
    private Optional<String> rangeStdDev;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReportSess")
    private Optional<String> reportSess;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ResourceID")
    private Optional<String> resourceID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Result%")
    private Optional<String> resultPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Result_Vs_Index%")
    private Optional<String> resultVsIndexPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S1")
    private Optional<String> s1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S2")
    private Optional<String> s2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3")
    private Optional<String> s3;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S4")
    private Optional<String> s4;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S5")
    private Optional<String> s5;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S10")
    private Optional<String> s10;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S20")
    private Optional<String> s20;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S75")
    private Optional<String> s75;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SPYLast")
    private Optional<String> spyLast;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SPYclose")
    private Optional<String> spYclose;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ShortInterest%")
    private Optional<String> shortInterestPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Symb")
    private Optional<String> symb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TONHigh")
    private Optional<String> tonHigh;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TONLast")
    private Optional<String> tonLast;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TONLow")
    private Optional<String> tonLow;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Topics")
    private Optional<String> topics;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Vol_Ratio")
    private Optional<String> volRatio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VolumeStdDev")
    private Optional<String> volumeStdDev;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    private Optional<Long> created;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxDown%")
    private Optional<String> maxDownPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxUp%")
    private Optional<String> maxUpPercent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prevDay%")
    private Optional<String> prevDayPercent;

    @JsonCreator
    public ModelsNewsquantified(
            @JsonProperty("_id") Optional<String> id,
            @JsonProperty("1_Minute%") Optional<String> oneMinutePercent,
            @JsonProperty("5_Minutes%") Optional<String> fiveMinutesPercent,
            @JsonProperty("10_Minutes%") Optional<String> tenMinutesPercent,
            @JsonProperty("30_Minutes%") Optional<String> thirtyMinutesPercent,
            @JsonProperty("30_Seconds%") Optional<String> thirtySecondsPercent,
            @JsonProperty("60_Minutes%") Optional<String> sixtyMinutesPercent,
            @JsonProperty("90_Minutes%") Optional<String> ninetyMinutesPercent,
            @JsonProperty("120_Minutes%") Optional<String> oneHundredAndTwentyMinutesPercent,
            @JsonProperty("ATR_Ratio") Optional<String> atrRatio,
            @JsonProperty("ATR14") Optional<String> atr14,
            @JsonProperty("AllTicks") Optional<String> allTicks,
            @JsonProperty("AllVWAP") Optional<String> allVWAP,
            @JsonProperty("AnalystAction") Optional<String> analystAction,
            @JsonProperty("AnalystActionFrom") Optional<String> analystActionFrom,
            @JsonProperty("AnalystActionTo") Optional<String> analystActionTo,
            @JsonProperty("AnalystFirm") Optional<String> analystFirm,
            @JsonProperty("Close_Vol") Optional<String> closeVol,
            @JsonProperty("Comments") Optional<String> comments,
            @JsonProperty("Curr_Vol") Optional<String> currVol,
            @JsonProperty("Date") Optional<String> date,
            @JsonProperty("DayOpen") Optional<String> dayOpen,
            @JsonProperty("DividendYield%") Optional<String> dividendYieldPercent,
            @JsonProperty("EODClose") Optional<String> eodClose,
            @JsonProperty("EODHigh") Optional<String> eodHigh,
            @JsonProperty("EODLow") Optional<String> eodLow,
            @JsonProperty("EODVWAP") Optional<String> eodvwap,
            @JsonProperty("EPSAction") Optional<String> epsAction,
            @JsonProperty("EPSActual") Optional<String> epsActual,
            @JsonProperty("Ex") Optional<String> ex,
            @JsonProperty("Headlines") Optional<String> headlines,
            @JsonProperty("HighExcStdDev") Optional<String> highExcStdDev,
            @JsonProperty("L1") Optional<String> l1,
            @JsonProperty("L2") Optional<String> l2,
            @JsonProperty("L3") Optional<String> l3,
            @JsonProperty("L4") Optional<String> l4,
            @JsonProperty("L5") Optional<String> l5,
            @JsonProperty("L10") Optional<String> l10,
            @JsonProperty("L20") Optional<String> l20,
            @JsonProperty("L75") Optional<String> l75,
            @JsonProperty("LS") Optional<String> ls,
            @JsonProperty("LowExcStdDev") Optional<String> lowExcStdDev,
            @JsonProperty("MainVWAP") Optional<String> mainVWAP,
            @JsonProperty("MaxDnAmt") Optional<String> maxDnAmt,
            @JsonProperty("MaxUpAmt") Optional<String> maxUpAmt,
            @JsonProperty("MktCap(1000)") Optional<String> mktCap1000,
            @JsonProperty("Mov_Vol") Optional<String> movVol,
            @JsonProperty("NewsSess") Optional<String> newsSess,
            @JsonProperty("Open_Vol") Optional<String> openVol,
            @JsonProperty("OpenGap%") Optional<String> openGapPercent,
            @JsonProperty("P1") Optional<String> p1,
            @JsonProperty("P2") Optional<String> p2,
            @JsonProperty("P3") Optional<String> p3,
            @JsonProperty("P4") Optional<String> p4,
            @JsonProperty("P5") Optional<String> p5,
            @JsonProperty("P10") Optional<String> p10,
            @JsonProperty("P20") Optional<String> p20,
            @JsonProperty("P75") Optional<String> p75,
            @JsonProperty("PERatio") Optional<String> peRatio,
            @JsonProperty("PID") Optional<String> pid,
            @JsonProperty("PUBt") Optional<String> puBt,
            @JsonProperty("PostVWAP") Optional<String> postVWAP,
            @JsonProperty("PreVWAP") Optional<String> preVWAP,
            @JsonProperty("Prev_Vol") Optional<String> prevVol,
            @JsonProperty("PrevClose") Optional<String> prevClose,
            @JsonProperty("Provider") Optional<String> provider,
            @JsonProperty("RECt") Optional<String> reCt,
            @JsonProperty("Range%") Optional<String> rangePercent,
            @JsonProperty("RangeAmt") Optional<String> rangeAmt,
            @JsonProperty("RangeStdDev") Optional<String> rangeStdDev,
            @JsonProperty("ReportSess") Optional<String> reportSess,
            @JsonProperty("ResourceID") Optional<String> resourceID,
            @JsonProperty("Result%") Optional<String> resultPercent,
            @JsonProperty("Result_Vs_Index%") Optional<String> resultVsIndexPercent,
            @JsonProperty("S1") Optional<String> s1,
            @JsonProperty("S2") Optional<String> s2,
            @JsonProperty("S3") Optional<String> s3,
            @JsonProperty("S4") Optional<String> s4,
            @JsonProperty("S5") Optional<String> s5,
            @JsonProperty("S10") Optional<String> s10,
            @JsonProperty("S20") Optional<String> s20,
            @JsonProperty("S75") Optional<String> s75,
            @JsonProperty("SPYLast") Optional<String> spyLast,
            @JsonProperty("SPYclose") Optional<String> spYclose,
            @JsonProperty("ShortInterest%") Optional<String> shortInterestPercent,
            @JsonProperty("Symb") Optional<String> symb,
            @JsonProperty("TONHigh") Optional<String> tonHigh,
            @JsonProperty("TONLast") Optional<String> tonLast,
            @JsonProperty("TONLow") Optional<String> tonLow,
            @JsonProperty("Topics") Optional<String> topics,
            @JsonProperty("Vol_Ratio") Optional<String> volRatio,
            @JsonProperty("VolumeStdDev") Optional<String> volumeStdDev,
            @JsonProperty("created") Optional<Long> created,
            @JsonProperty("maxDown%") Optional<String> maxDownPercent,
            @JsonProperty("maxUp%") Optional<String> maxUpPercent,
            @JsonProperty("prevDay%") Optional<String> prevDayPercent) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(oneMinutePercent, "oneMinutePercent");
        Utils.checkNotNull(fiveMinutesPercent, "fiveMinutesPercent");
        Utils.checkNotNull(tenMinutesPercent, "tenMinutesPercent");
        Utils.checkNotNull(thirtyMinutesPercent, "thirtyMinutesPercent");
        Utils.checkNotNull(thirtySecondsPercent, "thirtySecondsPercent");
        Utils.checkNotNull(sixtyMinutesPercent, "sixtyMinutesPercent");
        Utils.checkNotNull(ninetyMinutesPercent, "ninetyMinutesPercent");
        Utils.checkNotNull(oneHundredAndTwentyMinutesPercent, "oneHundredAndTwentyMinutesPercent");
        Utils.checkNotNull(atrRatio, "atrRatio");
        Utils.checkNotNull(atr14, "atr14");
        Utils.checkNotNull(allTicks, "allTicks");
        Utils.checkNotNull(allVWAP, "allVWAP");
        Utils.checkNotNull(analystAction, "analystAction");
        Utils.checkNotNull(analystActionFrom, "analystActionFrom");
        Utils.checkNotNull(analystActionTo, "analystActionTo");
        Utils.checkNotNull(analystFirm, "analystFirm");
        Utils.checkNotNull(closeVol, "closeVol");
        Utils.checkNotNull(comments, "comments");
        Utils.checkNotNull(currVol, "currVol");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(dayOpen, "dayOpen");
        Utils.checkNotNull(dividendYieldPercent, "dividendYieldPercent");
        Utils.checkNotNull(eodClose, "eodClose");
        Utils.checkNotNull(eodHigh, "eodHigh");
        Utils.checkNotNull(eodLow, "eodLow");
        Utils.checkNotNull(eodvwap, "eodvwap");
        Utils.checkNotNull(epsAction, "epsAction");
        Utils.checkNotNull(epsActual, "epsActual");
        Utils.checkNotNull(ex, "ex");
        Utils.checkNotNull(headlines, "headlines");
        Utils.checkNotNull(highExcStdDev, "highExcStdDev");
        Utils.checkNotNull(l1, "l1");
        Utils.checkNotNull(l2, "l2");
        Utils.checkNotNull(l3, "l3");
        Utils.checkNotNull(l4, "l4");
        Utils.checkNotNull(l5, "l5");
        Utils.checkNotNull(l10, "l10");
        Utils.checkNotNull(l20, "l20");
        Utils.checkNotNull(l75, "l75");
        Utils.checkNotNull(ls, "ls");
        Utils.checkNotNull(lowExcStdDev, "lowExcStdDev");
        Utils.checkNotNull(mainVWAP, "mainVWAP");
        Utils.checkNotNull(maxDnAmt, "maxDnAmt");
        Utils.checkNotNull(maxUpAmt, "maxUpAmt");
        Utils.checkNotNull(mktCap1000, "mktCap1000");
        Utils.checkNotNull(movVol, "movVol");
        Utils.checkNotNull(newsSess, "newsSess");
        Utils.checkNotNull(openVol, "openVol");
        Utils.checkNotNull(openGapPercent, "openGapPercent");
        Utils.checkNotNull(p1, "p1");
        Utils.checkNotNull(p2, "p2");
        Utils.checkNotNull(p3, "p3");
        Utils.checkNotNull(p4, "p4");
        Utils.checkNotNull(p5, "p5");
        Utils.checkNotNull(p10, "p10");
        Utils.checkNotNull(p20, "p20");
        Utils.checkNotNull(p75, "p75");
        Utils.checkNotNull(peRatio, "peRatio");
        Utils.checkNotNull(pid, "pid");
        Utils.checkNotNull(puBt, "puBt");
        Utils.checkNotNull(postVWAP, "postVWAP");
        Utils.checkNotNull(preVWAP, "preVWAP");
        Utils.checkNotNull(prevVol, "prevVol");
        Utils.checkNotNull(prevClose, "prevClose");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(reCt, "reCt");
        Utils.checkNotNull(rangePercent, "rangePercent");
        Utils.checkNotNull(rangeAmt, "rangeAmt");
        Utils.checkNotNull(rangeStdDev, "rangeStdDev");
        Utils.checkNotNull(reportSess, "reportSess");
        Utils.checkNotNull(resourceID, "resourceID");
        Utils.checkNotNull(resultPercent, "resultPercent");
        Utils.checkNotNull(resultVsIndexPercent, "resultVsIndexPercent");
        Utils.checkNotNull(s1, "s1");
        Utils.checkNotNull(s2, "s2");
        Utils.checkNotNull(s3, "s3");
        Utils.checkNotNull(s4, "s4");
        Utils.checkNotNull(s5, "s5");
        Utils.checkNotNull(s10, "s10");
        Utils.checkNotNull(s20, "s20");
        Utils.checkNotNull(s75, "s75");
        Utils.checkNotNull(spyLast, "spyLast");
        Utils.checkNotNull(spYclose, "spYclose");
        Utils.checkNotNull(shortInterestPercent, "shortInterestPercent");
        Utils.checkNotNull(symb, "symb");
        Utils.checkNotNull(tonHigh, "tonHigh");
        Utils.checkNotNull(tonLast, "tonLast");
        Utils.checkNotNull(tonLow, "tonLow");
        Utils.checkNotNull(topics, "topics");
        Utils.checkNotNull(volRatio, "volRatio");
        Utils.checkNotNull(volumeStdDev, "volumeStdDev");
        Utils.checkNotNull(created, "created");
        Utils.checkNotNull(maxDownPercent, "maxDownPercent");
        Utils.checkNotNull(maxUpPercent, "maxUpPercent");
        Utils.checkNotNull(prevDayPercent, "prevDayPercent");
        this.id = id;
        this.oneMinutePercent = oneMinutePercent;
        this.fiveMinutesPercent = fiveMinutesPercent;
        this.tenMinutesPercent = tenMinutesPercent;
        this.thirtyMinutesPercent = thirtyMinutesPercent;
        this.thirtySecondsPercent = thirtySecondsPercent;
        this.sixtyMinutesPercent = sixtyMinutesPercent;
        this.ninetyMinutesPercent = ninetyMinutesPercent;
        this.oneHundredAndTwentyMinutesPercent = oneHundredAndTwentyMinutesPercent;
        this.atrRatio = atrRatio;
        this.atr14 = atr14;
        this.allTicks = allTicks;
        this.allVWAP = allVWAP;
        this.analystAction = analystAction;
        this.analystActionFrom = analystActionFrom;
        this.analystActionTo = analystActionTo;
        this.analystFirm = analystFirm;
        this.closeVol = closeVol;
        this.comments = comments;
        this.currVol = currVol;
        this.date = date;
        this.dayOpen = dayOpen;
        this.dividendYieldPercent = dividendYieldPercent;
        this.eodClose = eodClose;
        this.eodHigh = eodHigh;
        this.eodLow = eodLow;
        this.eodvwap = eodvwap;
        this.epsAction = epsAction;
        this.epsActual = epsActual;
        this.ex = ex;
        this.headlines = headlines;
        this.highExcStdDev = highExcStdDev;
        this.l1 = l1;
        this.l2 = l2;
        this.l3 = l3;
        this.l4 = l4;
        this.l5 = l5;
        this.l10 = l10;
        this.l20 = l20;
        this.l75 = l75;
        this.ls = ls;
        this.lowExcStdDev = lowExcStdDev;
        this.mainVWAP = mainVWAP;
        this.maxDnAmt = maxDnAmt;
        this.maxUpAmt = maxUpAmt;
        this.mktCap1000 = mktCap1000;
        this.movVol = movVol;
        this.newsSess = newsSess;
        this.openVol = openVol;
        this.openGapPercent = openGapPercent;
        this.p1 = p1;
        this.p2 = p2;
        this.p3 = p3;
        this.p4 = p4;
        this.p5 = p5;
        this.p10 = p10;
        this.p20 = p20;
        this.p75 = p75;
        this.peRatio = peRatio;
        this.pid = pid;
        this.puBt = puBt;
        this.postVWAP = postVWAP;
        this.preVWAP = preVWAP;
        this.prevVol = prevVol;
        this.prevClose = prevClose;
        this.provider = provider;
        this.reCt = reCt;
        this.rangePercent = rangePercent;
        this.rangeAmt = rangeAmt;
        this.rangeStdDev = rangeStdDev;
        this.reportSess = reportSess;
        this.resourceID = resourceID;
        this.resultPercent = resultPercent;
        this.resultVsIndexPercent = resultVsIndexPercent;
        this.s1 = s1;
        this.s2 = s2;
        this.s3 = s3;
        this.s4 = s4;
        this.s5 = s5;
        this.s10 = s10;
        this.s20 = s20;
        this.s75 = s75;
        this.spyLast = spyLast;
        this.spYclose = spYclose;
        this.shortInterestPercent = shortInterestPercent;
        this.symb = symb;
        this.tonHigh = tonHigh;
        this.tonLast = tonLast;
        this.tonLow = tonLow;
        this.topics = topics;
        this.volRatio = volRatio;
        this.volumeStdDev = volumeStdDev;
        this.created = created;
        this.maxDownPercent = maxDownPercent;
        this.maxUpPercent = maxUpPercent;
        this.prevDayPercent = prevDayPercent;
    }
    
    public ModelsNewsquantified() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> oneMinutePercent() {
        return oneMinutePercent;
    }

    @JsonIgnore
    public Optional<String> fiveMinutesPercent() {
        return fiveMinutesPercent;
    }

    @JsonIgnore
    public Optional<String> tenMinutesPercent() {
        return tenMinutesPercent;
    }

    @JsonIgnore
    public Optional<String> thirtyMinutesPercent() {
        return thirtyMinutesPercent;
    }

    @JsonIgnore
    public Optional<String> thirtySecondsPercent() {
        return thirtySecondsPercent;
    }

    @JsonIgnore
    public Optional<String> sixtyMinutesPercent() {
        return sixtyMinutesPercent;
    }

    @JsonIgnore
    public Optional<String> ninetyMinutesPercent() {
        return ninetyMinutesPercent;
    }

    @JsonIgnore
    public Optional<String> oneHundredAndTwentyMinutesPercent() {
        return oneHundredAndTwentyMinutesPercent;
    }

    @JsonIgnore
    public Optional<String> atrRatio() {
        return atrRatio;
    }

    @JsonIgnore
    public Optional<String> atr14() {
        return atr14;
    }

    @JsonIgnore
    public Optional<String> allTicks() {
        return allTicks;
    }

    @JsonIgnore
    public Optional<String> allVWAP() {
        return allVWAP;
    }

    @JsonIgnore
    public Optional<String> analystAction() {
        return analystAction;
    }

    @JsonIgnore
    public Optional<String> analystActionFrom() {
        return analystActionFrom;
    }

    @JsonIgnore
    public Optional<String> analystActionTo() {
        return analystActionTo;
    }

    @JsonIgnore
    public Optional<String> analystFirm() {
        return analystFirm;
    }

    @JsonIgnore
    public Optional<String> closeVol() {
        return closeVol;
    }

    @JsonIgnore
    public Optional<String> comments() {
        return comments;
    }

    @JsonIgnore
    public Optional<String> currVol() {
        return currVol;
    }

    @JsonIgnore
    public Optional<String> date() {
        return date;
    }

    @JsonIgnore
    public Optional<String> dayOpen() {
        return dayOpen;
    }

    @JsonIgnore
    public Optional<String> dividendYieldPercent() {
        return dividendYieldPercent;
    }

    @JsonIgnore
    public Optional<String> eodClose() {
        return eodClose;
    }

    @JsonIgnore
    public Optional<String> eodHigh() {
        return eodHigh;
    }

    @JsonIgnore
    public Optional<String> eodLow() {
        return eodLow;
    }

    @JsonIgnore
    public Optional<String> eodvwap() {
        return eodvwap;
    }

    @JsonIgnore
    public Optional<String> epsAction() {
        return epsAction;
    }

    @JsonIgnore
    public Optional<String> epsActual() {
        return epsActual;
    }

    @JsonIgnore
    public Optional<String> ex() {
        return ex;
    }

    @JsonIgnore
    public Optional<String> headlines() {
        return headlines;
    }

    @JsonIgnore
    public Optional<String> highExcStdDev() {
        return highExcStdDev;
    }

    @JsonIgnore
    public Optional<String> l1() {
        return l1;
    }

    @JsonIgnore
    public Optional<String> l2() {
        return l2;
    }

    @JsonIgnore
    public Optional<String> l3() {
        return l3;
    }

    @JsonIgnore
    public Optional<String> l4() {
        return l4;
    }

    @JsonIgnore
    public Optional<String> l5() {
        return l5;
    }

    @JsonIgnore
    public Optional<String> l10() {
        return l10;
    }

    @JsonIgnore
    public Optional<String> l20() {
        return l20;
    }

    @JsonIgnore
    public Optional<String> l75() {
        return l75;
    }

    @JsonIgnore
    public Optional<String> ls() {
        return ls;
    }

    @JsonIgnore
    public Optional<String> lowExcStdDev() {
        return lowExcStdDev;
    }

    @JsonIgnore
    public Optional<String> mainVWAP() {
        return mainVWAP;
    }

    @JsonIgnore
    public Optional<String> maxDnAmt() {
        return maxDnAmt;
    }

    @JsonIgnore
    public Optional<String> maxUpAmt() {
        return maxUpAmt;
    }

    @JsonIgnore
    public Optional<String> mktCap1000() {
        return mktCap1000;
    }

    @JsonIgnore
    public Optional<String> movVol() {
        return movVol;
    }

    @JsonIgnore
    public Optional<String> newsSess() {
        return newsSess;
    }

    @JsonIgnore
    public Optional<String> openVol() {
        return openVol;
    }

    @JsonIgnore
    public Optional<String> openGapPercent() {
        return openGapPercent;
    }

    @JsonIgnore
    public Optional<String> p1() {
        return p1;
    }

    @JsonIgnore
    public Optional<String> p2() {
        return p2;
    }

    @JsonIgnore
    public Optional<String> p3() {
        return p3;
    }

    @JsonIgnore
    public Optional<String> p4() {
        return p4;
    }

    @JsonIgnore
    public Optional<String> p5() {
        return p5;
    }

    @JsonIgnore
    public Optional<String> p10() {
        return p10;
    }

    @JsonIgnore
    public Optional<String> p20() {
        return p20;
    }

    @JsonIgnore
    public Optional<String> p75() {
        return p75;
    }

    @JsonIgnore
    public Optional<String> peRatio() {
        return peRatio;
    }

    @JsonIgnore
    public Optional<String> pid() {
        return pid;
    }

    @JsonIgnore
    public Optional<String> puBt() {
        return puBt;
    }

    @JsonIgnore
    public Optional<String> postVWAP() {
        return postVWAP;
    }

    @JsonIgnore
    public Optional<String> preVWAP() {
        return preVWAP;
    }

    @JsonIgnore
    public Optional<String> prevVol() {
        return prevVol;
    }

    @JsonIgnore
    public Optional<String> prevClose() {
        return prevClose;
    }

    @JsonIgnore
    public Optional<String> provider() {
        return provider;
    }

    @JsonIgnore
    public Optional<String> reCt() {
        return reCt;
    }

    @JsonIgnore
    public Optional<String> rangePercent() {
        return rangePercent;
    }

    @JsonIgnore
    public Optional<String> rangeAmt() {
        return rangeAmt;
    }

    @JsonIgnore
    public Optional<String> rangeStdDev() {
        return rangeStdDev;
    }

    @JsonIgnore
    public Optional<String> reportSess() {
        return reportSess;
    }

    @JsonIgnore
    public Optional<String> resourceID() {
        return resourceID;
    }

    @JsonIgnore
    public Optional<String> resultPercent() {
        return resultPercent;
    }

    @JsonIgnore
    public Optional<String> resultVsIndexPercent() {
        return resultVsIndexPercent;
    }

    @JsonIgnore
    public Optional<String> s1() {
        return s1;
    }

    @JsonIgnore
    public Optional<String> s2() {
        return s2;
    }

    @JsonIgnore
    public Optional<String> s3() {
        return s3;
    }

    @JsonIgnore
    public Optional<String> s4() {
        return s4;
    }

    @JsonIgnore
    public Optional<String> s5() {
        return s5;
    }

    @JsonIgnore
    public Optional<String> s10() {
        return s10;
    }

    @JsonIgnore
    public Optional<String> s20() {
        return s20;
    }

    @JsonIgnore
    public Optional<String> s75() {
        return s75;
    }

    @JsonIgnore
    public Optional<String> spyLast() {
        return spyLast;
    }

    @JsonIgnore
    public Optional<String> spYclose() {
        return spYclose;
    }

    @JsonIgnore
    public Optional<String> shortInterestPercent() {
        return shortInterestPercent;
    }

    @JsonIgnore
    public Optional<String> symb() {
        return symb;
    }

    @JsonIgnore
    public Optional<String> tonHigh() {
        return tonHigh;
    }

    @JsonIgnore
    public Optional<String> tonLast() {
        return tonLast;
    }

    @JsonIgnore
    public Optional<String> tonLow() {
        return tonLow;
    }

    @JsonIgnore
    public Optional<String> topics() {
        return topics;
    }

    @JsonIgnore
    public Optional<String> volRatio() {
        return volRatio;
    }

    @JsonIgnore
    public Optional<String> volumeStdDev() {
        return volumeStdDev;
    }

    @JsonIgnore
    public Optional<Long> created() {
        return created;
    }

    @JsonIgnore
    public Optional<String> maxDownPercent() {
        return maxDownPercent;
    }

    @JsonIgnore
    public Optional<String> maxUpPercent() {
        return maxUpPercent;
    }

    @JsonIgnore
    public Optional<String> prevDayPercent() {
        return prevDayPercent;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModelsNewsquantified withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ModelsNewsquantified withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ModelsNewsquantified withOneMinutePercent(String oneMinutePercent) {
        Utils.checkNotNull(oneMinutePercent, "oneMinutePercent");
        this.oneMinutePercent = Optional.ofNullable(oneMinutePercent);
        return this;
    }

    public ModelsNewsquantified withOneMinutePercent(Optional<String> oneMinutePercent) {
        Utils.checkNotNull(oneMinutePercent, "oneMinutePercent");
        this.oneMinutePercent = oneMinutePercent;
        return this;
    }

    public ModelsNewsquantified withFiveMinutesPercent(String fiveMinutesPercent) {
        Utils.checkNotNull(fiveMinutesPercent, "fiveMinutesPercent");
        this.fiveMinutesPercent = Optional.ofNullable(fiveMinutesPercent);
        return this;
    }

    public ModelsNewsquantified withFiveMinutesPercent(Optional<String> fiveMinutesPercent) {
        Utils.checkNotNull(fiveMinutesPercent, "fiveMinutesPercent");
        this.fiveMinutesPercent = fiveMinutesPercent;
        return this;
    }

    public ModelsNewsquantified withTenMinutesPercent(String tenMinutesPercent) {
        Utils.checkNotNull(tenMinutesPercent, "tenMinutesPercent");
        this.tenMinutesPercent = Optional.ofNullable(tenMinutesPercent);
        return this;
    }

    public ModelsNewsquantified withTenMinutesPercent(Optional<String> tenMinutesPercent) {
        Utils.checkNotNull(tenMinutesPercent, "tenMinutesPercent");
        this.tenMinutesPercent = tenMinutesPercent;
        return this;
    }

    public ModelsNewsquantified withThirtyMinutesPercent(String thirtyMinutesPercent) {
        Utils.checkNotNull(thirtyMinutesPercent, "thirtyMinutesPercent");
        this.thirtyMinutesPercent = Optional.ofNullable(thirtyMinutesPercent);
        return this;
    }

    public ModelsNewsquantified withThirtyMinutesPercent(Optional<String> thirtyMinutesPercent) {
        Utils.checkNotNull(thirtyMinutesPercent, "thirtyMinutesPercent");
        this.thirtyMinutesPercent = thirtyMinutesPercent;
        return this;
    }

    public ModelsNewsquantified withThirtySecondsPercent(String thirtySecondsPercent) {
        Utils.checkNotNull(thirtySecondsPercent, "thirtySecondsPercent");
        this.thirtySecondsPercent = Optional.ofNullable(thirtySecondsPercent);
        return this;
    }

    public ModelsNewsquantified withThirtySecondsPercent(Optional<String> thirtySecondsPercent) {
        Utils.checkNotNull(thirtySecondsPercent, "thirtySecondsPercent");
        this.thirtySecondsPercent = thirtySecondsPercent;
        return this;
    }

    public ModelsNewsquantified withSixtyMinutesPercent(String sixtyMinutesPercent) {
        Utils.checkNotNull(sixtyMinutesPercent, "sixtyMinutesPercent");
        this.sixtyMinutesPercent = Optional.ofNullable(sixtyMinutesPercent);
        return this;
    }

    public ModelsNewsquantified withSixtyMinutesPercent(Optional<String> sixtyMinutesPercent) {
        Utils.checkNotNull(sixtyMinutesPercent, "sixtyMinutesPercent");
        this.sixtyMinutesPercent = sixtyMinutesPercent;
        return this;
    }

    public ModelsNewsquantified withNinetyMinutesPercent(String ninetyMinutesPercent) {
        Utils.checkNotNull(ninetyMinutesPercent, "ninetyMinutesPercent");
        this.ninetyMinutesPercent = Optional.ofNullable(ninetyMinutesPercent);
        return this;
    }

    public ModelsNewsquantified withNinetyMinutesPercent(Optional<String> ninetyMinutesPercent) {
        Utils.checkNotNull(ninetyMinutesPercent, "ninetyMinutesPercent");
        this.ninetyMinutesPercent = ninetyMinutesPercent;
        return this;
    }

    public ModelsNewsquantified withOneHundredAndTwentyMinutesPercent(String oneHundredAndTwentyMinutesPercent) {
        Utils.checkNotNull(oneHundredAndTwentyMinutesPercent, "oneHundredAndTwentyMinutesPercent");
        this.oneHundredAndTwentyMinutesPercent = Optional.ofNullable(oneHundredAndTwentyMinutesPercent);
        return this;
    }

    public ModelsNewsquantified withOneHundredAndTwentyMinutesPercent(Optional<String> oneHundredAndTwentyMinutesPercent) {
        Utils.checkNotNull(oneHundredAndTwentyMinutesPercent, "oneHundredAndTwentyMinutesPercent");
        this.oneHundredAndTwentyMinutesPercent = oneHundredAndTwentyMinutesPercent;
        return this;
    }

    public ModelsNewsquantified withATRRatio(String atrRatio) {
        Utils.checkNotNull(atrRatio, "atrRatio");
        this.atrRatio = Optional.ofNullable(atrRatio);
        return this;
    }

    public ModelsNewsquantified withATRRatio(Optional<String> atrRatio) {
        Utils.checkNotNull(atrRatio, "atrRatio");
        this.atrRatio = atrRatio;
        return this;
    }

    public ModelsNewsquantified withAtr14(String atr14) {
        Utils.checkNotNull(atr14, "atr14");
        this.atr14 = Optional.ofNullable(atr14);
        return this;
    }

    public ModelsNewsquantified withAtr14(Optional<String> atr14) {
        Utils.checkNotNull(atr14, "atr14");
        this.atr14 = atr14;
        return this;
    }

    public ModelsNewsquantified withAllTicks(String allTicks) {
        Utils.checkNotNull(allTicks, "allTicks");
        this.allTicks = Optional.ofNullable(allTicks);
        return this;
    }

    public ModelsNewsquantified withAllTicks(Optional<String> allTicks) {
        Utils.checkNotNull(allTicks, "allTicks");
        this.allTicks = allTicks;
        return this;
    }

    public ModelsNewsquantified withAllVWAP(String allVWAP) {
        Utils.checkNotNull(allVWAP, "allVWAP");
        this.allVWAP = Optional.ofNullable(allVWAP);
        return this;
    }

    public ModelsNewsquantified withAllVWAP(Optional<String> allVWAP) {
        Utils.checkNotNull(allVWAP, "allVWAP");
        this.allVWAP = allVWAP;
        return this;
    }

    public ModelsNewsquantified withAnalystAction(String analystAction) {
        Utils.checkNotNull(analystAction, "analystAction");
        this.analystAction = Optional.ofNullable(analystAction);
        return this;
    }

    public ModelsNewsquantified withAnalystAction(Optional<String> analystAction) {
        Utils.checkNotNull(analystAction, "analystAction");
        this.analystAction = analystAction;
        return this;
    }

    public ModelsNewsquantified withAnalystActionFrom(String analystActionFrom) {
        Utils.checkNotNull(analystActionFrom, "analystActionFrom");
        this.analystActionFrom = Optional.ofNullable(analystActionFrom);
        return this;
    }

    public ModelsNewsquantified withAnalystActionFrom(Optional<String> analystActionFrom) {
        Utils.checkNotNull(analystActionFrom, "analystActionFrom");
        this.analystActionFrom = analystActionFrom;
        return this;
    }

    public ModelsNewsquantified withAnalystActionTo(String analystActionTo) {
        Utils.checkNotNull(analystActionTo, "analystActionTo");
        this.analystActionTo = Optional.ofNullable(analystActionTo);
        return this;
    }

    public ModelsNewsquantified withAnalystActionTo(Optional<String> analystActionTo) {
        Utils.checkNotNull(analystActionTo, "analystActionTo");
        this.analystActionTo = analystActionTo;
        return this;
    }

    public ModelsNewsquantified withAnalystFirm(String analystFirm) {
        Utils.checkNotNull(analystFirm, "analystFirm");
        this.analystFirm = Optional.ofNullable(analystFirm);
        return this;
    }

    public ModelsNewsquantified withAnalystFirm(Optional<String> analystFirm) {
        Utils.checkNotNull(analystFirm, "analystFirm");
        this.analystFirm = analystFirm;
        return this;
    }

    public ModelsNewsquantified withCloseVol(String closeVol) {
        Utils.checkNotNull(closeVol, "closeVol");
        this.closeVol = Optional.ofNullable(closeVol);
        return this;
    }

    public ModelsNewsquantified withCloseVol(Optional<String> closeVol) {
        Utils.checkNotNull(closeVol, "closeVol");
        this.closeVol = closeVol;
        return this;
    }

    public ModelsNewsquantified withComments(String comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = Optional.ofNullable(comments);
        return this;
    }

    public ModelsNewsquantified withComments(Optional<String> comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = comments;
        return this;
    }

    public ModelsNewsquantified withCurrVol(String currVol) {
        Utils.checkNotNull(currVol, "currVol");
        this.currVol = Optional.ofNullable(currVol);
        return this;
    }

    public ModelsNewsquantified withCurrVol(Optional<String> currVol) {
        Utils.checkNotNull(currVol, "currVol");
        this.currVol = currVol;
        return this;
    }

    public ModelsNewsquantified withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    public ModelsNewsquantified withDate(Optional<String> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public ModelsNewsquantified withDayOpen(String dayOpen) {
        Utils.checkNotNull(dayOpen, "dayOpen");
        this.dayOpen = Optional.ofNullable(dayOpen);
        return this;
    }

    public ModelsNewsquantified withDayOpen(Optional<String> dayOpen) {
        Utils.checkNotNull(dayOpen, "dayOpen");
        this.dayOpen = dayOpen;
        return this;
    }

    public ModelsNewsquantified withDividendYieldPercent(String dividendYieldPercent) {
        Utils.checkNotNull(dividendYieldPercent, "dividendYieldPercent");
        this.dividendYieldPercent = Optional.ofNullable(dividendYieldPercent);
        return this;
    }

    public ModelsNewsquantified withDividendYieldPercent(Optional<String> dividendYieldPercent) {
        Utils.checkNotNull(dividendYieldPercent, "dividendYieldPercent");
        this.dividendYieldPercent = dividendYieldPercent;
        return this;
    }

    public ModelsNewsquantified withEODClose(String eodClose) {
        Utils.checkNotNull(eodClose, "eodClose");
        this.eodClose = Optional.ofNullable(eodClose);
        return this;
    }

    public ModelsNewsquantified withEODClose(Optional<String> eodClose) {
        Utils.checkNotNull(eodClose, "eodClose");
        this.eodClose = eodClose;
        return this;
    }

    public ModelsNewsquantified withEODHigh(String eodHigh) {
        Utils.checkNotNull(eodHigh, "eodHigh");
        this.eodHigh = Optional.ofNullable(eodHigh);
        return this;
    }

    public ModelsNewsquantified withEODHigh(Optional<String> eodHigh) {
        Utils.checkNotNull(eodHigh, "eodHigh");
        this.eodHigh = eodHigh;
        return this;
    }

    public ModelsNewsquantified withEODLow(String eodLow) {
        Utils.checkNotNull(eodLow, "eodLow");
        this.eodLow = Optional.ofNullable(eodLow);
        return this;
    }

    public ModelsNewsquantified withEODLow(Optional<String> eodLow) {
        Utils.checkNotNull(eodLow, "eodLow");
        this.eodLow = eodLow;
        return this;
    }

    public ModelsNewsquantified withEodvwap(String eodvwap) {
        Utils.checkNotNull(eodvwap, "eodvwap");
        this.eodvwap = Optional.ofNullable(eodvwap);
        return this;
    }

    public ModelsNewsquantified withEodvwap(Optional<String> eodvwap) {
        Utils.checkNotNull(eodvwap, "eodvwap");
        this.eodvwap = eodvwap;
        return this;
    }

    public ModelsNewsquantified withEPSAction(String epsAction) {
        Utils.checkNotNull(epsAction, "epsAction");
        this.epsAction = Optional.ofNullable(epsAction);
        return this;
    }

    public ModelsNewsquantified withEPSAction(Optional<String> epsAction) {
        Utils.checkNotNull(epsAction, "epsAction");
        this.epsAction = epsAction;
        return this;
    }

    public ModelsNewsquantified withEPSActual(String epsActual) {
        Utils.checkNotNull(epsActual, "epsActual");
        this.epsActual = Optional.ofNullable(epsActual);
        return this;
    }

    public ModelsNewsquantified withEPSActual(Optional<String> epsActual) {
        Utils.checkNotNull(epsActual, "epsActual");
        this.epsActual = epsActual;
        return this;
    }

    public ModelsNewsquantified withEx(String ex) {
        Utils.checkNotNull(ex, "ex");
        this.ex = Optional.ofNullable(ex);
        return this;
    }

    public ModelsNewsquantified withEx(Optional<String> ex) {
        Utils.checkNotNull(ex, "ex");
        this.ex = ex;
        return this;
    }

    public ModelsNewsquantified withHeadlines(String headlines) {
        Utils.checkNotNull(headlines, "headlines");
        this.headlines = Optional.ofNullable(headlines);
        return this;
    }

    public ModelsNewsquantified withHeadlines(Optional<String> headlines) {
        Utils.checkNotNull(headlines, "headlines");
        this.headlines = headlines;
        return this;
    }

    public ModelsNewsquantified withHighExcStdDev(String highExcStdDev) {
        Utils.checkNotNull(highExcStdDev, "highExcStdDev");
        this.highExcStdDev = Optional.ofNullable(highExcStdDev);
        return this;
    }

    public ModelsNewsquantified withHighExcStdDev(Optional<String> highExcStdDev) {
        Utils.checkNotNull(highExcStdDev, "highExcStdDev");
        this.highExcStdDev = highExcStdDev;
        return this;
    }

    public ModelsNewsquantified withL1(String l1) {
        Utils.checkNotNull(l1, "l1");
        this.l1 = Optional.ofNullable(l1);
        return this;
    }

    public ModelsNewsquantified withL1(Optional<String> l1) {
        Utils.checkNotNull(l1, "l1");
        this.l1 = l1;
        return this;
    }

    public ModelsNewsquantified withL2(String l2) {
        Utils.checkNotNull(l2, "l2");
        this.l2 = Optional.ofNullable(l2);
        return this;
    }

    public ModelsNewsquantified withL2(Optional<String> l2) {
        Utils.checkNotNull(l2, "l2");
        this.l2 = l2;
        return this;
    }

    public ModelsNewsquantified withL3(String l3) {
        Utils.checkNotNull(l3, "l3");
        this.l3 = Optional.ofNullable(l3);
        return this;
    }

    public ModelsNewsquantified withL3(Optional<String> l3) {
        Utils.checkNotNull(l3, "l3");
        this.l3 = l3;
        return this;
    }

    public ModelsNewsquantified withL4(String l4) {
        Utils.checkNotNull(l4, "l4");
        this.l4 = Optional.ofNullable(l4);
        return this;
    }

    public ModelsNewsquantified withL4(Optional<String> l4) {
        Utils.checkNotNull(l4, "l4");
        this.l4 = l4;
        return this;
    }

    public ModelsNewsquantified withL5(String l5) {
        Utils.checkNotNull(l5, "l5");
        this.l5 = Optional.ofNullable(l5);
        return this;
    }

    public ModelsNewsquantified withL5(Optional<String> l5) {
        Utils.checkNotNull(l5, "l5");
        this.l5 = l5;
        return this;
    }

    public ModelsNewsquantified withL10(String l10) {
        Utils.checkNotNull(l10, "l10");
        this.l10 = Optional.ofNullable(l10);
        return this;
    }

    public ModelsNewsquantified withL10(Optional<String> l10) {
        Utils.checkNotNull(l10, "l10");
        this.l10 = l10;
        return this;
    }

    public ModelsNewsquantified withL20(String l20) {
        Utils.checkNotNull(l20, "l20");
        this.l20 = Optional.ofNullable(l20);
        return this;
    }

    public ModelsNewsquantified withL20(Optional<String> l20) {
        Utils.checkNotNull(l20, "l20");
        this.l20 = l20;
        return this;
    }

    public ModelsNewsquantified withL75(String l75) {
        Utils.checkNotNull(l75, "l75");
        this.l75 = Optional.ofNullable(l75);
        return this;
    }

    public ModelsNewsquantified withL75(Optional<String> l75) {
        Utils.checkNotNull(l75, "l75");
        this.l75 = l75;
        return this;
    }

    public ModelsNewsquantified withLs(String ls) {
        Utils.checkNotNull(ls, "ls");
        this.ls = Optional.ofNullable(ls);
        return this;
    }

    public ModelsNewsquantified withLs(Optional<String> ls) {
        Utils.checkNotNull(ls, "ls");
        this.ls = ls;
        return this;
    }

    public ModelsNewsquantified withLowExcStdDev(String lowExcStdDev) {
        Utils.checkNotNull(lowExcStdDev, "lowExcStdDev");
        this.lowExcStdDev = Optional.ofNullable(lowExcStdDev);
        return this;
    }

    public ModelsNewsquantified withLowExcStdDev(Optional<String> lowExcStdDev) {
        Utils.checkNotNull(lowExcStdDev, "lowExcStdDev");
        this.lowExcStdDev = lowExcStdDev;
        return this;
    }

    public ModelsNewsquantified withMainVWAP(String mainVWAP) {
        Utils.checkNotNull(mainVWAP, "mainVWAP");
        this.mainVWAP = Optional.ofNullable(mainVWAP);
        return this;
    }

    public ModelsNewsquantified withMainVWAP(Optional<String> mainVWAP) {
        Utils.checkNotNull(mainVWAP, "mainVWAP");
        this.mainVWAP = mainVWAP;
        return this;
    }

    public ModelsNewsquantified withMaxDnAmt(String maxDnAmt) {
        Utils.checkNotNull(maxDnAmt, "maxDnAmt");
        this.maxDnAmt = Optional.ofNullable(maxDnAmt);
        return this;
    }

    public ModelsNewsquantified withMaxDnAmt(Optional<String> maxDnAmt) {
        Utils.checkNotNull(maxDnAmt, "maxDnAmt");
        this.maxDnAmt = maxDnAmt;
        return this;
    }

    public ModelsNewsquantified withMaxUpAmt(String maxUpAmt) {
        Utils.checkNotNull(maxUpAmt, "maxUpAmt");
        this.maxUpAmt = Optional.ofNullable(maxUpAmt);
        return this;
    }

    public ModelsNewsquantified withMaxUpAmt(Optional<String> maxUpAmt) {
        Utils.checkNotNull(maxUpAmt, "maxUpAmt");
        this.maxUpAmt = maxUpAmt;
        return this;
    }

    public ModelsNewsquantified withMktCap1000(String mktCap1000) {
        Utils.checkNotNull(mktCap1000, "mktCap1000");
        this.mktCap1000 = Optional.ofNullable(mktCap1000);
        return this;
    }

    public ModelsNewsquantified withMktCap1000(Optional<String> mktCap1000) {
        Utils.checkNotNull(mktCap1000, "mktCap1000");
        this.mktCap1000 = mktCap1000;
        return this;
    }

    public ModelsNewsquantified withMovVol(String movVol) {
        Utils.checkNotNull(movVol, "movVol");
        this.movVol = Optional.ofNullable(movVol);
        return this;
    }

    public ModelsNewsquantified withMovVol(Optional<String> movVol) {
        Utils.checkNotNull(movVol, "movVol");
        this.movVol = movVol;
        return this;
    }

    public ModelsNewsquantified withNewsSess(String newsSess) {
        Utils.checkNotNull(newsSess, "newsSess");
        this.newsSess = Optional.ofNullable(newsSess);
        return this;
    }

    public ModelsNewsquantified withNewsSess(Optional<String> newsSess) {
        Utils.checkNotNull(newsSess, "newsSess");
        this.newsSess = newsSess;
        return this;
    }

    public ModelsNewsquantified withOpenVol(String openVol) {
        Utils.checkNotNull(openVol, "openVol");
        this.openVol = Optional.ofNullable(openVol);
        return this;
    }

    public ModelsNewsquantified withOpenVol(Optional<String> openVol) {
        Utils.checkNotNull(openVol, "openVol");
        this.openVol = openVol;
        return this;
    }

    public ModelsNewsquantified withOpenGapPercent(String openGapPercent) {
        Utils.checkNotNull(openGapPercent, "openGapPercent");
        this.openGapPercent = Optional.ofNullable(openGapPercent);
        return this;
    }

    public ModelsNewsquantified withOpenGapPercent(Optional<String> openGapPercent) {
        Utils.checkNotNull(openGapPercent, "openGapPercent");
        this.openGapPercent = openGapPercent;
        return this;
    }

    public ModelsNewsquantified withP1(String p1) {
        Utils.checkNotNull(p1, "p1");
        this.p1 = Optional.ofNullable(p1);
        return this;
    }

    public ModelsNewsquantified withP1(Optional<String> p1) {
        Utils.checkNotNull(p1, "p1");
        this.p1 = p1;
        return this;
    }

    public ModelsNewsquantified withP2(String p2) {
        Utils.checkNotNull(p2, "p2");
        this.p2 = Optional.ofNullable(p2);
        return this;
    }

    public ModelsNewsquantified withP2(Optional<String> p2) {
        Utils.checkNotNull(p2, "p2");
        this.p2 = p2;
        return this;
    }

    public ModelsNewsquantified withP3(String p3) {
        Utils.checkNotNull(p3, "p3");
        this.p3 = Optional.ofNullable(p3);
        return this;
    }

    public ModelsNewsquantified withP3(Optional<String> p3) {
        Utils.checkNotNull(p3, "p3");
        this.p3 = p3;
        return this;
    }

    public ModelsNewsquantified withP4(String p4) {
        Utils.checkNotNull(p4, "p4");
        this.p4 = Optional.ofNullable(p4);
        return this;
    }

    public ModelsNewsquantified withP4(Optional<String> p4) {
        Utils.checkNotNull(p4, "p4");
        this.p4 = p4;
        return this;
    }

    public ModelsNewsquantified withP5(String p5) {
        Utils.checkNotNull(p5, "p5");
        this.p5 = Optional.ofNullable(p5);
        return this;
    }

    public ModelsNewsquantified withP5(Optional<String> p5) {
        Utils.checkNotNull(p5, "p5");
        this.p5 = p5;
        return this;
    }

    public ModelsNewsquantified withP10(String p10) {
        Utils.checkNotNull(p10, "p10");
        this.p10 = Optional.ofNullable(p10);
        return this;
    }

    public ModelsNewsquantified withP10(Optional<String> p10) {
        Utils.checkNotNull(p10, "p10");
        this.p10 = p10;
        return this;
    }

    public ModelsNewsquantified withP20(String p20) {
        Utils.checkNotNull(p20, "p20");
        this.p20 = Optional.ofNullable(p20);
        return this;
    }

    public ModelsNewsquantified withP20(Optional<String> p20) {
        Utils.checkNotNull(p20, "p20");
        this.p20 = p20;
        return this;
    }

    public ModelsNewsquantified withP75(String p75) {
        Utils.checkNotNull(p75, "p75");
        this.p75 = Optional.ofNullable(p75);
        return this;
    }

    public ModelsNewsquantified withP75(Optional<String> p75) {
        Utils.checkNotNull(p75, "p75");
        this.p75 = p75;
        return this;
    }

    public ModelsNewsquantified withPERatio(String peRatio) {
        Utils.checkNotNull(peRatio, "peRatio");
        this.peRatio = Optional.ofNullable(peRatio);
        return this;
    }

    public ModelsNewsquantified withPERatio(Optional<String> peRatio) {
        Utils.checkNotNull(peRatio, "peRatio");
        this.peRatio = peRatio;
        return this;
    }

    public ModelsNewsquantified withPid(String pid) {
        Utils.checkNotNull(pid, "pid");
        this.pid = Optional.ofNullable(pid);
        return this;
    }

    public ModelsNewsquantified withPid(Optional<String> pid) {
        Utils.checkNotNull(pid, "pid");
        this.pid = pid;
        return this;
    }

    public ModelsNewsquantified withPUBt(String puBt) {
        Utils.checkNotNull(puBt, "puBt");
        this.puBt = Optional.ofNullable(puBt);
        return this;
    }

    public ModelsNewsquantified withPUBt(Optional<String> puBt) {
        Utils.checkNotNull(puBt, "puBt");
        this.puBt = puBt;
        return this;
    }

    public ModelsNewsquantified withPostVWAP(String postVWAP) {
        Utils.checkNotNull(postVWAP, "postVWAP");
        this.postVWAP = Optional.ofNullable(postVWAP);
        return this;
    }

    public ModelsNewsquantified withPostVWAP(Optional<String> postVWAP) {
        Utils.checkNotNull(postVWAP, "postVWAP");
        this.postVWAP = postVWAP;
        return this;
    }

    public ModelsNewsquantified withPreVWAP(String preVWAP) {
        Utils.checkNotNull(preVWAP, "preVWAP");
        this.preVWAP = Optional.ofNullable(preVWAP);
        return this;
    }

    public ModelsNewsquantified withPreVWAP(Optional<String> preVWAP) {
        Utils.checkNotNull(preVWAP, "preVWAP");
        this.preVWAP = preVWAP;
        return this;
    }

    public ModelsNewsquantified withPrevVol(String prevVol) {
        Utils.checkNotNull(prevVol, "prevVol");
        this.prevVol = Optional.ofNullable(prevVol);
        return this;
    }

    public ModelsNewsquantified withPrevVol(Optional<String> prevVol) {
        Utils.checkNotNull(prevVol, "prevVol");
        this.prevVol = prevVol;
        return this;
    }

    public ModelsNewsquantified withPrevClose(String prevClose) {
        Utils.checkNotNull(prevClose, "prevClose");
        this.prevClose = Optional.ofNullable(prevClose);
        return this;
    }

    public ModelsNewsquantified withPrevClose(Optional<String> prevClose) {
        Utils.checkNotNull(prevClose, "prevClose");
        this.prevClose = prevClose;
        return this;
    }

    public ModelsNewsquantified withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = Optional.ofNullable(provider);
        return this;
    }

    public ModelsNewsquantified withProvider(Optional<String> provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public ModelsNewsquantified withRECt(String reCt) {
        Utils.checkNotNull(reCt, "reCt");
        this.reCt = Optional.ofNullable(reCt);
        return this;
    }

    public ModelsNewsquantified withRECt(Optional<String> reCt) {
        Utils.checkNotNull(reCt, "reCt");
        this.reCt = reCt;
        return this;
    }

    public ModelsNewsquantified withRangePercent(String rangePercent) {
        Utils.checkNotNull(rangePercent, "rangePercent");
        this.rangePercent = Optional.ofNullable(rangePercent);
        return this;
    }

    public ModelsNewsquantified withRangePercent(Optional<String> rangePercent) {
        Utils.checkNotNull(rangePercent, "rangePercent");
        this.rangePercent = rangePercent;
        return this;
    }

    public ModelsNewsquantified withRangeAmt(String rangeAmt) {
        Utils.checkNotNull(rangeAmt, "rangeAmt");
        this.rangeAmt = Optional.ofNullable(rangeAmt);
        return this;
    }

    public ModelsNewsquantified withRangeAmt(Optional<String> rangeAmt) {
        Utils.checkNotNull(rangeAmt, "rangeAmt");
        this.rangeAmt = rangeAmt;
        return this;
    }

    public ModelsNewsquantified withRangeStdDev(String rangeStdDev) {
        Utils.checkNotNull(rangeStdDev, "rangeStdDev");
        this.rangeStdDev = Optional.ofNullable(rangeStdDev);
        return this;
    }

    public ModelsNewsquantified withRangeStdDev(Optional<String> rangeStdDev) {
        Utils.checkNotNull(rangeStdDev, "rangeStdDev");
        this.rangeStdDev = rangeStdDev;
        return this;
    }

    public ModelsNewsquantified withReportSess(String reportSess) {
        Utils.checkNotNull(reportSess, "reportSess");
        this.reportSess = Optional.ofNullable(reportSess);
        return this;
    }

    public ModelsNewsquantified withReportSess(Optional<String> reportSess) {
        Utils.checkNotNull(reportSess, "reportSess");
        this.reportSess = reportSess;
        return this;
    }

    public ModelsNewsquantified withResourceID(String resourceID) {
        Utils.checkNotNull(resourceID, "resourceID");
        this.resourceID = Optional.ofNullable(resourceID);
        return this;
    }

    public ModelsNewsquantified withResourceID(Optional<String> resourceID) {
        Utils.checkNotNull(resourceID, "resourceID");
        this.resourceID = resourceID;
        return this;
    }

    public ModelsNewsquantified withResultPercent(String resultPercent) {
        Utils.checkNotNull(resultPercent, "resultPercent");
        this.resultPercent = Optional.ofNullable(resultPercent);
        return this;
    }

    public ModelsNewsquantified withResultPercent(Optional<String> resultPercent) {
        Utils.checkNotNull(resultPercent, "resultPercent");
        this.resultPercent = resultPercent;
        return this;
    }

    public ModelsNewsquantified withResultVsIndexPercent(String resultVsIndexPercent) {
        Utils.checkNotNull(resultVsIndexPercent, "resultVsIndexPercent");
        this.resultVsIndexPercent = Optional.ofNullable(resultVsIndexPercent);
        return this;
    }

    public ModelsNewsquantified withResultVsIndexPercent(Optional<String> resultVsIndexPercent) {
        Utils.checkNotNull(resultVsIndexPercent, "resultVsIndexPercent");
        this.resultVsIndexPercent = resultVsIndexPercent;
        return this;
    }

    public ModelsNewsquantified withS1(String s1) {
        Utils.checkNotNull(s1, "s1");
        this.s1 = Optional.ofNullable(s1);
        return this;
    }

    public ModelsNewsquantified withS1(Optional<String> s1) {
        Utils.checkNotNull(s1, "s1");
        this.s1 = s1;
        return this;
    }

    public ModelsNewsquantified withS2(String s2) {
        Utils.checkNotNull(s2, "s2");
        this.s2 = Optional.ofNullable(s2);
        return this;
    }

    public ModelsNewsquantified withS2(Optional<String> s2) {
        Utils.checkNotNull(s2, "s2");
        this.s2 = s2;
        return this;
    }

    public ModelsNewsquantified withS3(String s3) {
        Utils.checkNotNull(s3, "s3");
        this.s3 = Optional.ofNullable(s3);
        return this;
    }

    public ModelsNewsquantified withS3(Optional<String> s3) {
        Utils.checkNotNull(s3, "s3");
        this.s3 = s3;
        return this;
    }

    public ModelsNewsquantified withS4(String s4) {
        Utils.checkNotNull(s4, "s4");
        this.s4 = Optional.ofNullable(s4);
        return this;
    }

    public ModelsNewsquantified withS4(Optional<String> s4) {
        Utils.checkNotNull(s4, "s4");
        this.s4 = s4;
        return this;
    }

    public ModelsNewsquantified withS5(String s5) {
        Utils.checkNotNull(s5, "s5");
        this.s5 = Optional.ofNullable(s5);
        return this;
    }

    public ModelsNewsquantified withS5(Optional<String> s5) {
        Utils.checkNotNull(s5, "s5");
        this.s5 = s5;
        return this;
    }

    public ModelsNewsquantified withS10(String s10) {
        Utils.checkNotNull(s10, "s10");
        this.s10 = Optional.ofNullable(s10);
        return this;
    }

    public ModelsNewsquantified withS10(Optional<String> s10) {
        Utils.checkNotNull(s10, "s10");
        this.s10 = s10;
        return this;
    }

    public ModelsNewsquantified withS20(String s20) {
        Utils.checkNotNull(s20, "s20");
        this.s20 = Optional.ofNullable(s20);
        return this;
    }

    public ModelsNewsquantified withS20(Optional<String> s20) {
        Utils.checkNotNull(s20, "s20");
        this.s20 = s20;
        return this;
    }

    public ModelsNewsquantified withS75(String s75) {
        Utils.checkNotNull(s75, "s75");
        this.s75 = Optional.ofNullable(s75);
        return this;
    }

    public ModelsNewsquantified withS75(Optional<String> s75) {
        Utils.checkNotNull(s75, "s75");
        this.s75 = s75;
        return this;
    }

    public ModelsNewsquantified withSPYLast(String spyLast) {
        Utils.checkNotNull(spyLast, "spyLast");
        this.spyLast = Optional.ofNullable(spyLast);
        return this;
    }

    public ModelsNewsquantified withSPYLast(Optional<String> spyLast) {
        Utils.checkNotNull(spyLast, "spyLast");
        this.spyLast = spyLast;
        return this;
    }

    public ModelsNewsquantified withSPYclose(String spYclose) {
        Utils.checkNotNull(spYclose, "spYclose");
        this.spYclose = Optional.ofNullable(spYclose);
        return this;
    }

    public ModelsNewsquantified withSPYclose(Optional<String> spYclose) {
        Utils.checkNotNull(spYclose, "spYclose");
        this.spYclose = spYclose;
        return this;
    }

    public ModelsNewsquantified withShortInterestPercent(String shortInterestPercent) {
        Utils.checkNotNull(shortInterestPercent, "shortInterestPercent");
        this.shortInterestPercent = Optional.ofNullable(shortInterestPercent);
        return this;
    }

    public ModelsNewsquantified withShortInterestPercent(Optional<String> shortInterestPercent) {
        Utils.checkNotNull(shortInterestPercent, "shortInterestPercent");
        this.shortInterestPercent = shortInterestPercent;
        return this;
    }

    public ModelsNewsquantified withSymb(String symb) {
        Utils.checkNotNull(symb, "symb");
        this.symb = Optional.ofNullable(symb);
        return this;
    }

    public ModelsNewsquantified withSymb(Optional<String> symb) {
        Utils.checkNotNull(symb, "symb");
        this.symb = symb;
        return this;
    }

    public ModelsNewsquantified withTONHigh(String tonHigh) {
        Utils.checkNotNull(tonHigh, "tonHigh");
        this.tonHigh = Optional.ofNullable(tonHigh);
        return this;
    }

    public ModelsNewsquantified withTONHigh(Optional<String> tonHigh) {
        Utils.checkNotNull(tonHigh, "tonHigh");
        this.tonHigh = tonHigh;
        return this;
    }

    public ModelsNewsquantified withTONLast(String tonLast) {
        Utils.checkNotNull(tonLast, "tonLast");
        this.tonLast = Optional.ofNullable(tonLast);
        return this;
    }

    public ModelsNewsquantified withTONLast(Optional<String> tonLast) {
        Utils.checkNotNull(tonLast, "tonLast");
        this.tonLast = tonLast;
        return this;
    }

    public ModelsNewsquantified withTONLow(String tonLow) {
        Utils.checkNotNull(tonLow, "tonLow");
        this.tonLow = Optional.ofNullable(tonLow);
        return this;
    }

    public ModelsNewsquantified withTONLow(Optional<String> tonLow) {
        Utils.checkNotNull(tonLow, "tonLow");
        this.tonLow = tonLow;
        return this;
    }

    public ModelsNewsquantified withTopics(String topics) {
        Utils.checkNotNull(topics, "topics");
        this.topics = Optional.ofNullable(topics);
        return this;
    }

    public ModelsNewsquantified withTopics(Optional<String> topics) {
        Utils.checkNotNull(topics, "topics");
        this.topics = topics;
        return this;
    }

    public ModelsNewsquantified withVolRatio(String volRatio) {
        Utils.checkNotNull(volRatio, "volRatio");
        this.volRatio = Optional.ofNullable(volRatio);
        return this;
    }

    public ModelsNewsquantified withVolRatio(Optional<String> volRatio) {
        Utils.checkNotNull(volRatio, "volRatio");
        this.volRatio = volRatio;
        return this;
    }

    public ModelsNewsquantified withVolumeStdDev(String volumeStdDev) {
        Utils.checkNotNull(volumeStdDev, "volumeStdDev");
        this.volumeStdDev = Optional.ofNullable(volumeStdDev);
        return this;
    }

    public ModelsNewsquantified withVolumeStdDev(Optional<String> volumeStdDev) {
        Utils.checkNotNull(volumeStdDev, "volumeStdDev");
        this.volumeStdDev = volumeStdDev;
        return this;
    }

    public ModelsNewsquantified withCreated(long created) {
        Utils.checkNotNull(created, "created");
        this.created = Optional.ofNullable(created);
        return this;
    }

    public ModelsNewsquantified withCreated(Optional<Long> created) {
        Utils.checkNotNull(created, "created");
        this.created = created;
        return this;
    }

    public ModelsNewsquantified withMaxDownPercent(String maxDownPercent) {
        Utils.checkNotNull(maxDownPercent, "maxDownPercent");
        this.maxDownPercent = Optional.ofNullable(maxDownPercent);
        return this;
    }

    public ModelsNewsquantified withMaxDownPercent(Optional<String> maxDownPercent) {
        Utils.checkNotNull(maxDownPercent, "maxDownPercent");
        this.maxDownPercent = maxDownPercent;
        return this;
    }

    public ModelsNewsquantified withMaxUpPercent(String maxUpPercent) {
        Utils.checkNotNull(maxUpPercent, "maxUpPercent");
        this.maxUpPercent = Optional.ofNullable(maxUpPercent);
        return this;
    }

    public ModelsNewsquantified withMaxUpPercent(Optional<String> maxUpPercent) {
        Utils.checkNotNull(maxUpPercent, "maxUpPercent");
        this.maxUpPercent = maxUpPercent;
        return this;
    }

    public ModelsNewsquantified withPrevDayPercent(String prevDayPercent) {
        Utils.checkNotNull(prevDayPercent, "prevDayPercent");
        this.prevDayPercent = Optional.ofNullable(prevDayPercent);
        return this;
    }

    public ModelsNewsquantified withPrevDayPercent(Optional<String> prevDayPercent) {
        Utils.checkNotNull(prevDayPercent, "prevDayPercent");
        this.prevDayPercent = prevDayPercent;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelsNewsquantified other = (ModelsNewsquantified) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.oneMinutePercent, other.oneMinutePercent) &&
            Objects.deepEquals(this.fiveMinutesPercent, other.fiveMinutesPercent) &&
            Objects.deepEquals(this.tenMinutesPercent, other.tenMinutesPercent) &&
            Objects.deepEquals(this.thirtyMinutesPercent, other.thirtyMinutesPercent) &&
            Objects.deepEquals(this.thirtySecondsPercent, other.thirtySecondsPercent) &&
            Objects.deepEquals(this.sixtyMinutesPercent, other.sixtyMinutesPercent) &&
            Objects.deepEquals(this.ninetyMinutesPercent, other.ninetyMinutesPercent) &&
            Objects.deepEquals(this.oneHundredAndTwentyMinutesPercent, other.oneHundredAndTwentyMinutesPercent) &&
            Objects.deepEquals(this.atrRatio, other.atrRatio) &&
            Objects.deepEquals(this.atr14, other.atr14) &&
            Objects.deepEquals(this.allTicks, other.allTicks) &&
            Objects.deepEquals(this.allVWAP, other.allVWAP) &&
            Objects.deepEquals(this.analystAction, other.analystAction) &&
            Objects.deepEquals(this.analystActionFrom, other.analystActionFrom) &&
            Objects.deepEquals(this.analystActionTo, other.analystActionTo) &&
            Objects.deepEquals(this.analystFirm, other.analystFirm) &&
            Objects.deepEquals(this.closeVol, other.closeVol) &&
            Objects.deepEquals(this.comments, other.comments) &&
            Objects.deepEquals(this.currVol, other.currVol) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.dayOpen, other.dayOpen) &&
            Objects.deepEquals(this.dividendYieldPercent, other.dividendYieldPercent) &&
            Objects.deepEquals(this.eodClose, other.eodClose) &&
            Objects.deepEquals(this.eodHigh, other.eodHigh) &&
            Objects.deepEquals(this.eodLow, other.eodLow) &&
            Objects.deepEquals(this.eodvwap, other.eodvwap) &&
            Objects.deepEquals(this.epsAction, other.epsAction) &&
            Objects.deepEquals(this.epsActual, other.epsActual) &&
            Objects.deepEquals(this.ex, other.ex) &&
            Objects.deepEquals(this.headlines, other.headlines) &&
            Objects.deepEquals(this.highExcStdDev, other.highExcStdDev) &&
            Objects.deepEquals(this.l1, other.l1) &&
            Objects.deepEquals(this.l2, other.l2) &&
            Objects.deepEquals(this.l3, other.l3) &&
            Objects.deepEquals(this.l4, other.l4) &&
            Objects.deepEquals(this.l5, other.l5) &&
            Objects.deepEquals(this.l10, other.l10) &&
            Objects.deepEquals(this.l20, other.l20) &&
            Objects.deepEquals(this.l75, other.l75) &&
            Objects.deepEquals(this.ls, other.ls) &&
            Objects.deepEquals(this.lowExcStdDev, other.lowExcStdDev) &&
            Objects.deepEquals(this.mainVWAP, other.mainVWAP) &&
            Objects.deepEquals(this.maxDnAmt, other.maxDnAmt) &&
            Objects.deepEquals(this.maxUpAmt, other.maxUpAmt) &&
            Objects.deepEquals(this.mktCap1000, other.mktCap1000) &&
            Objects.deepEquals(this.movVol, other.movVol) &&
            Objects.deepEquals(this.newsSess, other.newsSess) &&
            Objects.deepEquals(this.openVol, other.openVol) &&
            Objects.deepEquals(this.openGapPercent, other.openGapPercent) &&
            Objects.deepEquals(this.p1, other.p1) &&
            Objects.deepEquals(this.p2, other.p2) &&
            Objects.deepEquals(this.p3, other.p3) &&
            Objects.deepEquals(this.p4, other.p4) &&
            Objects.deepEquals(this.p5, other.p5) &&
            Objects.deepEquals(this.p10, other.p10) &&
            Objects.deepEquals(this.p20, other.p20) &&
            Objects.deepEquals(this.p75, other.p75) &&
            Objects.deepEquals(this.peRatio, other.peRatio) &&
            Objects.deepEquals(this.pid, other.pid) &&
            Objects.deepEquals(this.puBt, other.puBt) &&
            Objects.deepEquals(this.postVWAP, other.postVWAP) &&
            Objects.deepEquals(this.preVWAP, other.preVWAP) &&
            Objects.deepEquals(this.prevVol, other.prevVol) &&
            Objects.deepEquals(this.prevClose, other.prevClose) &&
            Objects.deepEquals(this.provider, other.provider) &&
            Objects.deepEquals(this.reCt, other.reCt) &&
            Objects.deepEquals(this.rangePercent, other.rangePercent) &&
            Objects.deepEquals(this.rangeAmt, other.rangeAmt) &&
            Objects.deepEquals(this.rangeStdDev, other.rangeStdDev) &&
            Objects.deepEquals(this.reportSess, other.reportSess) &&
            Objects.deepEquals(this.resourceID, other.resourceID) &&
            Objects.deepEquals(this.resultPercent, other.resultPercent) &&
            Objects.deepEquals(this.resultVsIndexPercent, other.resultVsIndexPercent) &&
            Objects.deepEquals(this.s1, other.s1) &&
            Objects.deepEquals(this.s2, other.s2) &&
            Objects.deepEquals(this.s3, other.s3) &&
            Objects.deepEquals(this.s4, other.s4) &&
            Objects.deepEquals(this.s5, other.s5) &&
            Objects.deepEquals(this.s10, other.s10) &&
            Objects.deepEquals(this.s20, other.s20) &&
            Objects.deepEquals(this.s75, other.s75) &&
            Objects.deepEquals(this.spyLast, other.spyLast) &&
            Objects.deepEquals(this.spYclose, other.spYclose) &&
            Objects.deepEquals(this.shortInterestPercent, other.shortInterestPercent) &&
            Objects.deepEquals(this.symb, other.symb) &&
            Objects.deepEquals(this.tonHigh, other.tonHigh) &&
            Objects.deepEquals(this.tonLast, other.tonLast) &&
            Objects.deepEquals(this.tonLow, other.tonLow) &&
            Objects.deepEquals(this.topics, other.topics) &&
            Objects.deepEquals(this.volRatio, other.volRatio) &&
            Objects.deepEquals(this.volumeStdDev, other.volumeStdDev) &&
            Objects.deepEquals(this.created, other.created) &&
            Objects.deepEquals(this.maxDownPercent, other.maxDownPercent) &&
            Objects.deepEquals(this.maxUpPercent, other.maxUpPercent) &&
            Objects.deepEquals(this.prevDayPercent, other.prevDayPercent);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            oneMinutePercent,
            fiveMinutesPercent,
            tenMinutesPercent,
            thirtyMinutesPercent,
            thirtySecondsPercent,
            sixtyMinutesPercent,
            ninetyMinutesPercent,
            oneHundredAndTwentyMinutesPercent,
            atrRatio,
            atr14,
            allTicks,
            allVWAP,
            analystAction,
            analystActionFrom,
            analystActionTo,
            analystFirm,
            closeVol,
            comments,
            currVol,
            date,
            dayOpen,
            dividendYieldPercent,
            eodClose,
            eodHigh,
            eodLow,
            eodvwap,
            epsAction,
            epsActual,
            ex,
            headlines,
            highExcStdDev,
            l1,
            l2,
            l3,
            l4,
            l5,
            l10,
            l20,
            l75,
            ls,
            lowExcStdDev,
            mainVWAP,
            maxDnAmt,
            maxUpAmt,
            mktCap1000,
            movVol,
            newsSess,
            openVol,
            openGapPercent,
            p1,
            p2,
            p3,
            p4,
            p5,
            p10,
            p20,
            p75,
            peRatio,
            pid,
            puBt,
            postVWAP,
            preVWAP,
            prevVol,
            prevClose,
            provider,
            reCt,
            rangePercent,
            rangeAmt,
            rangeStdDev,
            reportSess,
            resourceID,
            resultPercent,
            resultVsIndexPercent,
            s1,
            s2,
            s3,
            s4,
            s5,
            s10,
            s20,
            s75,
            spyLast,
            spYclose,
            shortInterestPercent,
            symb,
            tonHigh,
            tonLast,
            tonLow,
            topics,
            volRatio,
            volumeStdDev,
            created,
            maxDownPercent,
            maxUpPercent,
            prevDayPercent);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModelsNewsquantified.class,
                "id", id,
                "oneMinutePercent", oneMinutePercent,
                "fiveMinutesPercent", fiveMinutesPercent,
                "tenMinutesPercent", tenMinutesPercent,
                "thirtyMinutesPercent", thirtyMinutesPercent,
                "thirtySecondsPercent", thirtySecondsPercent,
                "sixtyMinutesPercent", sixtyMinutesPercent,
                "ninetyMinutesPercent", ninetyMinutesPercent,
                "oneHundredAndTwentyMinutesPercent", oneHundredAndTwentyMinutesPercent,
                "atrRatio", atrRatio,
                "atr14", atr14,
                "allTicks", allTicks,
                "allVWAP", allVWAP,
                "analystAction", analystAction,
                "analystActionFrom", analystActionFrom,
                "analystActionTo", analystActionTo,
                "analystFirm", analystFirm,
                "closeVol", closeVol,
                "comments", comments,
                "currVol", currVol,
                "date", date,
                "dayOpen", dayOpen,
                "dividendYieldPercent", dividendYieldPercent,
                "eodClose", eodClose,
                "eodHigh", eodHigh,
                "eodLow", eodLow,
                "eodvwap", eodvwap,
                "epsAction", epsAction,
                "epsActual", epsActual,
                "ex", ex,
                "headlines", headlines,
                "highExcStdDev", highExcStdDev,
                "l1", l1,
                "l2", l2,
                "l3", l3,
                "l4", l4,
                "l5", l5,
                "l10", l10,
                "l20", l20,
                "l75", l75,
                "ls", ls,
                "lowExcStdDev", lowExcStdDev,
                "mainVWAP", mainVWAP,
                "maxDnAmt", maxDnAmt,
                "maxUpAmt", maxUpAmt,
                "mktCap1000", mktCap1000,
                "movVol", movVol,
                "newsSess", newsSess,
                "openVol", openVol,
                "openGapPercent", openGapPercent,
                "p1", p1,
                "p2", p2,
                "p3", p3,
                "p4", p4,
                "p5", p5,
                "p10", p10,
                "p20", p20,
                "p75", p75,
                "peRatio", peRatio,
                "pid", pid,
                "puBt", puBt,
                "postVWAP", postVWAP,
                "preVWAP", preVWAP,
                "prevVol", prevVol,
                "prevClose", prevClose,
                "provider", provider,
                "reCt", reCt,
                "rangePercent", rangePercent,
                "rangeAmt", rangeAmt,
                "rangeStdDev", rangeStdDev,
                "reportSess", reportSess,
                "resourceID", resourceID,
                "resultPercent", resultPercent,
                "resultVsIndexPercent", resultVsIndexPercent,
                "s1", s1,
                "s2", s2,
                "s3", s3,
                "s4", s4,
                "s5", s5,
                "s10", s10,
                "s20", s20,
                "s75", s75,
                "spyLast", spyLast,
                "spYclose", spYclose,
                "shortInterestPercent", shortInterestPercent,
                "symb", symb,
                "tonHigh", tonHigh,
                "tonLast", tonLast,
                "tonLow", tonLow,
                "topics", topics,
                "volRatio", volRatio,
                "volumeStdDev", volumeStdDev,
                "created", created,
                "maxDownPercent", maxDownPercent,
                "maxUpPercent", maxUpPercent,
                "prevDayPercent", prevDayPercent);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> oneMinutePercent = Optional.empty();
 
        private Optional<String> fiveMinutesPercent = Optional.empty();
 
        private Optional<String> tenMinutesPercent = Optional.empty();
 
        private Optional<String> thirtyMinutesPercent = Optional.empty();
 
        private Optional<String> thirtySecondsPercent = Optional.empty();
 
        private Optional<String> sixtyMinutesPercent = Optional.empty();
 
        private Optional<String> ninetyMinutesPercent = Optional.empty();
 
        private Optional<String> oneHundredAndTwentyMinutesPercent = Optional.empty();
 
        private Optional<String> atrRatio = Optional.empty();
 
        private Optional<String> atr14 = Optional.empty();
 
        private Optional<String> allTicks = Optional.empty();
 
        private Optional<String> allVWAP = Optional.empty();
 
        private Optional<String> analystAction = Optional.empty();
 
        private Optional<String> analystActionFrom = Optional.empty();
 
        private Optional<String> analystActionTo = Optional.empty();
 
        private Optional<String> analystFirm = Optional.empty();
 
        private Optional<String> closeVol = Optional.empty();
 
        private Optional<String> comments = Optional.empty();
 
        private Optional<String> currVol = Optional.empty();
 
        private Optional<String> date = Optional.empty();
 
        private Optional<String> dayOpen = Optional.empty();
 
        private Optional<String> dividendYieldPercent = Optional.empty();
 
        private Optional<String> eodClose = Optional.empty();
 
        private Optional<String> eodHigh = Optional.empty();
 
        private Optional<String> eodLow = Optional.empty();
 
        private Optional<String> eodvwap = Optional.empty();
 
        private Optional<String> epsAction = Optional.empty();
 
        private Optional<String> epsActual = Optional.empty();
 
        private Optional<String> ex = Optional.empty();
 
        private Optional<String> headlines = Optional.empty();
 
        private Optional<String> highExcStdDev = Optional.empty();
 
        private Optional<String> l1 = Optional.empty();
 
        private Optional<String> l2 = Optional.empty();
 
        private Optional<String> l3 = Optional.empty();
 
        private Optional<String> l4 = Optional.empty();
 
        private Optional<String> l5 = Optional.empty();
 
        private Optional<String> l10 = Optional.empty();
 
        private Optional<String> l20 = Optional.empty();
 
        private Optional<String> l75 = Optional.empty();
 
        private Optional<String> ls = Optional.empty();
 
        private Optional<String> lowExcStdDev = Optional.empty();
 
        private Optional<String> mainVWAP = Optional.empty();
 
        private Optional<String> maxDnAmt = Optional.empty();
 
        private Optional<String> maxUpAmt = Optional.empty();
 
        private Optional<String> mktCap1000 = Optional.empty();
 
        private Optional<String> movVol = Optional.empty();
 
        private Optional<String> newsSess = Optional.empty();
 
        private Optional<String> openVol = Optional.empty();
 
        private Optional<String> openGapPercent = Optional.empty();
 
        private Optional<String> p1 = Optional.empty();
 
        private Optional<String> p2 = Optional.empty();
 
        private Optional<String> p3 = Optional.empty();
 
        private Optional<String> p4 = Optional.empty();
 
        private Optional<String> p5 = Optional.empty();
 
        private Optional<String> p10 = Optional.empty();
 
        private Optional<String> p20 = Optional.empty();
 
        private Optional<String> p75 = Optional.empty();
 
        private Optional<String> peRatio = Optional.empty();
 
        private Optional<String> pid = Optional.empty();
 
        private Optional<String> puBt = Optional.empty();
 
        private Optional<String> postVWAP = Optional.empty();
 
        private Optional<String> preVWAP = Optional.empty();
 
        private Optional<String> prevVol = Optional.empty();
 
        private Optional<String> prevClose = Optional.empty();
 
        private Optional<String> provider = Optional.empty();
 
        private Optional<String> reCt = Optional.empty();
 
        private Optional<String> rangePercent = Optional.empty();
 
        private Optional<String> rangeAmt = Optional.empty();
 
        private Optional<String> rangeStdDev = Optional.empty();
 
        private Optional<String> reportSess = Optional.empty();
 
        private Optional<String> resourceID = Optional.empty();
 
        private Optional<String> resultPercent = Optional.empty();
 
        private Optional<String> resultVsIndexPercent = Optional.empty();
 
        private Optional<String> s1 = Optional.empty();
 
        private Optional<String> s2 = Optional.empty();
 
        private Optional<String> s3 = Optional.empty();
 
        private Optional<String> s4 = Optional.empty();
 
        private Optional<String> s5 = Optional.empty();
 
        private Optional<String> s10 = Optional.empty();
 
        private Optional<String> s20 = Optional.empty();
 
        private Optional<String> s75 = Optional.empty();
 
        private Optional<String> spyLast = Optional.empty();
 
        private Optional<String> spYclose = Optional.empty();
 
        private Optional<String> shortInterestPercent = Optional.empty();
 
        private Optional<String> symb = Optional.empty();
 
        private Optional<String> tonHigh = Optional.empty();
 
        private Optional<String> tonLast = Optional.empty();
 
        private Optional<String> tonLow = Optional.empty();
 
        private Optional<String> topics = Optional.empty();
 
        private Optional<String> volRatio = Optional.empty();
 
        private Optional<String> volumeStdDev = Optional.empty();
 
        private Optional<Long> created = Optional.empty();
 
        private Optional<String> maxDownPercent = Optional.empty();
 
        private Optional<String> maxUpPercent = Optional.empty();
 
        private Optional<String> prevDayPercent = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder oneMinutePercent(String oneMinutePercent) {
            Utils.checkNotNull(oneMinutePercent, "oneMinutePercent");
            this.oneMinutePercent = Optional.ofNullable(oneMinutePercent);
            return this;
        }

        public Builder oneMinutePercent(Optional<String> oneMinutePercent) {
            Utils.checkNotNull(oneMinutePercent, "oneMinutePercent");
            this.oneMinutePercent = oneMinutePercent;
            return this;
        }

        public Builder fiveMinutesPercent(String fiveMinutesPercent) {
            Utils.checkNotNull(fiveMinutesPercent, "fiveMinutesPercent");
            this.fiveMinutesPercent = Optional.ofNullable(fiveMinutesPercent);
            return this;
        }

        public Builder fiveMinutesPercent(Optional<String> fiveMinutesPercent) {
            Utils.checkNotNull(fiveMinutesPercent, "fiveMinutesPercent");
            this.fiveMinutesPercent = fiveMinutesPercent;
            return this;
        }

        public Builder tenMinutesPercent(String tenMinutesPercent) {
            Utils.checkNotNull(tenMinutesPercent, "tenMinutesPercent");
            this.tenMinutesPercent = Optional.ofNullable(tenMinutesPercent);
            return this;
        }

        public Builder tenMinutesPercent(Optional<String> tenMinutesPercent) {
            Utils.checkNotNull(tenMinutesPercent, "tenMinutesPercent");
            this.tenMinutesPercent = tenMinutesPercent;
            return this;
        }

        public Builder thirtyMinutesPercent(String thirtyMinutesPercent) {
            Utils.checkNotNull(thirtyMinutesPercent, "thirtyMinutesPercent");
            this.thirtyMinutesPercent = Optional.ofNullable(thirtyMinutesPercent);
            return this;
        }

        public Builder thirtyMinutesPercent(Optional<String> thirtyMinutesPercent) {
            Utils.checkNotNull(thirtyMinutesPercent, "thirtyMinutesPercent");
            this.thirtyMinutesPercent = thirtyMinutesPercent;
            return this;
        }

        public Builder thirtySecondsPercent(String thirtySecondsPercent) {
            Utils.checkNotNull(thirtySecondsPercent, "thirtySecondsPercent");
            this.thirtySecondsPercent = Optional.ofNullable(thirtySecondsPercent);
            return this;
        }

        public Builder thirtySecondsPercent(Optional<String> thirtySecondsPercent) {
            Utils.checkNotNull(thirtySecondsPercent, "thirtySecondsPercent");
            this.thirtySecondsPercent = thirtySecondsPercent;
            return this;
        }

        public Builder sixtyMinutesPercent(String sixtyMinutesPercent) {
            Utils.checkNotNull(sixtyMinutesPercent, "sixtyMinutesPercent");
            this.sixtyMinutesPercent = Optional.ofNullable(sixtyMinutesPercent);
            return this;
        }

        public Builder sixtyMinutesPercent(Optional<String> sixtyMinutesPercent) {
            Utils.checkNotNull(sixtyMinutesPercent, "sixtyMinutesPercent");
            this.sixtyMinutesPercent = sixtyMinutesPercent;
            return this;
        }

        public Builder ninetyMinutesPercent(String ninetyMinutesPercent) {
            Utils.checkNotNull(ninetyMinutesPercent, "ninetyMinutesPercent");
            this.ninetyMinutesPercent = Optional.ofNullable(ninetyMinutesPercent);
            return this;
        }

        public Builder ninetyMinutesPercent(Optional<String> ninetyMinutesPercent) {
            Utils.checkNotNull(ninetyMinutesPercent, "ninetyMinutesPercent");
            this.ninetyMinutesPercent = ninetyMinutesPercent;
            return this;
        }

        public Builder oneHundredAndTwentyMinutesPercent(String oneHundredAndTwentyMinutesPercent) {
            Utils.checkNotNull(oneHundredAndTwentyMinutesPercent, "oneHundredAndTwentyMinutesPercent");
            this.oneHundredAndTwentyMinutesPercent = Optional.ofNullable(oneHundredAndTwentyMinutesPercent);
            return this;
        }

        public Builder oneHundredAndTwentyMinutesPercent(Optional<String> oneHundredAndTwentyMinutesPercent) {
            Utils.checkNotNull(oneHundredAndTwentyMinutesPercent, "oneHundredAndTwentyMinutesPercent");
            this.oneHundredAndTwentyMinutesPercent = oneHundredAndTwentyMinutesPercent;
            return this;
        }

        public Builder atrRatio(String atrRatio) {
            Utils.checkNotNull(atrRatio, "atrRatio");
            this.atrRatio = Optional.ofNullable(atrRatio);
            return this;
        }

        public Builder atrRatio(Optional<String> atrRatio) {
            Utils.checkNotNull(atrRatio, "atrRatio");
            this.atrRatio = atrRatio;
            return this;
        }

        public Builder atr14(String atr14) {
            Utils.checkNotNull(atr14, "atr14");
            this.atr14 = Optional.ofNullable(atr14);
            return this;
        }

        public Builder atr14(Optional<String> atr14) {
            Utils.checkNotNull(atr14, "atr14");
            this.atr14 = atr14;
            return this;
        }

        public Builder allTicks(String allTicks) {
            Utils.checkNotNull(allTicks, "allTicks");
            this.allTicks = Optional.ofNullable(allTicks);
            return this;
        }

        public Builder allTicks(Optional<String> allTicks) {
            Utils.checkNotNull(allTicks, "allTicks");
            this.allTicks = allTicks;
            return this;
        }

        public Builder allVWAP(String allVWAP) {
            Utils.checkNotNull(allVWAP, "allVWAP");
            this.allVWAP = Optional.ofNullable(allVWAP);
            return this;
        }

        public Builder allVWAP(Optional<String> allVWAP) {
            Utils.checkNotNull(allVWAP, "allVWAP");
            this.allVWAP = allVWAP;
            return this;
        }

        public Builder analystAction(String analystAction) {
            Utils.checkNotNull(analystAction, "analystAction");
            this.analystAction = Optional.ofNullable(analystAction);
            return this;
        }

        public Builder analystAction(Optional<String> analystAction) {
            Utils.checkNotNull(analystAction, "analystAction");
            this.analystAction = analystAction;
            return this;
        }

        public Builder analystActionFrom(String analystActionFrom) {
            Utils.checkNotNull(analystActionFrom, "analystActionFrom");
            this.analystActionFrom = Optional.ofNullable(analystActionFrom);
            return this;
        }

        public Builder analystActionFrom(Optional<String> analystActionFrom) {
            Utils.checkNotNull(analystActionFrom, "analystActionFrom");
            this.analystActionFrom = analystActionFrom;
            return this;
        }

        public Builder analystActionTo(String analystActionTo) {
            Utils.checkNotNull(analystActionTo, "analystActionTo");
            this.analystActionTo = Optional.ofNullable(analystActionTo);
            return this;
        }

        public Builder analystActionTo(Optional<String> analystActionTo) {
            Utils.checkNotNull(analystActionTo, "analystActionTo");
            this.analystActionTo = analystActionTo;
            return this;
        }

        public Builder analystFirm(String analystFirm) {
            Utils.checkNotNull(analystFirm, "analystFirm");
            this.analystFirm = Optional.ofNullable(analystFirm);
            return this;
        }

        public Builder analystFirm(Optional<String> analystFirm) {
            Utils.checkNotNull(analystFirm, "analystFirm");
            this.analystFirm = analystFirm;
            return this;
        }

        public Builder closeVol(String closeVol) {
            Utils.checkNotNull(closeVol, "closeVol");
            this.closeVol = Optional.ofNullable(closeVol);
            return this;
        }

        public Builder closeVol(Optional<String> closeVol) {
            Utils.checkNotNull(closeVol, "closeVol");
            this.closeVol = closeVol;
            return this;
        }

        public Builder comments(String comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        public Builder comments(Optional<String> comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = comments;
            return this;
        }

        public Builder currVol(String currVol) {
            Utils.checkNotNull(currVol, "currVol");
            this.currVol = Optional.ofNullable(currVol);
            return this;
        }

        public Builder currVol(Optional<String> currVol) {
            Utils.checkNotNull(currVol, "currVol");
            this.currVol = currVol;
            return this;
        }

        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        public Builder date(Optional<String> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder dayOpen(String dayOpen) {
            Utils.checkNotNull(dayOpen, "dayOpen");
            this.dayOpen = Optional.ofNullable(dayOpen);
            return this;
        }

        public Builder dayOpen(Optional<String> dayOpen) {
            Utils.checkNotNull(dayOpen, "dayOpen");
            this.dayOpen = dayOpen;
            return this;
        }

        public Builder dividendYieldPercent(String dividendYieldPercent) {
            Utils.checkNotNull(dividendYieldPercent, "dividendYieldPercent");
            this.dividendYieldPercent = Optional.ofNullable(dividendYieldPercent);
            return this;
        }

        public Builder dividendYieldPercent(Optional<String> dividendYieldPercent) {
            Utils.checkNotNull(dividendYieldPercent, "dividendYieldPercent");
            this.dividendYieldPercent = dividendYieldPercent;
            return this;
        }

        public Builder eodClose(String eodClose) {
            Utils.checkNotNull(eodClose, "eodClose");
            this.eodClose = Optional.ofNullable(eodClose);
            return this;
        }

        public Builder eodClose(Optional<String> eodClose) {
            Utils.checkNotNull(eodClose, "eodClose");
            this.eodClose = eodClose;
            return this;
        }

        public Builder eodHigh(String eodHigh) {
            Utils.checkNotNull(eodHigh, "eodHigh");
            this.eodHigh = Optional.ofNullable(eodHigh);
            return this;
        }

        public Builder eodHigh(Optional<String> eodHigh) {
            Utils.checkNotNull(eodHigh, "eodHigh");
            this.eodHigh = eodHigh;
            return this;
        }

        public Builder eodLow(String eodLow) {
            Utils.checkNotNull(eodLow, "eodLow");
            this.eodLow = Optional.ofNullable(eodLow);
            return this;
        }

        public Builder eodLow(Optional<String> eodLow) {
            Utils.checkNotNull(eodLow, "eodLow");
            this.eodLow = eodLow;
            return this;
        }

        public Builder eodvwap(String eodvwap) {
            Utils.checkNotNull(eodvwap, "eodvwap");
            this.eodvwap = Optional.ofNullable(eodvwap);
            return this;
        }

        public Builder eodvwap(Optional<String> eodvwap) {
            Utils.checkNotNull(eodvwap, "eodvwap");
            this.eodvwap = eodvwap;
            return this;
        }

        public Builder epsAction(String epsAction) {
            Utils.checkNotNull(epsAction, "epsAction");
            this.epsAction = Optional.ofNullable(epsAction);
            return this;
        }

        public Builder epsAction(Optional<String> epsAction) {
            Utils.checkNotNull(epsAction, "epsAction");
            this.epsAction = epsAction;
            return this;
        }

        public Builder epsActual(String epsActual) {
            Utils.checkNotNull(epsActual, "epsActual");
            this.epsActual = Optional.ofNullable(epsActual);
            return this;
        }

        public Builder epsActual(Optional<String> epsActual) {
            Utils.checkNotNull(epsActual, "epsActual");
            this.epsActual = epsActual;
            return this;
        }

        public Builder ex(String ex) {
            Utils.checkNotNull(ex, "ex");
            this.ex = Optional.ofNullable(ex);
            return this;
        }

        public Builder ex(Optional<String> ex) {
            Utils.checkNotNull(ex, "ex");
            this.ex = ex;
            return this;
        }

        public Builder headlines(String headlines) {
            Utils.checkNotNull(headlines, "headlines");
            this.headlines = Optional.ofNullable(headlines);
            return this;
        }

        public Builder headlines(Optional<String> headlines) {
            Utils.checkNotNull(headlines, "headlines");
            this.headlines = headlines;
            return this;
        }

        public Builder highExcStdDev(String highExcStdDev) {
            Utils.checkNotNull(highExcStdDev, "highExcStdDev");
            this.highExcStdDev = Optional.ofNullable(highExcStdDev);
            return this;
        }

        public Builder highExcStdDev(Optional<String> highExcStdDev) {
            Utils.checkNotNull(highExcStdDev, "highExcStdDev");
            this.highExcStdDev = highExcStdDev;
            return this;
        }

        public Builder l1(String l1) {
            Utils.checkNotNull(l1, "l1");
            this.l1 = Optional.ofNullable(l1);
            return this;
        }

        public Builder l1(Optional<String> l1) {
            Utils.checkNotNull(l1, "l1");
            this.l1 = l1;
            return this;
        }

        public Builder l2(String l2) {
            Utils.checkNotNull(l2, "l2");
            this.l2 = Optional.ofNullable(l2);
            return this;
        }

        public Builder l2(Optional<String> l2) {
            Utils.checkNotNull(l2, "l2");
            this.l2 = l2;
            return this;
        }

        public Builder l3(String l3) {
            Utils.checkNotNull(l3, "l3");
            this.l3 = Optional.ofNullable(l3);
            return this;
        }

        public Builder l3(Optional<String> l3) {
            Utils.checkNotNull(l3, "l3");
            this.l3 = l3;
            return this;
        }

        public Builder l4(String l4) {
            Utils.checkNotNull(l4, "l4");
            this.l4 = Optional.ofNullable(l4);
            return this;
        }

        public Builder l4(Optional<String> l4) {
            Utils.checkNotNull(l4, "l4");
            this.l4 = l4;
            return this;
        }

        public Builder l5(String l5) {
            Utils.checkNotNull(l5, "l5");
            this.l5 = Optional.ofNullable(l5);
            return this;
        }

        public Builder l5(Optional<String> l5) {
            Utils.checkNotNull(l5, "l5");
            this.l5 = l5;
            return this;
        }

        public Builder l10(String l10) {
            Utils.checkNotNull(l10, "l10");
            this.l10 = Optional.ofNullable(l10);
            return this;
        }

        public Builder l10(Optional<String> l10) {
            Utils.checkNotNull(l10, "l10");
            this.l10 = l10;
            return this;
        }

        public Builder l20(String l20) {
            Utils.checkNotNull(l20, "l20");
            this.l20 = Optional.ofNullable(l20);
            return this;
        }

        public Builder l20(Optional<String> l20) {
            Utils.checkNotNull(l20, "l20");
            this.l20 = l20;
            return this;
        }

        public Builder l75(String l75) {
            Utils.checkNotNull(l75, "l75");
            this.l75 = Optional.ofNullable(l75);
            return this;
        }

        public Builder l75(Optional<String> l75) {
            Utils.checkNotNull(l75, "l75");
            this.l75 = l75;
            return this;
        }

        public Builder ls(String ls) {
            Utils.checkNotNull(ls, "ls");
            this.ls = Optional.ofNullable(ls);
            return this;
        }

        public Builder ls(Optional<String> ls) {
            Utils.checkNotNull(ls, "ls");
            this.ls = ls;
            return this;
        }

        public Builder lowExcStdDev(String lowExcStdDev) {
            Utils.checkNotNull(lowExcStdDev, "lowExcStdDev");
            this.lowExcStdDev = Optional.ofNullable(lowExcStdDev);
            return this;
        }

        public Builder lowExcStdDev(Optional<String> lowExcStdDev) {
            Utils.checkNotNull(lowExcStdDev, "lowExcStdDev");
            this.lowExcStdDev = lowExcStdDev;
            return this;
        }

        public Builder mainVWAP(String mainVWAP) {
            Utils.checkNotNull(mainVWAP, "mainVWAP");
            this.mainVWAP = Optional.ofNullable(mainVWAP);
            return this;
        }

        public Builder mainVWAP(Optional<String> mainVWAP) {
            Utils.checkNotNull(mainVWAP, "mainVWAP");
            this.mainVWAP = mainVWAP;
            return this;
        }

        public Builder maxDnAmt(String maxDnAmt) {
            Utils.checkNotNull(maxDnAmt, "maxDnAmt");
            this.maxDnAmt = Optional.ofNullable(maxDnAmt);
            return this;
        }

        public Builder maxDnAmt(Optional<String> maxDnAmt) {
            Utils.checkNotNull(maxDnAmt, "maxDnAmt");
            this.maxDnAmt = maxDnAmt;
            return this;
        }

        public Builder maxUpAmt(String maxUpAmt) {
            Utils.checkNotNull(maxUpAmt, "maxUpAmt");
            this.maxUpAmt = Optional.ofNullable(maxUpAmt);
            return this;
        }

        public Builder maxUpAmt(Optional<String> maxUpAmt) {
            Utils.checkNotNull(maxUpAmt, "maxUpAmt");
            this.maxUpAmt = maxUpAmt;
            return this;
        }

        public Builder mktCap1000(String mktCap1000) {
            Utils.checkNotNull(mktCap1000, "mktCap1000");
            this.mktCap1000 = Optional.ofNullable(mktCap1000);
            return this;
        }

        public Builder mktCap1000(Optional<String> mktCap1000) {
            Utils.checkNotNull(mktCap1000, "mktCap1000");
            this.mktCap1000 = mktCap1000;
            return this;
        }

        public Builder movVol(String movVol) {
            Utils.checkNotNull(movVol, "movVol");
            this.movVol = Optional.ofNullable(movVol);
            return this;
        }

        public Builder movVol(Optional<String> movVol) {
            Utils.checkNotNull(movVol, "movVol");
            this.movVol = movVol;
            return this;
        }

        public Builder newsSess(String newsSess) {
            Utils.checkNotNull(newsSess, "newsSess");
            this.newsSess = Optional.ofNullable(newsSess);
            return this;
        }

        public Builder newsSess(Optional<String> newsSess) {
            Utils.checkNotNull(newsSess, "newsSess");
            this.newsSess = newsSess;
            return this;
        }

        public Builder openVol(String openVol) {
            Utils.checkNotNull(openVol, "openVol");
            this.openVol = Optional.ofNullable(openVol);
            return this;
        }

        public Builder openVol(Optional<String> openVol) {
            Utils.checkNotNull(openVol, "openVol");
            this.openVol = openVol;
            return this;
        }

        public Builder openGapPercent(String openGapPercent) {
            Utils.checkNotNull(openGapPercent, "openGapPercent");
            this.openGapPercent = Optional.ofNullable(openGapPercent);
            return this;
        }

        public Builder openGapPercent(Optional<String> openGapPercent) {
            Utils.checkNotNull(openGapPercent, "openGapPercent");
            this.openGapPercent = openGapPercent;
            return this;
        }

        public Builder p1(String p1) {
            Utils.checkNotNull(p1, "p1");
            this.p1 = Optional.ofNullable(p1);
            return this;
        }

        public Builder p1(Optional<String> p1) {
            Utils.checkNotNull(p1, "p1");
            this.p1 = p1;
            return this;
        }

        public Builder p2(String p2) {
            Utils.checkNotNull(p2, "p2");
            this.p2 = Optional.ofNullable(p2);
            return this;
        }

        public Builder p2(Optional<String> p2) {
            Utils.checkNotNull(p2, "p2");
            this.p2 = p2;
            return this;
        }

        public Builder p3(String p3) {
            Utils.checkNotNull(p3, "p3");
            this.p3 = Optional.ofNullable(p3);
            return this;
        }

        public Builder p3(Optional<String> p3) {
            Utils.checkNotNull(p3, "p3");
            this.p3 = p3;
            return this;
        }

        public Builder p4(String p4) {
            Utils.checkNotNull(p4, "p4");
            this.p4 = Optional.ofNullable(p4);
            return this;
        }

        public Builder p4(Optional<String> p4) {
            Utils.checkNotNull(p4, "p4");
            this.p4 = p4;
            return this;
        }

        public Builder p5(String p5) {
            Utils.checkNotNull(p5, "p5");
            this.p5 = Optional.ofNullable(p5);
            return this;
        }

        public Builder p5(Optional<String> p5) {
            Utils.checkNotNull(p5, "p5");
            this.p5 = p5;
            return this;
        }

        public Builder p10(String p10) {
            Utils.checkNotNull(p10, "p10");
            this.p10 = Optional.ofNullable(p10);
            return this;
        }

        public Builder p10(Optional<String> p10) {
            Utils.checkNotNull(p10, "p10");
            this.p10 = p10;
            return this;
        }

        public Builder p20(String p20) {
            Utils.checkNotNull(p20, "p20");
            this.p20 = Optional.ofNullable(p20);
            return this;
        }

        public Builder p20(Optional<String> p20) {
            Utils.checkNotNull(p20, "p20");
            this.p20 = p20;
            return this;
        }

        public Builder p75(String p75) {
            Utils.checkNotNull(p75, "p75");
            this.p75 = Optional.ofNullable(p75);
            return this;
        }

        public Builder p75(Optional<String> p75) {
            Utils.checkNotNull(p75, "p75");
            this.p75 = p75;
            return this;
        }

        public Builder peRatio(String peRatio) {
            Utils.checkNotNull(peRatio, "peRatio");
            this.peRatio = Optional.ofNullable(peRatio);
            return this;
        }

        public Builder peRatio(Optional<String> peRatio) {
            Utils.checkNotNull(peRatio, "peRatio");
            this.peRatio = peRatio;
            return this;
        }

        public Builder pid(String pid) {
            Utils.checkNotNull(pid, "pid");
            this.pid = Optional.ofNullable(pid);
            return this;
        }

        public Builder pid(Optional<String> pid) {
            Utils.checkNotNull(pid, "pid");
            this.pid = pid;
            return this;
        }

        public Builder puBt(String puBt) {
            Utils.checkNotNull(puBt, "puBt");
            this.puBt = Optional.ofNullable(puBt);
            return this;
        }

        public Builder puBt(Optional<String> puBt) {
            Utils.checkNotNull(puBt, "puBt");
            this.puBt = puBt;
            return this;
        }

        public Builder postVWAP(String postVWAP) {
            Utils.checkNotNull(postVWAP, "postVWAP");
            this.postVWAP = Optional.ofNullable(postVWAP);
            return this;
        }

        public Builder postVWAP(Optional<String> postVWAP) {
            Utils.checkNotNull(postVWAP, "postVWAP");
            this.postVWAP = postVWAP;
            return this;
        }

        public Builder preVWAP(String preVWAP) {
            Utils.checkNotNull(preVWAP, "preVWAP");
            this.preVWAP = Optional.ofNullable(preVWAP);
            return this;
        }

        public Builder preVWAP(Optional<String> preVWAP) {
            Utils.checkNotNull(preVWAP, "preVWAP");
            this.preVWAP = preVWAP;
            return this;
        }

        public Builder prevVol(String prevVol) {
            Utils.checkNotNull(prevVol, "prevVol");
            this.prevVol = Optional.ofNullable(prevVol);
            return this;
        }

        public Builder prevVol(Optional<String> prevVol) {
            Utils.checkNotNull(prevVol, "prevVol");
            this.prevVol = prevVol;
            return this;
        }

        public Builder prevClose(String prevClose) {
            Utils.checkNotNull(prevClose, "prevClose");
            this.prevClose = Optional.ofNullable(prevClose);
            return this;
        }

        public Builder prevClose(Optional<String> prevClose) {
            Utils.checkNotNull(prevClose, "prevClose");
            this.prevClose = prevClose;
            return this;
        }

        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        public Builder provider(Optional<String> provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        public Builder reCt(String reCt) {
            Utils.checkNotNull(reCt, "reCt");
            this.reCt = Optional.ofNullable(reCt);
            return this;
        }

        public Builder reCt(Optional<String> reCt) {
            Utils.checkNotNull(reCt, "reCt");
            this.reCt = reCt;
            return this;
        }

        public Builder rangePercent(String rangePercent) {
            Utils.checkNotNull(rangePercent, "rangePercent");
            this.rangePercent = Optional.ofNullable(rangePercent);
            return this;
        }

        public Builder rangePercent(Optional<String> rangePercent) {
            Utils.checkNotNull(rangePercent, "rangePercent");
            this.rangePercent = rangePercent;
            return this;
        }

        public Builder rangeAmt(String rangeAmt) {
            Utils.checkNotNull(rangeAmt, "rangeAmt");
            this.rangeAmt = Optional.ofNullable(rangeAmt);
            return this;
        }

        public Builder rangeAmt(Optional<String> rangeAmt) {
            Utils.checkNotNull(rangeAmt, "rangeAmt");
            this.rangeAmt = rangeAmt;
            return this;
        }

        public Builder rangeStdDev(String rangeStdDev) {
            Utils.checkNotNull(rangeStdDev, "rangeStdDev");
            this.rangeStdDev = Optional.ofNullable(rangeStdDev);
            return this;
        }

        public Builder rangeStdDev(Optional<String> rangeStdDev) {
            Utils.checkNotNull(rangeStdDev, "rangeStdDev");
            this.rangeStdDev = rangeStdDev;
            return this;
        }

        public Builder reportSess(String reportSess) {
            Utils.checkNotNull(reportSess, "reportSess");
            this.reportSess = Optional.ofNullable(reportSess);
            return this;
        }

        public Builder reportSess(Optional<String> reportSess) {
            Utils.checkNotNull(reportSess, "reportSess");
            this.reportSess = reportSess;
            return this;
        }

        public Builder resourceID(String resourceID) {
            Utils.checkNotNull(resourceID, "resourceID");
            this.resourceID = Optional.ofNullable(resourceID);
            return this;
        }

        public Builder resourceID(Optional<String> resourceID) {
            Utils.checkNotNull(resourceID, "resourceID");
            this.resourceID = resourceID;
            return this;
        }

        public Builder resultPercent(String resultPercent) {
            Utils.checkNotNull(resultPercent, "resultPercent");
            this.resultPercent = Optional.ofNullable(resultPercent);
            return this;
        }

        public Builder resultPercent(Optional<String> resultPercent) {
            Utils.checkNotNull(resultPercent, "resultPercent");
            this.resultPercent = resultPercent;
            return this;
        }

        public Builder resultVsIndexPercent(String resultVsIndexPercent) {
            Utils.checkNotNull(resultVsIndexPercent, "resultVsIndexPercent");
            this.resultVsIndexPercent = Optional.ofNullable(resultVsIndexPercent);
            return this;
        }

        public Builder resultVsIndexPercent(Optional<String> resultVsIndexPercent) {
            Utils.checkNotNull(resultVsIndexPercent, "resultVsIndexPercent");
            this.resultVsIndexPercent = resultVsIndexPercent;
            return this;
        }

        public Builder s1(String s1) {
            Utils.checkNotNull(s1, "s1");
            this.s1 = Optional.ofNullable(s1);
            return this;
        }

        public Builder s1(Optional<String> s1) {
            Utils.checkNotNull(s1, "s1");
            this.s1 = s1;
            return this;
        }

        public Builder s2(String s2) {
            Utils.checkNotNull(s2, "s2");
            this.s2 = Optional.ofNullable(s2);
            return this;
        }

        public Builder s2(Optional<String> s2) {
            Utils.checkNotNull(s2, "s2");
            this.s2 = s2;
            return this;
        }

        public Builder s3(String s3) {
            Utils.checkNotNull(s3, "s3");
            this.s3 = Optional.ofNullable(s3);
            return this;
        }

        public Builder s3(Optional<String> s3) {
            Utils.checkNotNull(s3, "s3");
            this.s3 = s3;
            return this;
        }

        public Builder s4(String s4) {
            Utils.checkNotNull(s4, "s4");
            this.s4 = Optional.ofNullable(s4);
            return this;
        }

        public Builder s4(Optional<String> s4) {
            Utils.checkNotNull(s4, "s4");
            this.s4 = s4;
            return this;
        }

        public Builder s5(String s5) {
            Utils.checkNotNull(s5, "s5");
            this.s5 = Optional.ofNullable(s5);
            return this;
        }

        public Builder s5(Optional<String> s5) {
            Utils.checkNotNull(s5, "s5");
            this.s5 = s5;
            return this;
        }

        public Builder s10(String s10) {
            Utils.checkNotNull(s10, "s10");
            this.s10 = Optional.ofNullable(s10);
            return this;
        }

        public Builder s10(Optional<String> s10) {
            Utils.checkNotNull(s10, "s10");
            this.s10 = s10;
            return this;
        }

        public Builder s20(String s20) {
            Utils.checkNotNull(s20, "s20");
            this.s20 = Optional.ofNullable(s20);
            return this;
        }

        public Builder s20(Optional<String> s20) {
            Utils.checkNotNull(s20, "s20");
            this.s20 = s20;
            return this;
        }

        public Builder s75(String s75) {
            Utils.checkNotNull(s75, "s75");
            this.s75 = Optional.ofNullable(s75);
            return this;
        }

        public Builder s75(Optional<String> s75) {
            Utils.checkNotNull(s75, "s75");
            this.s75 = s75;
            return this;
        }

        public Builder spyLast(String spyLast) {
            Utils.checkNotNull(spyLast, "spyLast");
            this.spyLast = Optional.ofNullable(spyLast);
            return this;
        }

        public Builder spyLast(Optional<String> spyLast) {
            Utils.checkNotNull(spyLast, "spyLast");
            this.spyLast = spyLast;
            return this;
        }

        public Builder spYclose(String spYclose) {
            Utils.checkNotNull(spYclose, "spYclose");
            this.spYclose = Optional.ofNullable(spYclose);
            return this;
        }

        public Builder spYclose(Optional<String> spYclose) {
            Utils.checkNotNull(spYclose, "spYclose");
            this.spYclose = spYclose;
            return this;
        }

        public Builder shortInterestPercent(String shortInterestPercent) {
            Utils.checkNotNull(shortInterestPercent, "shortInterestPercent");
            this.shortInterestPercent = Optional.ofNullable(shortInterestPercent);
            return this;
        }

        public Builder shortInterestPercent(Optional<String> shortInterestPercent) {
            Utils.checkNotNull(shortInterestPercent, "shortInterestPercent");
            this.shortInterestPercent = shortInterestPercent;
            return this;
        }

        public Builder symb(String symb) {
            Utils.checkNotNull(symb, "symb");
            this.symb = Optional.ofNullable(symb);
            return this;
        }

        public Builder symb(Optional<String> symb) {
            Utils.checkNotNull(symb, "symb");
            this.symb = symb;
            return this;
        }

        public Builder tonHigh(String tonHigh) {
            Utils.checkNotNull(tonHigh, "tonHigh");
            this.tonHigh = Optional.ofNullable(tonHigh);
            return this;
        }

        public Builder tonHigh(Optional<String> tonHigh) {
            Utils.checkNotNull(tonHigh, "tonHigh");
            this.tonHigh = tonHigh;
            return this;
        }

        public Builder tonLast(String tonLast) {
            Utils.checkNotNull(tonLast, "tonLast");
            this.tonLast = Optional.ofNullable(tonLast);
            return this;
        }

        public Builder tonLast(Optional<String> tonLast) {
            Utils.checkNotNull(tonLast, "tonLast");
            this.tonLast = tonLast;
            return this;
        }

        public Builder tonLow(String tonLow) {
            Utils.checkNotNull(tonLow, "tonLow");
            this.tonLow = Optional.ofNullable(tonLow);
            return this;
        }

        public Builder tonLow(Optional<String> tonLow) {
            Utils.checkNotNull(tonLow, "tonLow");
            this.tonLow = tonLow;
            return this;
        }

        public Builder topics(String topics) {
            Utils.checkNotNull(topics, "topics");
            this.topics = Optional.ofNullable(topics);
            return this;
        }

        public Builder topics(Optional<String> topics) {
            Utils.checkNotNull(topics, "topics");
            this.topics = topics;
            return this;
        }

        public Builder volRatio(String volRatio) {
            Utils.checkNotNull(volRatio, "volRatio");
            this.volRatio = Optional.ofNullable(volRatio);
            return this;
        }

        public Builder volRatio(Optional<String> volRatio) {
            Utils.checkNotNull(volRatio, "volRatio");
            this.volRatio = volRatio;
            return this;
        }

        public Builder volumeStdDev(String volumeStdDev) {
            Utils.checkNotNull(volumeStdDev, "volumeStdDev");
            this.volumeStdDev = Optional.ofNullable(volumeStdDev);
            return this;
        }

        public Builder volumeStdDev(Optional<String> volumeStdDev) {
            Utils.checkNotNull(volumeStdDev, "volumeStdDev");
            this.volumeStdDev = volumeStdDev;
            return this;
        }

        public Builder created(long created) {
            Utils.checkNotNull(created, "created");
            this.created = Optional.ofNullable(created);
            return this;
        }

        public Builder created(Optional<Long> created) {
            Utils.checkNotNull(created, "created");
            this.created = created;
            return this;
        }

        public Builder maxDownPercent(String maxDownPercent) {
            Utils.checkNotNull(maxDownPercent, "maxDownPercent");
            this.maxDownPercent = Optional.ofNullable(maxDownPercent);
            return this;
        }

        public Builder maxDownPercent(Optional<String> maxDownPercent) {
            Utils.checkNotNull(maxDownPercent, "maxDownPercent");
            this.maxDownPercent = maxDownPercent;
            return this;
        }

        public Builder maxUpPercent(String maxUpPercent) {
            Utils.checkNotNull(maxUpPercent, "maxUpPercent");
            this.maxUpPercent = Optional.ofNullable(maxUpPercent);
            return this;
        }

        public Builder maxUpPercent(Optional<String> maxUpPercent) {
            Utils.checkNotNull(maxUpPercent, "maxUpPercent");
            this.maxUpPercent = maxUpPercent;
            return this;
        }

        public Builder prevDayPercent(String prevDayPercent) {
            Utils.checkNotNull(prevDayPercent, "prevDayPercent");
            this.prevDayPercent = Optional.ofNullable(prevDayPercent);
            return this;
        }

        public Builder prevDayPercent(Optional<String> prevDayPercent) {
            Utils.checkNotNull(prevDayPercent, "prevDayPercent");
            this.prevDayPercent = prevDayPercent;
            return this;
        }
        
        public ModelsNewsquantified build() {
            return new ModelsNewsquantified(
                id,
                oneMinutePercent,
                fiveMinutesPercent,
                tenMinutesPercent,
                thirtyMinutesPercent,
                thirtySecondsPercent,
                sixtyMinutesPercent,
                ninetyMinutesPercent,
                oneHundredAndTwentyMinutesPercent,
                atrRatio,
                atr14,
                allTicks,
                allVWAP,
                analystAction,
                analystActionFrom,
                analystActionTo,
                analystFirm,
                closeVol,
                comments,
                currVol,
                date,
                dayOpen,
                dividendYieldPercent,
                eodClose,
                eodHigh,
                eodLow,
                eodvwap,
                epsAction,
                epsActual,
                ex,
                headlines,
                highExcStdDev,
                l1,
                l2,
                l3,
                l4,
                l5,
                l10,
                l20,
                l75,
                ls,
                lowExcStdDev,
                mainVWAP,
                maxDnAmt,
                maxUpAmt,
                mktCap1000,
                movVol,
                newsSess,
                openVol,
                openGapPercent,
                p1,
                p2,
                p3,
                p4,
                p5,
                p10,
                p20,
                p75,
                peRatio,
                pid,
                puBt,
                postVWAP,
                preVWAP,
                prevVol,
                prevClose,
                provider,
                reCt,
                rangePercent,
                rangeAmt,
                rangeStdDev,
                reportSess,
                resourceID,
                resultPercent,
                resultVsIndexPercent,
                s1,
                s2,
                s3,
                s4,
                s5,
                s10,
                s20,
                s75,
                spyLast,
                spYclose,
                shortInterestPercent,
                symb,
                tonHigh,
                tonLast,
                tonLow,
                topics,
                volRatio,
                volumeStdDev,
                created,
                maxDownPercent,
                maxUpPercent,
                prevDayPercent);
        }
    }
}

