/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ApiNewsItem {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    private Optional<String> author;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private Optional<String> body;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channels")
    private Optional<? extends List<ApiChannelTag>> channels;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    private Optional<String> created;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<Long> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    private Optional<? extends List<ApiImage>> image;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_id")
    private Optional<Long> originalId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stocks")
    private Optional<? extends List<ApiStock>> stocks;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends List<ApiChannelTag>> tags;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teaser")
    private Optional<String> teaser;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated")
    private Optional<String> updated;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonCreator
    public ApiNewsItem(
            @JsonProperty("author") Optional<String> author,
            @JsonProperty("body") Optional<String> body,
            @JsonProperty("channels") Optional<? extends List<ApiChannelTag>> channels,
            @JsonProperty("created") Optional<String> created,
            @JsonProperty("id") Optional<Long> id,
            @JsonProperty("image") Optional<? extends List<ApiImage>> image,
            @JsonProperty("original_id") Optional<Long> originalId,
            @JsonProperty("stocks") Optional<? extends List<ApiStock>> stocks,
            @JsonProperty("tags") Optional<? extends List<ApiChannelTag>> tags,
            @JsonProperty("teaser") Optional<String> teaser,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("updated") Optional<String> updated,
            @JsonProperty("url") Optional<String> url) {
        Utils.checkNotNull(author, "author");
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(channels, "channels");
        Utils.checkNotNull(created, "created");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(originalId, "originalId");
        Utils.checkNotNull(stocks, "stocks");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(teaser, "teaser");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(updated, "updated");
        Utils.checkNotNull(url, "url");
        this.author = author;
        this.body = body;
        this.channels = channels;
        this.created = created;
        this.id = id;
        this.image = image;
        this.originalId = originalId;
        this.stocks = stocks;
        this.tags = tags;
        this.teaser = teaser;
        this.title = title;
        this.updated = updated;
        this.url = url;
    }
    
    public ApiNewsItem() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> author() {
        return author;
    }

    @JsonIgnore
    public Optional<String> body() {
        return body;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ApiChannelTag>> channels() {
        return (Optional<List<ApiChannelTag>>) channels;
    }

    @JsonIgnore
    public Optional<String> created() {
        return created;
    }

    @JsonIgnore
    public Optional<Long> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ApiImage>> image() {
        return (Optional<List<ApiImage>>) image;
    }

    @JsonIgnore
    public Optional<Long> originalId() {
        return originalId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ApiStock>> stocks() {
        return (Optional<List<ApiStock>>) stocks;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ApiChannelTag>> tags() {
        return (Optional<List<ApiChannelTag>>) tags;
    }

    @JsonIgnore
    public Optional<String> teaser() {
        return teaser;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    @JsonIgnore
    public Optional<String> updated() {
        return updated;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ApiNewsItem withAuthor(String author) {
        Utils.checkNotNull(author, "author");
        this.author = Optional.ofNullable(author);
        return this;
    }

    public ApiNewsItem withAuthor(Optional<String> author) {
        Utils.checkNotNull(author, "author");
        this.author = author;
        return this;
    }

    public ApiNewsItem withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = Optional.ofNullable(body);
        return this;
    }

    public ApiNewsItem withBody(Optional<String> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    public ApiNewsItem withChannels(List<ApiChannelTag> channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = Optional.ofNullable(channels);
        return this;
    }

    public ApiNewsItem withChannels(Optional<? extends List<ApiChannelTag>> channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = channels;
        return this;
    }

    public ApiNewsItem withCreated(String created) {
        Utils.checkNotNull(created, "created");
        this.created = Optional.ofNullable(created);
        return this;
    }

    public ApiNewsItem withCreated(Optional<String> created) {
        Utils.checkNotNull(created, "created");
        this.created = created;
        return this;
    }

    public ApiNewsItem withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ApiNewsItem withId(Optional<Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ApiNewsItem withImage(List<ApiImage> image) {
        Utils.checkNotNull(image, "image");
        this.image = Optional.ofNullable(image);
        return this;
    }

    public ApiNewsItem withImage(Optional<? extends List<ApiImage>> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    public ApiNewsItem withOriginalId(long originalId) {
        Utils.checkNotNull(originalId, "originalId");
        this.originalId = Optional.ofNullable(originalId);
        return this;
    }

    public ApiNewsItem withOriginalId(Optional<Long> originalId) {
        Utils.checkNotNull(originalId, "originalId");
        this.originalId = originalId;
        return this;
    }

    public ApiNewsItem withStocks(List<ApiStock> stocks) {
        Utils.checkNotNull(stocks, "stocks");
        this.stocks = Optional.ofNullable(stocks);
        return this;
    }

    public ApiNewsItem withStocks(Optional<? extends List<ApiStock>> stocks) {
        Utils.checkNotNull(stocks, "stocks");
        this.stocks = stocks;
        return this;
    }

    public ApiNewsItem withTags(List<ApiChannelTag> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    public ApiNewsItem withTags(Optional<? extends List<ApiChannelTag>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    public ApiNewsItem withTeaser(String teaser) {
        Utils.checkNotNull(teaser, "teaser");
        this.teaser = Optional.ofNullable(teaser);
        return this;
    }

    public ApiNewsItem withTeaser(Optional<String> teaser) {
        Utils.checkNotNull(teaser, "teaser");
        this.teaser = teaser;
        return this;
    }

    public ApiNewsItem withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public ApiNewsItem withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public ApiNewsItem withUpdated(String updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = Optional.ofNullable(updated);
        return this;
    }

    public ApiNewsItem withUpdated(Optional<String> updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = updated;
        return this;
    }

    public ApiNewsItem withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    public ApiNewsItem withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiNewsItem other = (ApiNewsItem) o;
        return 
            Objects.deepEquals(this.author, other.author) &&
            Objects.deepEquals(this.body, other.body) &&
            Objects.deepEquals(this.channels, other.channels) &&
            Objects.deepEquals(this.created, other.created) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.image, other.image) &&
            Objects.deepEquals(this.originalId, other.originalId) &&
            Objects.deepEquals(this.stocks, other.stocks) &&
            Objects.deepEquals(this.tags, other.tags) &&
            Objects.deepEquals(this.teaser, other.teaser) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.updated, other.updated) &&
            Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            author,
            body,
            channels,
            created,
            id,
            image,
            originalId,
            stocks,
            tags,
            teaser,
            title,
            updated,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApiNewsItem.class,
                "author", author,
                "body", body,
                "channels", channels,
                "created", created,
                "id", id,
                "image", image,
                "originalId", originalId,
                "stocks", stocks,
                "tags", tags,
                "teaser", teaser,
                "title", title,
                "updated", updated,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<String> author = Optional.empty();
 
        private Optional<String> body = Optional.empty();
 
        private Optional<? extends List<ApiChannelTag>> channels = Optional.empty();
 
        private Optional<String> created = Optional.empty();
 
        private Optional<Long> id = Optional.empty();
 
        private Optional<? extends List<ApiImage>> image = Optional.empty();
 
        private Optional<Long> originalId = Optional.empty();
 
        private Optional<? extends List<ApiStock>> stocks = Optional.empty();
 
        private Optional<? extends List<ApiChannelTag>> tags = Optional.empty();
 
        private Optional<String> teaser = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> updated = Optional.empty();
 
        private Optional<String> url = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder author(String author) {
            Utils.checkNotNull(author, "author");
            this.author = Optional.ofNullable(author);
            return this;
        }

        public Builder author(Optional<String> author) {
            Utils.checkNotNull(author, "author");
            this.author = author;
            return this;
        }

        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = Optional.ofNullable(body);
            return this;
        }

        public Builder body(Optional<String> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        public Builder channels(List<ApiChannelTag> channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = Optional.ofNullable(channels);
            return this;
        }

        public Builder channels(Optional<? extends List<ApiChannelTag>> channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = channels;
            return this;
        }

        public Builder created(String created) {
            Utils.checkNotNull(created, "created");
            this.created = Optional.ofNullable(created);
            return this;
        }

        public Builder created(Optional<String> created) {
            Utils.checkNotNull(created, "created");
            this.created = created;
            return this;
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder image(List<ApiImage> image) {
            Utils.checkNotNull(image, "image");
            this.image = Optional.ofNullable(image);
            return this;
        }

        public Builder image(Optional<? extends List<ApiImage>> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }

        public Builder originalId(long originalId) {
            Utils.checkNotNull(originalId, "originalId");
            this.originalId = Optional.ofNullable(originalId);
            return this;
        }

        public Builder originalId(Optional<Long> originalId) {
            Utils.checkNotNull(originalId, "originalId");
            this.originalId = originalId;
            return this;
        }

        public Builder stocks(List<ApiStock> stocks) {
            Utils.checkNotNull(stocks, "stocks");
            this.stocks = Optional.ofNullable(stocks);
            return this;
        }

        public Builder stocks(Optional<? extends List<ApiStock>> stocks) {
            Utils.checkNotNull(stocks, "stocks");
            this.stocks = stocks;
            return this;
        }

        public Builder tags(List<ApiChannelTag> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public Builder tags(Optional<? extends List<ApiChannelTag>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        public Builder teaser(String teaser) {
            Utils.checkNotNull(teaser, "teaser");
            this.teaser = Optional.ofNullable(teaser);
            return this;
        }

        public Builder teaser(Optional<String> teaser) {
            Utils.checkNotNull(teaser, "teaser");
            this.teaser = teaser;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder updated(String updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = Optional.ofNullable(updated);
            return this;
        }

        public Builder updated(Optional<String> updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = updated;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public ApiNewsItem build() {
            return new ApiNewsItem(
                author,
                body,
                channels,
                created,
                id,
                image,
                originalId,
                stocks,
                tags,
                teaser,
                title,
                updated,
                url);
        }
    }
}

