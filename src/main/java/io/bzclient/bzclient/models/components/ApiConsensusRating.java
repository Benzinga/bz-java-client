/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ApiConsensusRating {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregate_ratings")
    private Optional<? extends ApiAggregateRating> aggregateRatings;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregate_type")
    private Optional<String> aggregateType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consensus_price_target")
    private Optional<Double> consensusPriceTarget;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consensus_rating")
    private Optional<String> consensusRating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consensus_rating_val")
    private Optional<Double> consensusRatingVal;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("high_price_target")
    private Optional<Double> highPriceTarget;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("low_price_target")
    private Optional<Double> lowPriceTarget;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_analyst_count")
    private Optional<Long> totalAnalystCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unique_analyst_count")
    private Optional<Long> uniqueAnalystCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<String> updatedAt;

    @JsonCreator
    public ApiConsensusRating(
            @JsonProperty("aggregate_ratings") Optional<? extends ApiAggregateRating> aggregateRatings,
            @JsonProperty("aggregate_type") Optional<String> aggregateType,
            @JsonProperty("consensus_price_target") Optional<Double> consensusPriceTarget,
            @JsonProperty("consensus_rating") Optional<String> consensusRating,
            @JsonProperty("consensus_rating_val") Optional<Double> consensusRatingVal,
            @JsonProperty("high_price_target") Optional<Double> highPriceTarget,
            @JsonProperty("low_price_target") Optional<Double> lowPriceTarget,
            @JsonProperty("total_analyst_count") Optional<Long> totalAnalystCount,
            @JsonProperty("unique_analyst_count") Optional<Long> uniqueAnalystCount,
            @JsonProperty("updated_at") Optional<String> updatedAt) {
        Utils.checkNotNull(aggregateRatings, "aggregateRatings");
        Utils.checkNotNull(aggregateType, "aggregateType");
        Utils.checkNotNull(consensusPriceTarget, "consensusPriceTarget");
        Utils.checkNotNull(consensusRating, "consensusRating");
        Utils.checkNotNull(consensusRatingVal, "consensusRatingVal");
        Utils.checkNotNull(highPriceTarget, "highPriceTarget");
        Utils.checkNotNull(lowPriceTarget, "lowPriceTarget");
        Utils.checkNotNull(totalAnalystCount, "totalAnalystCount");
        Utils.checkNotNull(uniqueAnalystCount, "uniqueAnalystCount");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.aggregateRatings = aggregateRatings;
        this.aggregateType = aggregateType;
        this.consensusPriceTarget = consensusPriceTarget;
        this.consensusRating = consensusRating;
        this.consensusRatingVal = consensusRatingVal;
        this.highPriceTarget = highPriceTarget;
        this.lowPriceTarget = lowPriceTarget;
        this.totalAnalystCount = totalAnalystCount;
        this.uniqueAnalystCount = uniqueAnalystCount;
        this.updatedAt = updatedAt;
    }
    
    public ApiConsensusRating() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ApiAggregateRating> aggregateRatings() {
        return (Optional<ApiAggregateRating>) aggregateRatings;
    }

    @JsonIgnore
    public Optional<String> aggregateType() {
        return aggregateType;
    }

    @JsonIgnore
    public Optional<Double> consensusPriceTarget() {
        return consensusPriceTarget;
    }

    @JsonIgnore
    public Optional<String> consensusRating() {
        return consensusRating;
    }

    @JsonIgnore
    public Optional<Double> consensusRatingVal() {
        return consensusRatingVal;
    }

    @JsonIgnore
    public Optional<Double> highPriceTarget() {
        return highPriceTarget;
    }

    @JsonIgnore
    public Optional<Double> lowPriceTarget() {
        return lowPriceTarget;
    }

    @JsonIgnore
    public Optional<Long> totalAnalystCount() {
        return totalAnalystCount;
    }

    @JsonIgnore
    public Optional<Long> uniqueAnalystCount() {
        return uniqueAnalystCount;
    }

    @JsonIgnore
    public Optional<String> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ApiConsensusRating withAggregateRatings(ApiAggregateRating aggregateRatings) {
        Utils.checkNotNull(aggregateRatings, "aggregateRatings");
        this.aggregateRatings = Optional.ofNullable(aggregateRatings);
        return this;
    }

    public ApiConsensusRating withAggregateRatings(Optional<? extends ApiAggregateRating> aggregateRatings) {
        Utils.checkNotNull(aggregateRatings, "aggregateRatings");
        this.aggregateRatings = aggregateRatings;
        return this;
    }

    public ApiConsensusRating withAggregateType(String aggregateType) {
        Utils.checkNotNull(aggregateType, "aggregateType");
        this.aggregateType = Optional.ofNullable(aggregateType);
        return this;
    }

    public ApiConsensusRating withAggregateType(Optional<String> aggregateType) {
        Utils.checkNotNull(aggregateType, "aggregateType");
        this.aggregateType = aggregateType;
        return this;
    }

    public ApiConsensusRating withConsensusPriceTarget(double consensusPriceTarget) {
        Utils.checkNotNull(consensusPriceTarget, "consensusPriceTarget");
        this.consensusPriceTarget = Optional.ofNullable(consensusPriceTarget);
        return this;
    }

    public ApiConsensusRating withConsensusPriceTarget(Optional<Double> consensusPriceTarget) {
        Utils.checkNotNull(consensusPriceTarget, "consensusPriceTarget");
        this.consensusPriceTarget = consensusPriceTarget;
        return this;
    }

    public ApiConsensusRating withConsensusRating(String consensusRating) {
        Utils.checkNotNull(consensusRating, "consensusRating");
        this.consensusRating = Optional.ofNullable(consensusRating);
        return this;
    }

    public ApiConsensusRating withConsensusRating(Optional<String> consensusRating) {
        Utils.checkNotNull(consensusRating, "consensusRating");
        this.consensusRating = consensusRating;
        return this;
    }

    public ApiConsensusRating withConsensusRatingVal(double consensusRatingVal) {
        Utils.checkNotNull(consensusRatingVal, "consensusRatingVal");
        this.consensusRatingVal = Optional.ofNullable(consensusRatingVal);
        return this;
    }

    public ApiConsensusRating withConsensusRatingVal(Optional<Double> consensusRatingVal) {
        Utils.checkNotNull(consensusRatingVal, "consensusRatingVal");
        this.consensusRatingVal = consensusRatingVal;
        return this;
    }

    public ApiConsensusRating withHighPriceTarget(double highPriceTarget) {
        Utils.checkNotNull(highPriceTarget, "highPriceTarget");
        this.highPriceTarget = Optional.ofNullable(highPriceTarget);
        return this;
    }

    public ApiConsensusRating withHighPriceTarget(Optional<Double> highPriceTarget) {
        Utils.checkNotNull(highPriceTarget, "highPriceTarget");
        this.highPriceTarget = highPriceTarget;
        return this;
    }

    public ApiConsensusRating withLowPriceTarget(double lowPriceTarget) {
        Utils.checkNotNull(lowPriceTarget, "lowPriceTarget");
        this.lowPriceTarget = Optional.ofNullable(lowPriceTarget);
        return this;
    }

    public ApiConsensusRating withLowPriceTarget(Optional<Double> lowPriceTarget) {
        Utils.checkNotNull(lowPriceTarget, "lowPriceTarget");
        this.lowPriceTarget = lowPriceTarget;
        return this;
    }

    public ApiConsensusRating withTotalAnalystCount(long totalAnalystCount) {
        Utils.checkNotNull(totalAnalystCount, "totalAnalystCount");
        this.totalAnalystCount = Optional.ofNullable(totalAnalystCount);
        return this;
    }

    public ApiConsensusRating withTotalAnalystCount(Optional<Long> totalAnalystCount) {
        Utils.checkNotNull(totalAnalystCount, "totalAnalystCount");
        this.totalAnalystCount = totalAnalystCount;
        return this;
    }

    public ApiConsensusRating withUniqueAnalystCount(long uniqueAnalystCount) {
        Utils.checkNotNull(uniqueAnalystCount, "uniqueAnalystCount");
        this.uniqueAnalystCount = Optional.ofNullable(uniqueAnalystCount);
        return this;
    }

    public ApiConsensusRating withUniqueAnalystCount(Optional<Long> uniqueAnalystCount) {
        Utils.checkNotNull(uniqueAnalystCount, "uniqueAnalystCount");
        this.uniqueAnalystCount = uniqueAnalystCount;
        return this;
    }

    public ApiConsensusRating withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public ApiConsensusRating withUpdatedAt(Optional<String> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiConsensusRating other = (ApiConsensusRating) o;
        return 
            Objects.deepEquals(this.aggregateRatings, other.aggregateRatings) &&
            Objects.deepEquals(this.aggregateType, other.aggregateType) &&
            Objects.deepEquals(this.consensusPriceTarget, other.consensusPriceTarget) &&
            Objects.deepEquals(this.consensusRating, other.consensusRating) &&
            Objects.deepEquals(this.consensusRatingVal, other.consensusRatingVal) &&
            Objects.deepEquals(this.highPriceTarget, other.highPriceTarget) &&
            Objects.deepEquals(this.lowPriceTarget, other.lowPriceTarget) &&
            Objects.deepEquals(this.totalAnalystCount, other.totalAnalystCount) &&
            Objects.deepEquals(this.uniqueAnalystCount, other.uniqueAnalystCount) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            aggregateRatings,
            aggregateType,
            consensusPriceTarget,
            consensusRating,
            consensusRatingVal,
            highPriceTarget,
            lowPriceTarget,
            totalAnalystCount,
            uniqueAnalystCount,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApiConsensusRating.class,
                "aggregateRatings", aggregateRatings,
                "aggregateType", aggregateType,
                "consensusPriceTarget", consensusPriceTarget,
                "consensusRating", consensusRating,
                "consensusRatingVal", consensusRatingVal,
                "highPriceTarget", highPriceTarget,
                "lowPriceTarget", lowPriceTarget,
                "totalAnalystCount", totalAnalystCount,
                "uniqueAnalystCount", uniqueAnalystCount,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends ApiAggregateRating> aggregateRatings = Optional.empty();
 
        private Optional<String> aggregateType = Optional.empty();
 
        private Optional<Double> consensusPriceTarget = Optional.empty();
 
        private Optional<String> consensusRating = Optional.empty();
 
        private Optional<Double> consensusRatingVal = Optional.empty();
 
        private Optional<Double> highPriceTarget = Optional.empty();
 
        private Optional<Double> lowPriceTarget = Optional.empty();
 
        private Optional<Long> totalAnalystCount = Optional.empty();
 
        private Optional<Long> uniqueAnalystCount = Optional.empty();
 
        private Optional<String> updatedAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder aggregateRatings(ApiAggregateRating aggregateRatings) {
            Utils.checkNotNull(aggregateRatings, "aggregateRatings");
            this.aggregateRatings = Optional.ofNullable(aggregateRatings);
            return this;
        }

        public Builder aggregateRatings(Optional<? extends ApiAggregateRating> aggregateRatings) {
            Utils.checkNotNull(aggregateRatings, "aggregateRatings");
            this.aggregateRatings = aggregateRatings;
            return this;
        }

        public Builder aggregateType(String aggregateType) {
            Utils.checkNotNull(aggregateType, "aggregateType");
            this.aggregateType = Optional.ofNullable(aggregateType);
            return this;
        }

        public Builder aggregateType(Optional<String> aggregateType) {
            Utils.checkNotNull(aggregateType, "aggregateType");
            this.aggregateType = aggregateType;
            return this;
        }

        public Builder consensusPriceTarget(double consensusPriceTarget) {
            Utils.checkNotNull(consensusPriceTarget, "consensusPriceTarget");
            this.consensusPriceTarget = Optional.ofNullable(consensusPriceTarget);
            return this;
        }

        public Builder consensusPriceTarget(Optional<Double> consensusPriceTarget) {
            Utils.checkNotNull(consensusPriceTarget, "consensusPriceTarget");
            this.consensusPriceTarget = consensusPriceTarget;
            return this;
        }

        public Builder consensusRating(String consensusRating) {
            Utils.checkNotNull(consensusRating, "consensusRating");
            this.consensusRating = Optional.ofNullable(consensusRating);
            return this;
        }

        public Builder consensusRating(Optional<String> consensusRating) {
            Utils.checkNotNull(consensusRating, "consensusRating");
            this.consensusRating = consensusRating;
            return this;
        }

        public Builder consensusRatingVal(double consensusRatingVal) {
            Utils.checkNotNull(consensusRatingVal, "consensusRatingVal");
            this.consensusRatingVal = Optional.ofNullable(consensusRatingVal);
            return this;
        }

        public Builder consensusRatingVal(Optional<Double> consensusRatingVal) {
            Utils.checkNotNull(consensusRatingVal, "consensusRatingVal");
            this.consensusRatingVal = consensusRatingVal;
            return this;
        }

        public Builder highPriceTarget(double highPriceTarget) {
            Utils.checkNotNull(highPriceTarget, "highPriceTarget");
            this.highPriceTarget = Optional.ofNullable(highPriceTarget);
            return this;
        }

        public Builder highPriceTarget(Optional<Double> highPriceTarget) {
            Utils.checkNotNull(highPriceTarget, "highPriceTarget");
            this.highPriceTarget = highPriceTarget;
            return this;
        }

        public Builder lowPriceTarget(double lowPriceTarget) {
            Utils.checkNotNull(lowPriceTarget, "lowPriceTarget");
            this.lowPriceTarget = Optional.ofNullable(lowPriceTarget);
            return this;
        }

        public Builder lowPriceTarget(Optional<Double> lowPriceTarget) {
            Utils.checkNotNull(lowPriceTarget, "lowPriceTarget");
            this.lowPriceTarget = lowPriceTarget;
            return this;
        }

        public Builder totalAnalystCount(long totalAnalystCount) {
            Utils.checkNotNull(totalAnalystCount, "totalAnalystCount");
            this.totalAnalystCount = Optional.ofNullable(totalAnalystCount);
            return this;
        }

        public Builder totalAnalystCount(Optional<Long> totalAnalystCount) {
            Utils.checkNotNull(totalAnalystCount, "totalAnalystCount");
            this.totalAnalystCount = totalAnalystCount;
            return this;
        }

        public Builder uniqueAnalystCount(long uniqueAnalystCount) {
            Utils.checkNotNull(uniqueAnalystCount, "uniqueAnalystCount");
            this.uniqueAnalystCount = Optional.ofNullable(uniqueAnalystCount);
            return this;
        }

        public Builder uniqueAnalystCount(Optional<Long> uniqueAnalystCount) {
            Utils.checkNotNull(uniqueAnalystCount, "uniqueAnalystCount");
            this.uniqueAnalystCount = uniqueAnalystCount;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<String> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public ApiConsensusRating build() {
            return new ApiConsensusRating(
                aggregateRatings,
                aggregateType,
                consensusPriceTarget,
                consensusRating,
                consensusRatingVal,
                highPriceTarget,
                lowPriceTarget,
                totalAnalystCount,
                uniqueAnalystCount,
                updatedAt);
        }
    }
}

