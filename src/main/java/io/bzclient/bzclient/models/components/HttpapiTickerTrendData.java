/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class HttpapiTickerTrendData {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exchange")
    private Optional<String> exchange;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metrics")
    private Optional<? extends List<HttpapiTickerTrendMetrics>> metrics;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticker")
    private Optional<String> ticker;

    @JsonCreator
    public HttpapiTickerTrendData(
            @JsonProperty("exchange") Optional<String> exchange,
            @JsonProperty("metrics") Optional<? extends List<HttpapiTickerTrendMetrics>> metrics,
            @JsonProperty("ticker") Optional<String> ticker) {
        Utils.checkNotNull(exchange, "exchange");
        Utils.checkNotNull(metrics, "metrics");
        Utils.checkNotNull(ticker, "ticker");
        this.exchange = exchange;
        this.metrics = metrics;
        this.ticker = ticker;
    }
    
    public HttpapiTickerTrendData() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> exchange() {
        return exchange;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<HttpapiTickerTrendMetrics>> metrics() {
        return (Optional<List<HttpapiTickerTrendMetrics>>) metrics;
    }

    @JsonIgnore
    public Optional<String> ticker() {
        return ticker;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HttpapiTickerTrendData withExchange(String exchange) {
        Utils.checkNotNull(exchange, "exchange");
        this.exchange = Optional.ofNullable(exchange);
        return this;
    }

    public HttpapiTickerTrendData withExchange(Optional<String> exchange) {
        Utils.checkNotNull(exchange, "exchange");
        this.exchange = exchange;
        return this;
    }

    public HttpapiTickerTrendData withMetrics(List<HttpapiTickerTrendMetrics> metrics) {
        Utils.checkNotNull(metrics, "metrics");
        this.metrics = Optional.ofNullable(metrics);
        return this;
    }

    public HttpapiTickerTrendData withMetrics(Optional<? extends List<HttpapiTickerTrendMetrics>> metrics) {
        Utils.checkNotNull(metrics, "metrics");
        this.metrics = metrics;
        return this;
    }

    public HttpapiTickerTrendData withTicker(String ticker) {
        Utils.checkNotNull(ticker, "ticker");
        this.ticker = Optional.ofNullable(ticker);
        return this;
    }

    public HttpapiTickerTrendData withTicker(Optional<String> ticker) {
        Utils.checkNotNull(ticker, "ticker");
        this.ticker = ticker;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HttpapiTickerTrendData other = (HttpapiTickerTrendData) o;
        return 
            Objects.deepEquals(this.exchange, other.exchange) &&
            Objects.deepEquals(this.metrics, other.metrics) &&
            Objects.deepEquals(this.ticker, other.ticker);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            exchange,
            metrics,
            ticker);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HttpapiTickerTrendData.class,
                "exchange", exchange,
                "metrics", metrics,
                "ticker", ticker);
    }
    
    public final static class Builder {
 
        private Optional<String> exchange = Optional.empty();
 
        private Optional<? extends List<HttpapiTickerTrendMetrics>> metrics = Optional.empty();
 
        private Optional<String> ticker = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder exchange(String exchange) {
            Utils.checkNotNull(exchange, "exchange");
            this.exchange = Optional.ofNullable(exchange);
            return this;
        }

        public Builder exchange(Optional<String> exchange) {
            Utils.checkNotNull(exchange, "exchange");
            this.exchange = exchange;
            return this;
        }

        public Builder metrics(List<HttpapiTickerTrendMetrics> metrics) {
            Utils.checkNotNull(metrics, "metrics");
            this.metrics = Optional.ofNullable(metrics);
            return this;
        }

        public Builder metrics(Optional<? extends List<HttpapiTickerTrendMetrics>> metrics) {
            Utils.checkNotNull(metrics, "metrics");
            this.metrics = metrics;
            return this;
        }

        public Builder ticker(String ticker) {
            Utils.checkNotNull(ticker, "ticker");
            this.ticker = Optional.ofNullable(ticker);
            return this;
        }

        public Builder ticker(Optional<String> ticker) {
            Utils.checkNotNull(ticker, "ticker");
            this.ticker = ticker;
            return this;
        }
        
        public HttpapiTickerTrendData build() {
            return new HttpapiTickerTrendData(
                exchange,
                metrics,
                ticker);
        }
    }
}

