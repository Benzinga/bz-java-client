/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class HttpapiTrendingTickersListData {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pct_chg")
    private Optional<Long> pctChg;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security")
    private Optional<? extends HttpapiSecurity> security;

    @JsonCreator
    public HttpapiTrendingTickersListData(
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("pct_chg") Optional<Long> pctChg,
            @JsonProperty("security") Optional<? extends HttpapiSecurity> security) {
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(pctChg, "pctChg");
        Utils.checkNotNull(security, "security");
        this.count = count;
        this.pctChg = pctChg;
        this.security = security;
    }
    
    public HttpapiTrendingTickersListData() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    @JsonIgnore
    public Optional<Long> pctChg() {
        return pctChg;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HttpapiSecurity> security() {
        return (Optional<HttpapiSecurity>) security;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HttpapiTrendingTickersListData withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    public HttpapiTrendingTickersListData withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    public HttpapiTrendingTickersListData withPctChg(long pctChg) {
        Utils.checkNotNull(pctChg, "pctChg");
        this.pctChg = Optional.ofNullable(pctChg);
        return this;
    }

    public HttpapiTrendingTickersListData withPctChg(Optional<Long> pctChg) {
        Utils.checkNotNull(pctChg, "pctChg");
        this.pctChg = pctChg;
        return this;
    }

    public HttpapiTrendingTickersListData withSecurity(HttpapiSecurity security) {
        Utils.checkNotNull(security, "security");
        this.security = Optional.ofNullable(security);
        return this;
    }

    public HttpapiTrendingTickersListData withSecurity(Optional<? extends HttpapiSecurity> security) {
        Utils.checkNotNull(security, "security");
        this.security = security;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HttpapiTrendingTickersListData other = (HttpapiTrendingTickersListData) o;
        return 
            Objects.deepEquals(this.count, other.count) &&
            Objects.deepEquals(this.pctChg, other.pctChg) &&
            Objects.deepEquals(this.security, other.security);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            count,
            pctChg,
            security);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HttpapiTrendingTickersListData.class,
                "count", count,
                "pctChg", pctChg,
                "security", security);
    }
    
    public final static class Builder {
 
        private Optional<Long> count = Optional.empty();
 
        private Optional<Long> pctChg = Optional.empty();
 
        private Optional<? extends HttpapiSecurity> security = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        public Builder pctChg(long pctChg) {
            Utils.checkNotNull(pctChg, "pctChg");
            this.pctChg = Optional.ofNullable(pctChg);
            return this;
        }

        public Builder pctChg(Optional<Long> pctChg) {
            Utils.checkNotNull(pctChg, "pctChg");
            this.pctChg = pctChg;
            return this;
        }

        public Builder security(HttpapiSecurity security) {
            Utils.checkNotNull(security, "security");
            this.security = Optional.ofNullable(security);
            return this;
        }

        public Builder security(Optional<? extends HttpapiSecurity> security) {
            Utils.checkNotNull(security, "security");
            this.security = security;
            return this;
        }
        
        public HttpapiTrendingTickersListData build() {
            return new HttpapiTrendingTickersListData(
                count,
                pctChg,
                security);
        }
    }
}

