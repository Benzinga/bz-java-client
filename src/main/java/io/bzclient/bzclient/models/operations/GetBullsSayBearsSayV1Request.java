/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.bzclient.bzclient.utils.SpeakeasyMetadata;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class GetBullsSayBearsSayV1Request {

    /**
     * Symbols
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=symbols")
    private Optional<String> symbols;

    @JsonCreator
    public GetBullsSayBearsSayV1Request(
            Optional<String> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = symbols;
    }
    
    public GetBullsSayBearsSayV1Request() {
        this(Optional.empty());
    }

    /**
     * Symbols
     */
    @JsonIgnore
    public Optional<String> symbols() {
        return symbols;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Symbols
     */
    public GetBullsSayBearsSayV1Request withSymbols(String symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = Optional.ofNullable(symbols);
        return this;
    }

    /**
     * Symbols
     */
    public GetBullsSayBearsSayV1Request withSymbols(Optional<String> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = symbols;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetBullsSayBearsSayV1Request other = (GetBullsSayBearsSayV1Request) o;
        return 
            Objects.deepEquals(this.symbols, other.symbols);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            symbols);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetBullsSayBearsSayV1Request.class,
                "symbols", symbols);
    }
    
    public final static class Builder {
 
        private Optional<String> symbols = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Symbols
         */
        public Builder symbols(String symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = Optional.ofNullable(symbols);
            return this;
        }

        /**
         * Symbols
         */
        public Builder symbols(Optional<String> symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = symbols;
            return this;
        }
        
        public GetBullsSayBearsSayV1Request build() {
            return new GetBullsSayBearsSayV1Request(
                symbols);
        }
    }
}

