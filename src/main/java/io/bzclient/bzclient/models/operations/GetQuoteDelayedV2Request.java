/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.bzclient.bzclient.utils.SpeakeasyMetadata;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class GetQuoteDelayedV2Request {

    /**
     * Comma separated list of symbols
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=symbols")
    private Optional<String> symbols;

    /**
     * ISIN of the security
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=isin")
    private Optional<String> isin;

    /**
     * CIK of the security
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cik")
    private Optional<String> cik;

    @JsonCreator
    public GetQuoteDelayedV2Request(
            Optional<String> symbols,
            Optional<String> isin,
            Optional<String> cik) {
        Utils.checkNotNull(symbols, "symbols");
        Utils.checkNotNull(isin, "isin");
        Utils.checkNotNull(cik, "cik");
        this.symbols = symbols;
        this.isin = isin;
        this.cik = cik;
    }
    
    public GetQuoteDelayedV2Request() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Comma separated list of symbols
     */
    @JsonIgnore
    public Optional<String> symbols() {
        return symbols;
    }

    /**
     * ISIN of the security
     */
    @JsonIgnore
    public Optional<String> isin() {
        return isin;
    }

    /**
     * CIK of the security
     */
    @JsonIgnore
    public Optional<String> cik() {
        return cik;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Comma separated list of symbols
     */
    public GetQuoteDelayedV2Request withSymbols(String symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = Optional.ofNullable(symbols);
        return this;
    }

    /**
     * Comma separated list of symbols
     */
    public GetQuoteDelayedV2Request withSymbols(Optional<String> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = symbols;
        return this;
    }

    /**
     * ISIN of the security
     */
    public GetQuoteDelayedV2Request withIsin(String isin) {
        Utils.checkNotNull(isin, "isin");
        this.isin = Optional.ofNullable(isin);
        return this;
    }

    /**
     * ISIN of the security
     */
    public GetQuoteDelayedV2Request withIsin(Optional<String> isin) {
        Utils.checkNotNull(isin, "isin");
        this.isin = isin;
        return this;
    }

    /**
     * CIK of the security
     */
    public GetQuoteDelayedV2Request withCik(String cik) {
        Utils.checkNotNull(cik, "cik");
        this.cik = Optional.ofNullable(cik);
        return this;
    }

    /**
     * CIK of the security
     */
    public GetQuoteDelayedV2Request withCik(Optional<String> cik) {
        Utils.checkNotNull(cik, "cik");
        this.cik = cik;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetQuoteDelayedV2Request other = (GetQuoteDelayedV2Request) o;
        return 
            Objects.deepEquals(this.symbols, other.symbols) &&
            Objects.deepEquals(this.isin, other.isin) &&
            Objects.deepEquals(this.cik, other.cik);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            symbols,
            isin,
            cik);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetQuoteDelayedV2Request.class,
                "symbols", symbols,
                "isin", isin,
                "cik", cik);
    }
    
    public final static class Builder {
 
        private Optional<String> symbols = Optional.empty();
 
        private Optional<String> isin = Optional.empty();
 
        private Optional<String> cik = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Comma separated list of symbols
         */
        public Builder symbols(String symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = Optional.ofNullable(symbols);
            return this;
        }

        /**
         * Comma separated list of symbols
         */
        public Builder symbols(Optional<String> symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = symbols;
            return this;
        }

        /**
         * ISIN of the security
         */
        public Builder isin(String isin) {
            Utils.checkNotNull(isin, "isin");
            this.isin = Optional.ofNullable(isin);
            return this;
        }

        /**
         * ISIN of the security
         */
        public Builder isin(Optional<String> isin) {
            Utils.checkNotNull(isin, "isin");
            this.isin = isin;
            return this;
        }

        /**
         * CIK of the security
         */
        public Builder cik(String cik) {
            Utils.checkNotNull(cik, "cik");
            this.cik = Optional.ofNullable(cik);
            return this;
        }

        /**
         * CIK of the security
         */
        public Builder cik(Optional<String> cik) {
            Utils.checkNotNull(cik, "cik");
            this.cik = cik;
            return this;
        }
        
        public GetQuoteDelayedV2Request build() {
            return new GetQuoteDelayedV2Request(
                symbols,
                isin,
                cik);
        }
    }
}

