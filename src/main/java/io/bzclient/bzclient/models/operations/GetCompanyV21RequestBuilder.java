/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.operations;

import io.bzclient.bzclient.utils.Options;
import io.bzclient.bzclient.utils.RetryConfig;
import io.bzclient.bzclient.utils.Utils;
import java.lang.String;
import java.util.Optional;

public class GetCompanyV21RequestBuilder {

    private String symbols;
    private Optional<String> asOf = Optional.empty();
    private Optional<String> period = Optional.empty();
    private Optional<String> reportType = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKMethodInterfaces.MethodCallGetCompanyV21 sdk;

    public GetCompanyV21RequestBuilder(SDKMethodInterfaces.MethodCallGetCompanyV21 sdk) {
        this.sdk = sdk;
    }

    public GetCompanyV21RequestBuilder symbols(String symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = symbols;
        return this;
    }
                
    public GetCompanyV21RequestBuilder asOf(String asOf) {
        Utils.checkNotNull(asOf, "asOf");
        this.asOf = Optional.of(asOf);
        return this;
    }

    public GetCompanyV21RequestBuilder asOf(Optional<String> asOf) {
        Utils.checkNotNull(asOf, "asOf");
        this.asOf = asOf;
        return this;
    }
                
    public GetCompanyV21RequestBuilder period(String period) {
        Utils.checkNotNull(period, "period");
        this.period = Optional.of(period);
        return this;
    }

    public GetCompanyV21RequestBuilder period(Optional<String> period) {
        Utils.checkNotNull(period, "period");
        this.period = period;
        return this;
    }
                
    public GetCompanyV21RequestBuilder reportType(String reportType) {
        Utils.checkNotNull(reportType, "reportType");
        this.reportType = Optional.of(reportType);
        return this;
    }

    public GetCompanyV21RequestBuilder reportType(Optional<String> reportType) {
        Utils.checkNotNull(reportType, "reportType");
        this.reportType = reportType;
        return this;
    }
                
    public GetCompanyV21RequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public GetCompanyV21RequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }

    public GetCompanyV21Response call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
                                                    .retryConfig(retryConfig)
                                                    .build());
        return sdk.getCompanyV21(
            symbols,
            asOf,
            period,
            reportType,
            options);
    }
}
