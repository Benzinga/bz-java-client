/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.bzclient.bzclient.utils.SpeakeasyMetadata;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class GetEarningsCallTranscriptsRequest {

    /**
     * Tickers
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=tickers")
    private Optional<? extends List<String>> tickers;

    /**
     * Call ID
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=call_id")
    private Optional<? extends List<String>> callId;

    /**
     * Page
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page Size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pagesize")
    private Optional<Long> pagesize;

    @JsonCreator
    public GetEarningsCallTranscriptsRequest(
            Optional<? extends List<String>> tickers,
            Optional<? extends List<String>> callId,
            Optional<Long> page,
            Optional<Long> pagesize) {
        Utils.checkNotNull(tickers, "tickers");
        Utils.checkNotNull(callId, "callId");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pagesize, "pagesize");
        this.tickers = tickers;
        this.callId = callId;
        this.page = page;
        this.pagesize = pagesize;
    }
    
    public GetEarningsCallTranscriptsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Tickers
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tickers() {
        return (Optional<List<String>>) tickers;
    }

    /**
     * Call ID
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> callId() {
        return (Optional<List<String>>) callId;
    }

    /**
     * Page
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page Size
     */
    @JsonIgnore
    public Optional<Long> pagesize() {
        return pagesize;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Tickers
     */
    public GetEarningsCallTranscriptsRequest withTickers(List<String> tickers) {
        Utils.checkNotNull(tickers, "tickers");
        this.tickers = Optional.ofNullable(tickers);
        return this;
    }

    /**
     * Tickers
     */
    public GetEarningsCallTranscriptsRequest withTickers(Optional<? extends List<String>> tickers) {
        Utils.checkNotNull(tickers, "tickers");
        this.tickers = tickers;
        return this;
    }

    /**
     * Call ID
     */
    public GetEarningsCallTranscriptsRequest withCallId(List<String> callId) {
        Utils.checkNotNull(callId, "callId");
        this.callId = Optional.ofNullable(callId);
        return this;
    }

    /**
     * Call ID
     */
    public GetEarningsCallTranscriptsRequest withCallId(Optional<? extends List<String>> callId) {
        Utils.checkNotNull(callId, "callId");
        this.callId = callId;
        return this;
    }

    /**
     * Page
     */
    public GetEarningsCallTranscriptsRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Page
     */
    public GetEarningsCallTranscriptsRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page Size
     */
    public GetEarningsCallTranscriptsRequest withPagesize(long pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = Optional.ofNullable(pagesize);
        return this;
    }

    /**
     * Page Size
     */
    public GetEarningsCallTranscriptsRequest withPagesize(Optional<Long> pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = pagesize;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetEarningsCallTranscriptsRequest other = (GetEarningsCallTranscriptsRequest) o;
        return 
            Objects.deepEquals(this.tickers, other.tickers) &&
            Objects.deepEquals(this.callId, other.callId) &&
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pagesize, other.pagesize);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            tickers,
            callId,
            page,
            pagesize);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetEarningsCallTranscriptsRequest.class,
                "tickers", tickers,
                "callId", callId,
                "page", page,
                "pagesize", pagesize);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> tickers = Optional.empty();
 
        private Optional<? extends List<String>> callId = Optional.empty();
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> pagesize = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Tickers
         */
        public Builder tickers(List<String> tickers) {
            Utils.checkNotNull(tickers, "tickers");
            this.tickers = Optional.ofNullable(tickers);
            return this;
        }

        /**
         * Tickers
         */
        public Builder tickers(Optional<? extends List<String>> tickers) {
            Utils.checkNotNull(tickers, "tickers");
            this.tickers = tickers;
            return this;
        }

        /**
         * Call ID
         */
        public Builder callId(List<String> callId) {
            Utils.checkNotNull(callId, "callId");
            this.callId = Optional.ofNullable(callId);
            return this;
        }

        /**
         * Call ID
         */
        public Builder callId(Optional<? extends List<String>> callId) {
            Utils.checkNotNull(callId, "callId");
            this.callId = callId;
            return this;
        }

        /**
         * Page
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Page Size
         */
        public Builder pagesize(long pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = Optional.ofNullable(pagesize);
            return this;
        }

        /**
         * Page Size
         */
        public Builder pagesize(Optional<Long> pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = pagesize;
            return this;
        }
        
        public GetEarningsCallTranscriptsRequest build() {
            return new GetEarningsCallTranscriptsRequest(
                tickers,
                callId,
                page,
                pagesize);
        }
    }
}

