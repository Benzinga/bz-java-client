/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.bzclient.bzclient.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.bzclient.bzclient.utils.SpeakeasyMetadata;
import io.bzclient.bzclient.utils.Utils;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;


public class GetDividendsV22Request {

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pagesize")
    private Optional<Long> pagesize;

    /**
     * Date in YYYY-MM-DD format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[date]")
    private Optional<LocalDate> parametersDate;

    /**
     * Start date in YYYY-MM-DD format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[date_from]")
    private Optional<LocalDate> parametersDateFrom;

    /**
     * End date in YYYY-MM-DD format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[date_to]")
    private Optional<LocalDate> parametersDateTo;

    /**
     * Date sort order
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[date_sort]")
    private Optional<? extends ParametersDateSort> parametersDateSort;

    /**
     * Dividend yield operation
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[dividend_yield_operation]")
    private Optional<String> parametersDividendYieldOperation;

    /**
     * Dividend yield
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[dividend_yield]")
    private Optional<Double> parametersDividendYield;

    /**
     * Importance
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[importance]")
    private Optional<? extends ParametersImportance> parametersImportance;

    /**
     * Tickers
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[tickers]")
    private Optional<String> parametersTickers;

    /**
     * Updated time in Unix format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[updated]")
    private Optional<String> parametersUpdated;

    @JsonCreator
    public GetDividendsV22Request(
            Optional<Long> page,
            Optional<Long> pagesize,
            Optional<LocalDate> parametersDate,
            Optional<LocalDate> parametersDateFrom,
            Optional<LocalDate> parametersDateTo,
            Optional<? extends ParametersDateSort> parametersDateSort,
            Optional<String> parametersDividendYieldOperation,
            Optional<Double> parametersDividendYield,
            Optional<? extends ParametersImportance> parametersImportance,
            Optional<String> parametersTickers,
            Optional<String> parametersUpdated) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pagesize, "pagesize");
        Utils.checkNotNull(parametersDate, "parametersDate");
        Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
        Utils.checkNotNull(parametersDateTo, "parametersDateTo");
        Utils.checkNotNull(parametersDateSort, "parametersDateSort");
        Utils.checkNotNull(parametersDividendYieldOperation, "parametersDividendYieldOperation");
        Utils.checkNotNull(parametersDividendYield, "parametersDividendYield");
        Utils.checkNotNull(parametersImportance, "parametersImportance");
        Utils.checkNotNull(parametersTickers, "parametersTickers");
        Utils.checkNotNull(parametersUpdated, "parametersUpdated");
        this.page = page;
        this.pagesize = pagesize;
        this.parametersDate = parametersDate;
        this.parametersDateFrom = parametersDateFrom;
        this.parametersDateTo = parametersDateTo;
        this.parametersDateSort = parametersDateSort;
        this.parametersDividendYieldOperation = parametersDividendYieldOperation;
        this.parametersDividendYield = parametersDividendYield;
        this.parametersImportance = parametersImportance;
        this.parametersTickers = parametersTickers;
        this.parametersUpdated = parametersUpdated;
    }
    
    public GetDividendsV22Request() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> pagesize() {
        return pagesize;
    }

    /**
     * Date in YYYY-MM-DD format
     */
    @JsonIgnore
    public Optional<LocalDate> parametersDate() {
        return parametersDate;
    }

    /**
     * Start date in YYYY-MM-DD format
     */
    @JsonIgnore
    public Optional<LocalDate> parametersDateFrom() {
        return parametersDateFrom;
    }

    /**
     * End date in YYYY-MM-DD format
     */
    @JsonIgnore
    public Optional<LocalDate> parametersDateTo() {
        return parametersDateTo;
    }

    /**
     * Date sort order
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ParametersDateSort> parametersDateSort() {
        return (Optional<ParametersDateSort>) parametersDateSort;
    }

    /**
     * Dividend yield operation
     */
    @JsonIgnore
    public Optional<String> parametersDividendYieldOperation() {
        return parametersDividendYieldOperation;
    }

    /**
     * Dividend yield
     */
    @JsonIgnore
    public Optional<Double> parametersDividendYield() {
        return parametersDividendYield;
    }

    /**
     * Importance
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ParametersImportance> parametersImportance() {
        return (Optional<ParametersImportance>) parametersImportance;
    }

    /**
     * Tickers
     */
    @JsonIgnore
    public Optional<String> parametersTickers() {
        return parametersTickers;
    }

    /**
     * Updated time in Unix format
     */
    @JsonIgnore
    public Optional<String> parametersUpdated() {
        return parametersUpdated;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Page number
     */
    public GetDividendsV22Request withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Page number
     */
    public GetDividendsV22Request withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetDividendsV22Request withPagesize(long pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = Optional.ofNullable(pagesize);
        return this;
    }

    /**
     * Page size
     */
    public GetDividendsV22Request withPagesize(Optional<Long> pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = pagesize;
        return this;
    }

    /**
     * Date in YYYY-MM-DD format
     */
    public GetDividendsV22Request withParametersDate(LocalDate parametersDate) {
        Utils.checkNotNull(parametersDate, "parametersDate");
        this.parametersDate = Optional.ofNullable(parametersDate);
        return this;
    }

    /**
     * Date in YYYY-MM-DD format
     */
    public GetDividendsV22Request withParametersDate(Optional<LocalDate> parametersDate) {
        Utils.checkNotNull(parametersDate, "parametersDate");
        this.parametersDate = parametersDate;
        return this;
    }

    /**
     * Start date in YYYY-MM-DD format
     */
    public GetDividendsV22Request withParametersDateFrom(LocalDate parametersDateFrom) {
        Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
        this.parametersDateFrom = Optional.ofNullable(parametersDateFrom);
        return this;
    }

    /**
     * Start date in YYYY-MM-DD format
     */
    public GetDividendsV22Request withParametersDateFrom(Optional<LocalDate> parametersDateFrom) {
        Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
        this.parametersDateFrom = parametersDateFrom;
        return this;
    }

    /**
     * End date in YYYY-MM-DD format
     */
    public GetDividendsV22Request withParametersDateTo(LocalDate parametersDateTo) {
        Utils.checkNotNull(parametersDateTo, "parametersDateTo");
        this.parametersDateTo = Optional.ofNullable(parametersDateTo);
        return this;
    }

    /**
     * End date in YYYY-MM-DD format
     */
    public GetDividendsV22Request withParametersDateTo(Optional<LocalDate> parametersDateTo) {
        Utils.checkNotNull(parametersDateTo, "parametersDateTo");
        this.parametersDateTo = parametersDateTo;
        return this;
    }

    /**
     * Date sort order
     */
    public GetDividendsV22Request withParametersDateSort(ParametersDateSort parametersDateSort) {
        Utils.checkNotNull(parametersDateSort, "parametersDateSort");
        this.parametersDateSort = Optional.ofNullable(parametersDateSort);
        return this;
    }

    /**
     * Date sort order
     */
    public GetDividendsV22Request withParametersDateSort(Optional<? extends ParametersDateSort> parametersDateSort) {
        Utils.checkNotNull(parametersDateSort, "parametersDateSort");
        this.parametersDateSort = parametersDateSort;
        return this;
    }

    /**
     * Dividend yield operation
     */
    public GetDividendsV22Request withParametersDividendYieldOperation(String parametersDividendYieldOperation) {
        Utils.checkNotNull(parametersDividendYieldOperation, "parametersDividendYieldOperation");
        this.parametersDividendYieldOperation = Optional.ofNullable(parametersDividendYieldOperation);
        return this;
    }

    /**
     * Dividend yield operation
     */
    public GetDividendsV22Request withParametersDividendYieldOperation(Optional<String> parametersDividendYieldOperation) {
        Utils.checkNotNull(parametersDividendYieldOperation, "parametersDividendYieldOperation");
        this.parametersDividendYieldOperation = parametersDividendYieldOperation;
        return this;
    }

    /**
     * Dividend yield
     */
    public GetDividendsV22Request withParametersDividendYield(double parametersDividendYield) {
        Utils.checkNotNull(parametersDividendYield, "parametersDividendYield");
        this.parametersDividendYield = Optional.ofNullable(parametersDividendYield);
        return this;
    }

    /**
     * Dividend yield
     */
    public GetDividendsV22Request withParametersDividendYield(Optional<Double> parametersDividendYield) {
        Utils.checkNotNull(parametersDividendYield, "parametersDividendYield");
        this.parametersDividendYield = parametersDividendYield;
        return this;
    }

    /**
     * Importance
     */
    public GetDividendsV22Request withParametersImportance(ParametersImportance parametersImportance) {
        Utils.checkNotNull(parametersImportance, "parametersImportance");
        this.parametersImportance = Optional.ofNullable(parametersImportance);
        return this;
    }

    /**
     * Importance
     */
    public GetDividendsV22Request withParametersImportance(Optional<? extends ParametersImportance> parametersImportance) {
        Utils.checkNotNull(parametersImportance, "parametersImportance");
        this.parametersImportance = parametersImportance;
        return this;
    }

    /**
     * Tickers
     */
    public GetDividendsV22Request withParametersTickers(String parametersTickers) {
        Utils.checkNotNull(parametersTickers, "parametersTickers");
        this.parametersTickers = Optional.ofNullable(parametersTickers);
        return this;
    }

    /**
     * Tickers
     */
    public GetDividendsV22Request withParametersTickers(Optional<String> parametersTickers) {
        Utils.checkNotNull(parametersTickers, "parametersTickers");
        this.parametersTickers = parametersTickers;
        return this;
    }

    /**
     * Updated time in Unix format
     */
    public GetDividendsV22Request withParametersUpdated(String parametersUpdated) {
        Utils.checkNotNull(parametersUpdated, "parametersUpdated");
        this.parametersUpdated = Optional.ofNullable(parametersUpdated);
        return this;
    }

    /**
     * Updated time in Unix format
     */
    public GetDividendsV22Request withParametersUpdated(Optional<String> parametersUpdated) {
        Utils.checkNotNull(parametersUpdated, "parametersUpdated");
        this.parametersUpdated = parametersUpdated;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDividendsV22Request other = (GetDividendsV22Request) o;
        return 
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pagesize, other.pagesize) &&
            Objects.deepEquals(this.parametersDate, other.parametersDate) &&
            Objects.deepEquals(this.parametersDateFrom, other.parametersDateFrom) &&
            Objects.deepEquals(this.parametersDateTo, other.parametersDateTo) &&
            Objects.deepEquals(this.parametersDateSort, other.parametersDateSort) &&
            Objects.deepEquals(this.parametersDividendYieldOperation, other.parametersDividendYieldOperation) &&
            Objects.deepEquals(this.parametersDividendYield, other.parametersDividendYield) &&
            Objects.deepEquals(this.parametersImportance, other.parametersImportance) &&
            Objects.deepEquals(this.parametersTickers, other.parametersTickers) &&
            Objects.deepEquals(this.parametersUpdated, other.parametersUpdated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            page,
            pagesize,
            parametersDate,
            parametersDateFrom,
            parametersDateTo,
            parametersDateSort,
            parametersDividendYieldOperation,
            parametersDividendYield,
            parametersImportance,
            parametersTickers,
            parametersUpdated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDividendsV22Request.class,
                "page", page,
                "pagesize", pagesize,
                "parametersDate", parametersDate,
                "parametersDateFrom", parametersDateFrom,
                "parametersDateTo", parametersDateTo,
                "parametersDateSort", parametersDateSort,
                "parametersDividendYieldOperation", parametersDividendYieldOperation,
                "parametersDividendYield", parametersDividendYield,
                "parametersImportance", parametersImportance,
                "parametersTickers", parametersTickers,
                "parametersUpdated", parametersUpdated);
    }
    
    public final static class Builder {
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> pagesize = Optional.empty();
 
        private Optional<LocalDate> parametersDate = Optional.empty();
 
        private Optional<LocalDate> parametersDateFrom = Optional.empty();
 
        private Optional<LocalDate> parametersDateTo = Optional.empty();
 
        private Optional<? extends ParametersDateSort> parametersDateSort = Optional.empty();
 
        private Optional<String> parametersDividendYieldOperation = Optional.empty();
 
        private Optional<Double> parametersDividendYield = Optional.empty();
 
        private Optional<? extends ParametersImportance> parametersImportance = Optional.empty();
 
        private Optional<String> parametersTickers = Optional.empty();
 
        private Optional<String> parametersUpdated = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Page size
         */
        public Builder pagesize(long pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = Optional.ofNullable(pagesize);
            return this;
        }

        /**
         * Page size
         */
        public Builder pagesize(Optional<Long> pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = pagesize;
            return this;
        }

        /**
         * Date in YYYY-MM-DD format
         */
        public Builder parametersDate(LocalDate parametersDate) {
            Utils.checkNotNull(parametersDate, "parametersDate");
            this.parametersDate = Optional.ofNullable(parametersDate);
            return this;
        }

        /**
         * Date in YYYY-MM-DD format
         */
        public Builder parametersDate(Optional<LocalDate> parametersDate) {
            Utils.checkNotNull(parametersDate, "parametersDate");
            this.parametersDate = parametersDate;
            return this;
        }

        /**
         * Start date in YYYY-MM-DD format
         */
        public Builder parametersDateFrom(LocalDate parametersDateFrom) {
            Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
            this.parametersDateFrom = Optional.ofNullable(parametersDateFrom);
            return this;
        }

        /**
         * Start date in YYYY-MM-DD format
         */
        public Builder parametersDateFrom(Optional<LocalDate> parametersDateFrom) {
            Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
            this.parametersDateFrom = parametersDateFrom;
            return this;
        }

        /**
         * End date in YYYY-MM-DD format
         */
        public Builder parametersDateTo(LocalDate parametersDateTo) {
            Utils.checkNotNull(parametersDateTo, "parametersDateTo");
            this.parametersDateTo = Optional.ofNullable(parametersDateTo);
            return this;
        }

        /**
         * End date in YYYY-MM-DD format
         */
        public Builder parametersDateTo(Optional<LocalDate> parametersDateTo) {
            Utils.checkNotNull(parametersDateTo, "parametersDateTo");
            this.parametersDateTo = parametersDateTo;
            return this;
        }

        /**
         * Date sort order
         */
        public Builder parametersDateSort(ParametersDateSort parametersDateSort) {
            Utils.checkNotNull(parametersDateSort, "parametersDateSort");
            this.parametersDateSort = Optional.ofNullable(parametersDateSort);
            return this;
        }

        /**
         * Date sort order
         */
        public Builder parametersDateSort(Optional<? extends ParametersDateSort> parametersDateSort) {
            Utils.checkNotNull(parametersDateSort, "parametersDateSort");
            this.parametersDateSort = parametersDateSort;
            return this;
        }

        /**
         * Dividend yield operation
         */
        public Builder parametersDividendYieldOperation(String parametersDividendYieldOperation) {
            Utils.checkNotNull(parametersDividendYieldOperation, "parametersDividendYieldOperation");
            this.parametersDividendYieldOperation = Optional.ofNullable(parametersDividendYieldOperation);
            return this;
        }

        /**
         * Dividend yield operation
         */
        public Builder parametersDividendYieldOperation(Optional<String> parametersDividendYieldOperation) {
            Utils.checkNotNull(parametersDividendYieldOperation, "parametersDividendYieldOperation");
            this.parametersDividendYieldOperation = parametersDividendYieldOperation;
            return this;
        }

        /**
         * Dividend yield
         */
        public Builder parametersDividendYield(double parametersDividendYield) {
            Utils.checkNotNull(parametersDividendYield, "parametersDividendYield");
            this.parametersDividendYield = Optional.ofNullable(parametersDividendYield);
            return this;
        }

        /**
         * Dividend yield
         */
        public Builder parametersDividendYield(Optional<Double> parametersDividendYield) {
            Utils.checkNotNull(parametersDividendYield, "parametersDividendYield");
            this.parametersDividendYield = parametersDividendYield;
            return this;
        }

        /**
         * Importance
         */
        public Builder parametersImportance(ParametersImportance parametersImportance) {
            Utils.checkNotNull(parametersImportance, "parametersImportance");
            this.parametersImportance = Optional.ofNullable(parametersImportance);
            return this;
        }

        /**
         * Importance
         */
        public Builder parametersImportance(Optional<? extends ParametersImportance> parametersImportance) {
            Utils.checkNotNull(parametersImportance, "parametersImportance");
            this.parametersImportance = parametersImportance;
            return this;
        }

        /**
         * Tickers
         */
        public Builder parametersTickers(String parametersTickers) {
            Utils.checkNotNull(parametersTickers, "parametersTickers");
            this.parametersTickers = Optional.ofNullable(parametersTickers);
            return this;
        }

        /**
         * Tickers
         */
        public Builder parametersTickers(Optional<String> parametersTickers) {
            Utils.checkNotNull(parametersTickers, "parametersTickers");
            this.parametersTickers = parametersTickers;
            return this;
        }

        /**
         * Updated time in Unix format
         */
        public Builder parametersUpdated(String parametersUpdated) {
            Utils.checkNotNull(parametersUpdated, "parametersUpdated");
            this.parametersUpdated = Optional.ofNullable(parametersUpdated);
            return this;
        }

        /**
         * Updated time in Unix format
         */
        public Builder parametersUpdated(Optional<String> parametersUpdated) {
            Utils.checkNotNull(parametersUpdated, "parametersUpdated");
            this.parametersUpdated = parametersUpdated;
            return this;
        }
        
        public GetDividendsV22Request build() {
            return new GetDividendsV22Request(
                page,
                pagesize,
                parametersDate,
                parametersDateFrom,
                parametersDateTo,
                parametersDateSort,
                parametersDividendYieldOperation,
                parametersDividendYield,
                parametersImportance,
                parametersTickers,
                parametersUpdated);
        }
    }
}

