/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.benzinga.bzclient.models.errors;

import com.benzinga.bzclient.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

@SuppressWarnings("serial")
public class ApiErrorResponse extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<String> text;

    @JsonCreator
    public ApiErrorResponse(
            @JsonProperty("text") Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
    }
    
    public ApiErrorResponse() {
        this(Optional.empty());
    }

    public Optional<String> text(){
        return text;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public ApiErrorResponse withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }
    
    public ApiErrorResponse withText(Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiErrorResponse other = (ApiErrorResponse) o;
        return
            Objects.deepEquals(this.text, other.text);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            text);
    }

    @Override
    public String toString() {
        return Utils.toString(ApiErrorResponse.class,
                "text", text);
    }

    public final static class Builder {

        private Optional<String> text = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }

        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }
        
        public Builder text(Optional<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        public ApiErrorResponse build() {
            return new ApiErrorResponse(
                text);
        }
    }
}
