/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.benzinga.bzclient.models.operations;


import com.benzinga.bzclient.utils.SpeakeasyMetadata;
import com.benzinga.bzclient.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;


public class GetConsensusRatingsV1Request {

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pagesize")
    private Optional<Long> pagesize;

    /**
     * Start date in YYYY-MM-DD format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[date_from]")
    private Optional<LocalDate> parametersDateFrom;

    /**
     * End date in YYYY-MM-DD format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[date_to]")
    private Optional<LocalDate> parametersDateTo;

    /**
     * Tickers
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[tickers]")
    private Optional<String> parametersTickers;

    /**
     * Simplify the ratings to Buy, Hold, Sell
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=simplify")
    private Optional<String> simplify;

    /**
     * Aggregate type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=aggregate_type")
    private Optional<? extends AggregateType> aggregateType;

    @JsonCreator
    public GetConsensusRatingsV1Request(
            Optional<Long> page,
            Optional<Long> pagesize,
            Optional<LocalDate> parametersDateFrom,
            Optional<LocalDate> parametersDateTo,
            Optional<String> parametersTickers,
            Optional<String> simplify,
            Optional<? extends AggregateType> aggregateType) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pagesize, "pagesize");
        Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
        Utils.checkNotNull(parametersDateTo, "parametersDateTo");
        Utils.checkNotNull(parametersTickers, "parametersTickers");
        Utils.checkNotNull(simplify, "simplify");
        Utils.checkNotNull(aggregateType, "aggregateType");
        this.page = page;
        this.pagesize = pagesize;
        this.parametersDateFrom = parametersDateFrom;
        this.parametersDateTo = parametersDateTo;
        this.parametersTickers = parametersTickers;
        this.simplify = simplify;
        this.aggregateType = aggregateType;
    }
    
    public GetConsensusRatingsV1Request() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> pagesize() {
        return pagesize;
    }

    /**
     * Start date in YYYY-MM-DD format
     */
    @JsonIgnore
    public Optional<LocalDate> parametersDateFrom() {
        return parametersDateFrom;
    }

    /**
     * End date in YYYY-MM-DD format
     */
    @JsonIgnore
    public Optional<LocalDate> parametersDateTo() {
        return parametersDateTo;
    }

    /**
     * Tickers
     */
    @JsonIgnore
    public Optional<String> parametersTickers() {
        return parametersTickers;
    }

    /**
     * Simplify the ratings to Buy, Hold, Sell
     */
    @JsonIgnore
    public Optional<String> simplify() {
        return simplify;
    }

    /**
     * Aggregate type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AggregateType> aggregateType() {
        return (Optional<AggregateType>) aggregateType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Page number
     */
    public GetConsensusRatingsV1Request withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Page number
     */
    public GetConsensusRatingsV1Request withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetConsensusRatingsV1Request withPagesize(long pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = Optional.ofNullable(pagesize);
        return this;
    }

    /**
     * Page size
     */
    public GetConsensusRatingsV1Request withPagesize(Optional<Long> pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = pagesize;
        return this;
    }

    /**
     * Start date in YYYY-MM-DD format
     */
    public GetConsensusRatingsV1Request withParametersDateFrom(LocalDate parametersDateFrom) {
        Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
        this.parametersDateFrom = Optional.ofNullable(parametersDateFrom);
        return this;
    }

    /**
     * Start date in YYYY-MM-DD format
     */
    public GetConsensusRatingsV1Request withParametersDateFrom(Optional<LocalDate> parametersDateFrom) {
        Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
        this.parametersDateFrom = parametersDateFrom;
        return this;
    }

    /**
     * End date in YYYY-MM-DD format
     */
    public GetConsensusRatingsV1Request withParametersDateTo(LocalDate parametersDateTo) {
        Utils.checkNotNull(parametersDateTo, "parametersDateTo");
        this.parametersDateTo = Optional.ofNullable(parametersDateTo);
        return this;
    }

    /**
     * End date in YYYY-MM-DD format
     */
    public GetConsensusRatingsV1Request withParametersDateTo(Optional<LocalDate> parametersDateTo) {
        Utils.checkNotNull(parametersDateTo, "parametersDateTo");
        this.parametersDateTo = parametersDateTo;
        return this;
    }

    /**
     * Tickers
     */
    public GetConsensusRatingsV1Request withParametersTickers(String parametersTickers) {
        Utils.checkNotNull(parametersTickers, "parametersTickers");
        this.parametersTickers = Optional.ofNullable(parametersTickers);
        return this;
    }

    /**
     * Tickers
     */
    public GetConsensusRatingsV1Request withParametersTickers(Optional<String> parametersTickers) {
        Utils.checkNotNull(parametersTickers, "parametersTickers");
        this.parametersTickers = parametersTickers;
        return this;
    }

    /**
     * Simplify the ratings to Buy, Hold, Sell
     */
    public GetConsensusRatingsV1Request withSimplify(String simplify) {
        Utils.checkNotNull(simplify, "simplify");
        this.simplify = Optional.ofNullable(simplify);
        return this;
    }

    /**
     * Simplify the ratings to Buy, Hold, Sell
     */
    public GetConsensusRatingsV1Request withSimplify(Optional<String> simplify) {
        Utils.checkNotNull(simplify, "simplify");
        this.simplify = simplify;
        return this;
    }

    /**
     * Aggregate type
     */
    public GetConsensusRatingsV1Request withAggregateType(AggregateType aggregateType) {
        Utils.checkNotNull(aggregateType, "aggregateType");
        this.aggregateType = Optional.ofNullable(aggregateType);
        return this;
    }

    /**
     * Aggregate type
     */
    public GetConsensusRatingsV1Request withAggregateType(Optional<? extends AggregateType> aggregateType) {
        Utils.checkNotNull(aggregateType, "aggregateType");
        this.aggregateType = aggregateType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetConsensusRatingsV1Request other = (GetConsensusRatingsV1Request) o;
        return 
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pagesize, other.pagesize) &&
            Objects.deepEquals(this.parametersDateFrom, other.parametersDateFrom) &&
            Objects.deepEquals(this.parametersDateTo, other.parametersDateTo) &&
            Objects.deepEquals(this.parametersTickers, other.parametersTickers) &&
            Objects.deepEquals(this.simplify, other.simplify) &&
            Objects.deepEquals(this.aggregateType, other.aggregateType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            page,
            pagesize,
            parametersDateFrom,
            parametersDateTo,
            parametersTickers,
            simplify,
            aggregateType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetConsensusRatingsV1Request.class,
                "page", page,
                "pagesize", pagesize,
                "parametersDateFrom", parametersDateFrom,
                "parametersDateTo", parametersDateTo,
                "parametersTickers", parametersTickers,
                "simplify", simplify,
                "aggregateType", aggregateType);
    }
    
    public final static class Builder {
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> pagesize = Optional.empty();
 
        private Optional<LocalDate> parametersDateFrom = Optional.empty();
 
        private Optional<LocalDate> parametersDateTo = Optional.empty();
 
        private Optional<String> parametersTickers = Optional.empty();
 
        private Optional<String> simplify = Optional.empty();
 
        private Optional<? extends AggregateType> aggregateType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Page size
         */
        public Builder pagesize(long pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = Optional.ofNullable(pagesize);
            return this;
        }

        /**
         * Page size
         */
        public Builder pagesize(Optional<Long> pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = pagesize;
            return this;
        }

        /**
         * Start date in YYYY-MM-DD format
         */
        public Builder parametersDateFrom(LocalDate parametersDateFrom) {
            Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
            this.parametersDateFrom = Optional.ofNullable(parametersDateFrom);
            return this;
        }

        /**
         * Start date in YYYY-MM-DD format
         */
        public Builder parametersDateFrom(Optional<LocalDate> parametersDateFrom) {
            Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
            this.parametersDateFrom = parametersDateFrom;
            return this;
        }

        /**
         * End date in YYYY-MM-DD format
         */
        public Builder parametersDateTo(LocalDate parametersDateTo) {
            Utils.checkNotNull(parametersDateTo, "parametersDateTo");
            this.parametersDateTo = Optional.ofNullable(parametersDateTo);
            return this;
        }

        /**
         * End date in YYYY-MM-DD format
         */
        public Builder parametersDateTo(Optional<LocalDate> parametersDateTo) {
            Utils.checkNotNull(parametersDateTo, "parametersDateTo");
            this.parametersDateTo = parametersDateTo;
            return this;
        }

        /**
         * Tickers
         */
        public Builder parametersTickers(String parametersTickers) {
            Utils.checkNotNull(parametersTickers, "parametersTickers");
            this.parametersTickers = Optional.ofNullable(parametersTickers);
            return this;
        }

        /**
         * Tickers
         */
        public Builder parametersTickers(Optional<String> parametersTickers) {
            Utils.checkNotNull(parametersTickers, "parametersTickers");
            this.parametersTickers = parametersTickers;
            return this;
        }

        /**
         * Simplify the ratings to Buy, Hold, Sell
         */
        public Builder simplify(String simplify) {
            Utils.checkNotNull(simplify, "simplify");
            this.simplify = Optional.ofNullable(simplify);
            return this;
        }

        /**
         * Simplify the ratings to Buy, Hold, Sell
         */
        public Builder simplify(Optional<String> simplify) {
            Utils.checkNotNull(simplify, "simplify");
            this.simplify = simplify;
            return this;
        }

        /**
         * Aggregate type
         */
        public Builder aggregateType(AggregateType aggregateType) {
            Utils.checkNotNull(aggregateType, "aggregateType");
            this.aggregateType = Optional.ofNullable(aggregateType);
            return this;
        }

        /**
         * Aggregate type
         */
        public Builder aggregateType(Optional<? extends AggregateType> aggregateType) {
            Utils.checkNotNull(aggregateType, "aggregateType");
            this.aggregateType = aggregateType;
            return this;
        }
        
        public GetConsensusRatingsV1Request build() {
            return new GetConsensusRatingsV1Request(
                page,
                pagesize,
                parametersDateFrom,
                parametersDateTo,
                parametersTickers,
                simplify,
                aggregateType);
        }
    }
}

