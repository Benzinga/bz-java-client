/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.benzinga.bzclient.models.operations;

import com.benzinga.bzclient.utils.Options;
import com.benzinga.bzclient.utils.RetryConfig;
import com.benzinga.bzclient.utils.Utils;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public class GetEarningsCallTranscriptsRequestBuilder {

    private Optional<? extends List<String>> tickers = Optional.empty();
    private Optional<? extends List<String>> callId = Optional.empty();
    private Optional<Long> page = Optional.empty();
    private Optional<Long> pagesize = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKMethodInterfaces.MethodCallGetEarningsCallTranscripts sdk;

    public GetEarningsCallTranscriptsRequestBuilder(SDKMethodInterfaces.MethodCallGetEarningsCallTranscripts sdk) {
        this.sdk = sdk;
    }
                
    public GetEarningsCallTranscriptsRequestBuilder tickers(List<String> tickers) {
        Utils.checkNotNull(tickers, "tickers");
        this.tickers = Optional.of(tickers);
        return this;
    }

    public GetEarningsCallTranscriptsRequestBuilder tickers(Optional<? extends List<String>> tickers) {
        Utils.checkNotNull(tickers, "tickers");
        this.tickers = tickers;
        return this;
    }
                
    public GetEarningsCallTranscriptsRequestBuilder callId(List<String> callId) {
        Utils.checkNotNull(callId, "callId");
        this.callId = Optional.of(callId);
        return this;
    }

    public GetEarningsCallTranscriptsRequestBuilder callId(Optional<? extends List<String>> callId) {
        Utils.checkNotNull(callId, "callId");
        this.callId = callId;
        return this;
    }
                
    public GetEarningsCallTranscriptsRequestBuilder page(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.of(page);
        return this;
    }

    public GetEarningsCallTranscriptsRequestBuilder page(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }
                
    public GetEarningsCallTranscriptsRequestBuilder pagesize(long pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = Optional.of(pagesize);
        return this;
    }

    public GetEarningsCallTranscriptsRequestBuilder pagesize(Optional<Long> pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = pagesize;
        return this;
    }
                
    public GetEarningsCallTranscriptsRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public GetEarningsCallTranscriptsRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }

    public GetEarningsCallTranscriptsResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
                                                    .retryConfig(retryConfig)
                                                    .build());
        return sdk.get(
            tickers,
            callId,
            page,
            pagesize,
            options);
    }
}
