/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.benzinga.bzclient.models.operations;


import com.benzinga.bzclient.utils.SpeakeasyMetadata;
import com.benzinga.bzclient.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class GetInsiderTransactionOwnerRequest {

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    private Optional<Long> pageSize;

    /**
     * Date from
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date_from")
    private Optional<Long> dateFrom;

    /**
     * Date to
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date_to")
    private Optional<Long> dateTo;

    /**
     * Updated since
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_since")
    private Optional<Long> updatedSince;

    /**
     * Date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date")
    private Optional<Long> date;

    /**
     * Chamber
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=chamber")
    private Optional<? extends GetInsiderTransactionOwnerQueryParamChamber> chamber;

    /**
     * Fields
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    private Optional<String> fields;

    /**
     * Search keys type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_keys_type")
    private Optional<? extends GetInsiderTransactionOwnerQueryParamSearchKeysType> searchKeysType;

    /**
     * Search keys
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_keys")
    private Optional<String> searchKeys;

    /**
     * Updated time in Unix format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated")
    private Optional<Long> updated;

    /**
     * Display
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=display")
    private Optional<? extends QueryParamDisplay> display;

    @JsonCreator
    public GetInsiderTransactionOwnerRequest(
            Optional<Long> page,
            Optional<Long> pageSize,
            Optional<Long> dateFrom,
            Optional<Long> dateTo,
            Optional<Long> updatedSince,
            Optional<Long> date,
            Optional<? extends GetInsiderTransactionOwnerQueryParamChamber> chamber,
            Optional<String> fields,
            Optional<? extends GetInsiderTransactionOwnerQueryParamSearchKeysType> searchKeysType,
            Optional<String> searchKeys,
            Optional<Long> updated,
            Optional<? extends QueryParamDisplay> display) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(dateFrom, "dateFrom");
        Utils.checkNotNull(dateTo, "dateTo");
        Utils.checkNotNull(updatedSince, "updatedSince");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(chamber, "chamber");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(searchKeysType, "searchKeysType");
        Utils.checkNotNull(searchKeys, "searchKeys");
        Utils.checkNotNull(updated, "updated");
        Utils.checkNotNull(display, "display");
        this.page = page;
        this.pageSize = pageSize;
        this.dateFrom = dateFrom;
        this.dateTo = dateTo;
        this.updatedSince = updatedSince;
        this.date = date;
        this.chamber = chamber;
        this.fields = fields;
        this.searchKeysType = searchKeysType;
        this.searchKeys = searchKeys;
        this.updated = updated;
        this.display = display;
    }
    
    public GetInsiderTransactionOwnerRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * Date from
     */
    @JsonIgnore
    public Optional<Long> dateFrom() {
        return dateFrom;
    }

    /**
     * Date to
     */
    @JsonIgnore
    public Optional<Long> dateTo() {
        return dateTo;
    }

    /**
     * Updated since
     */
    @JsonIgnore
    public Optional<Long> updatedSince() {
        return updatedSince;
    }

    /**
     * Date
     */
    @JsonIgnore
    public Optional<Long> date() {
        return date;
    }

    /**
     * Chamber
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetInsiderTransactionOwnerQueryParamChamber> chamber() {
        return (Optional<GetInsiderTransactionOwnerQueryParamChamber>) chamber;
    }

    /**
     * Fields
     */
    @JsonIgnore
    public Optional<String> fields() {
        return fields;
    }

    /**
     * Search keys type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetInsiderTransactionOwnerQueryParamSearchKeysType> searchKeysType() {
        return (Optional<GetInsiderTransactionOwnerQueryParamSearchKeysType>) searchKeysType;
    }

    /**
     * Search keys
     */
    @JsonIgnore
    public Optional<String> searchKeys() {
        return searchKeys;
    }

    /**
     * Updated time in Unix format
     */
    @JsonIgnore
    public Optional<Long> updated() {
        return updated;
    }

    /**
     * Display
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QueryParamDisplay> display() {
        return (Optional<QueryParamDisplay>) display;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Page number
     */
    public GetInsiderTransactionOwnerRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Page number
     */
    public GetInsiderTransactionOwnerRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetInsiderTransactionOwnerRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Page size
     */
    public GetInsiderTransactionOwnerRequest withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Date from
     */
    public GetInsiderTransactionOwnerRequest withDateFrom(long dateFrom) {
        Utils.checkNotNull(dateFrom, "dateFrom");
        this.dateFrom = Optional.ofNullable(dateFrom);
        return this;
    }

    /**
     * Date from
     */
    public GetInsiderTransactionOwnerRequest withDateFrom(Optional<Long> dateFrom) {
        Utils.checkNotNull(dateFrom, "dateFrom");
        this.dateFrom = dateFrom;
        return this;
    }

    /**
     * Date to
     */
    public GetInsiderTransactionOwnerRequest withDateTo(long dateTo) {
        Utils.checkNotNull(dateTo, "dateTo");
        this.dateTo = Optional.ofNullable(dateTo);
        return this;
    }

    /**
     * Date to
     */
    public GetInsiderTransactionOwnerRequest withDateTo(Optional<Long> dateTo) {
        Utils.checkNotNull(dateTo, "dateTo");
        this.dateTo = dateTo;
        return this;
    }

    /**
     * Updated since
     */
    public GetInsiderTransactionOwnerRequest withUpdatedSince(long updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }

    /**
     * Updated since
     */
    public GetInsiderTransactionOwnerRequest withUpdatedSince(Optional<Long> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }

    /**
     * Date
     */
    public GetInsiderTransactionOwnerRequest withDate(long date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    /**
     * Date
     */
    public GetInsiderTransactionOwnerRequest withDate(Optional<Long> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Chamber
     */
    public GetInsiderTransactionOwnerRequest withChamber(GetInsiderTransactionOwnerQueryParamChamber chamber) {
        Utils.checkNotNull(chamber, "chamber");
        this.chamber = Optional.ofNullable(chamber);
        return this;
    }

    /**
     * Chamber
     */
    public GetInsiderTransactionOwnerRequest withChamber(Optional<? extends GetInsiderTransactionOwnerQueryParamChamber> chamber) {
        Utils.checkNotNull(chamber, "chamber");
        this.chamber = chamber;
        return this;
    }

    /**
     * Fields
     */
    public GetInsiderTransactionOwnerRequest withFields(String fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }

    /**
     * Fields
     */
    public GetInsiderTransactionOwnerRequest withFields(Optional<String> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * Search keys type
     */
    public GetInsiderTransactionOwnerRequest withSearchKeysType(GetInsiderTransactionOwnerQueryParamSearchKeysType searchKeysType) {
        Utils.checkNotNull(searchKeysType, "searchKeysType");
        this.searchKeysType = Optional.ofNullable(searchKeysType);
        return this;
    }

    /**
     * Search keys type
     */
    public GetInsiderTransactionOwnerRequest withSearchKeysType(Optional<? extends GetInsiderTransactionOwnerQueryParamSearchKeysType> searchKeysType) {
        Utils.checkNotNull(searchKeysType, "searchKeysType");
        this.searchKeysType = searchKeysType;
        return this;
    }

    /**
     * Search keys
     */
    public GetInsiderTransactionOwnerRequest withSearchKeys(String searchKeys) {
        Utils.checkNotNull(searchKeys, "searchKeys");
        this.searchKeys = Optional.ofNullable(searchKeys);
        return this;
    }

    /**
     * Search keys
     */
    public GetInsiderTransactionOwnerRequest withSearchKeys(Optional<String> searchKeys) {
        Utils.checkNotNull(searchKeys, "searchKeys");
        this.searchKeys = searchKeys;
        return this;
    }

    /**
     * Updated time in Unix format
     */
    public GetInsiderTransactionOwnerRequest withUpdated(long updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = Optional.ofNullable(updated);
        return this;
    }

    /**
     * Updated time in Unix format
     */
    public GetInsiderTransactionOwnerRequest withUpdated(Optional<Long> updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = updated;
        return this;
    }

    /**
     * Display
     */
    public GetInsiderTransactionOwnerRequest withDisplay(QueryParamDisplay display) {
        Utils.checkNotNull(display, "display");
        this.display = Optional.ofNullable(display);
        return this;
    }

    /**
     * Display
     */
    public GetInsiderTransactionOwnerRequest withDisplay(Optional<? extends QueryParamDisplay> display) {
        Utils.checkNotNull(display, "display");
        this.display = display;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetInsiderTransactionOwnerRequest other = (GetInsiderTransactionOwnerRequest) o;
        return 
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.dateFrom, other.dateFrom) &&
            Objects.deepEquals(this.dateTo, other.dateTo) &&
            Objects.deepEquals(this.updatedSince, other.updatedSince) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.chamber, other.chamber) &&
            Objects.deepEquals(this.fields, other.fields) &&
            Objects.deepEquals(this.searchKeysType, other.searchKeysType) &&
            Objects.deepEquals(this.searchKeys, other.searchKeys) &&
            Objects.deepEquals(this.updated, other.updated) &&
            Objects.deepEquals(this.display, other.display);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            page,
            pageSize,
            dateFrom,
            dateTo,
            updatedSince,
            date,
            chamber,
            fields,
            searchKeysType,
            searchKeys,
            updated,
            display);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetInsiderTransactionOwnerRequest.class,
                "page", page,
                "pageSize", pageSize,
                "dateFrom", dateFrom,
                "dateTo", dateTo,
                "updatedSince", updatedSince,
                "date", date,
                "chamber", chamber,
                "fields", fields,
                "searchKeysType", searchKeysType,
                "searchKeys", searchKeys,
                "updated", updated,
                "display", display);
    }
    
    public final static class Builder {
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> pageSize = Optional.empty();
 
        private Optional<Long> dateFrom = Optional.empty();
 
        private Optional<Long> dateTo = Optional.empty();
 
        private Optional<Long> updatedSince = Optional.empty();
 
        private Optional<Long> date = Optional.empty();
 
        private Optional<? extends GetInsiderTransactionOwnerQueryParamChamber> chamber = Optional.empty();
 
        private Optional<String> fields = Optional.empty();
 
        private Optional<? extends GetInsiderTransactionOwnerQueryParamSearchKeysType> searchKeysType = Optional.empty();
 
        private Optional<String> searchKeys = Optional.empty();
 
        private Optional<Long> updated = Optional.empty();
 
        private Optional<? extends QueryParamDisplay> display = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Page size
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Page size
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Date from
         */
        public Builder dateFrom(long dateFrom) {
            Utils.checkNotNull(dateFrom, "dateFrom");
            this.dateFrom = Optional.ofNullable(dateFrom);
            return this;
        }

        /**
         * Date from
         */
        public Builder dateFrom(Optional<Long> dateFrom) {
            Utils.checkNotNull(dateFrom, "dateFrom");
            this.dateFrom = dateFrom;
            return this;
        }

        /**
         * Date to
         */
        public Builder dateTo(long dateTo) {
            Utils.checkNotNull(dateTo, "dateTo");
            this.dateTo = Optional.ofNullable(dateTo);
            return this;
        }

        /**
         * Date to
         */
        public Builder dateTo(Optional<Long> dateTo) {
            Utils.checkNotNull(dateTo, "dateTo");
            this.dateTo = dateTo;
            return this;
        }

        /**
         * Updated since
         */
        public Builder updatedSince(long updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        /**
         * Updated since
         */
        public Builder updatedSince(Optional<Long> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }

        /**
         * Date
         */
        public Builder date(long date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        /**
         * Date
         */
        public Builder date(Optional<Long> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        /**
         * Chamber
         */
        public Builder chamber(GetInsiderTransactionOwnerQueryParamChamber chamber) {
            Utils.checkNotNull(chamber, "chamber");
            this.chamber = Optional.ofNullable(chamber);
            return this;
        }

        /**
         * Chamber
         */
        public Builder chamber(Optional<? extends GetInsiderTransactionOwnerQueryParamChamber> chamber) {
            Utils.checkNotNull(chamber, "chamber");
            this.chamber = chamber;
            return this;
        }

        /**
         * Fields
         */
        public Builder fields(String fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * Fields
         */
        public Builder fields(Optional<String> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        /**
         * Search keys type
         */
        public Builder searchKeysType(GetInsiderTransactionOwnerQueryParamSearchKeysType searchKeysType) {
            Utils.checkNotNull(searchKeysType, "searchKeysType");
            this.searchKeysType = Optional.ofNullable(searchKeysType);
            return this;
        }

        /**
         * Search keys type
         */
        public Builder searchKeysType(Optional<? extends GetInsiderTransactionOwnerQueryParamSearchKeysType> searchKeysType) {
            Utils.checkNotNull(searchKeysType, "searchKeysType");
            this.searchKeysType = searchKeysType;
            return this;
        }

        /**
         * Search keys
         */
        public Builder searchKeys(String searchKeys) {
            Utils.checkNotNull(searchKeys, "searchKeys");
            this.searchKeys = Optional.ofNullable(searchKeys);
            return this;
        }

        /**
         * Search keys
         */
        public Builder searchKeys(Optional<String> searchKeys) {
            Utils.checkNotNull(searchKeys, "searchKeys");
            this.searchKeys = searchKeys;
            return this;
        }

        /**
         * Updated time in Unix format
         */
        public Builder updated(long updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = Optional.ofNullable(updated);
            return this;
        }

        /**
         * Updated time in Unix format
         */
        public Builder updated(Optional<Long> updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = updated;
            return this;
        }

        /**
         * Display
         */
        public Builder display(QueryParamDisplay display) {
            Utils.checkNotNull(display, "display");
            this.display = Optional.ofNullable(display);
            return this;
        }

        /**
         * Display
         */
        public Builder display(Optional<? extends QueryParamDisplay> display) {
            Utils.checkNotNull(display, "display");
            this.display = display;
            return this;
        }
        
        public GetInsiderTransactionOwnerRequest build() {
            return new GetInsiderTransactionOwnerRequest(
                page,
                pageSize,
                dateFrom,
                dateTo,
                updatedSince,
                date,
                chamber,
                fields,
                searchKeysType,
                searchKeys,
                updated,
                display);
        }
    }
}

