/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.benzinga.bzclient.models.components;


import com.benzinga.bzclient.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class BzhttpError {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<? extends BzhttpErrorCode> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<String> value;

    @JsonCreator
    public BzhttpError(
            @JsonProperty("code") Optional<? extends BzhttpErrorCode> code,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("value") Optional<String> value) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(value, "value");
        this.code = code;
        this.id = id;
        this.value = value;
    }
    
    public BzhttpError() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BzhttpErrorCode> code() {
        return (Optional<BzhttpErrorCode>) code;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public BzhttpError withCode(BzhttpErrorCode code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    public BzhttpError withCode(Optional<? extends BzhttpErrorCode> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public BzhttpError withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public BzhttpError withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public BzhttpError withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public BzhttpError withValue(Optional<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BzhttpError other = (BzhttpError) o;
        return 
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            code,
            id,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BzhttpError.class,
                "code", code,
                "id", id,
                "value", value);
    }
    
    public final static class Builder {
 
        private Optional<? extends BzhttpErrorCode> code = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> value = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(BzhttpErrorCode code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        public Builder code(Optional<? extends BzhttpErrorCode> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public BzhttpError build() {
            return new BzhttpError(
                code,
                id,
                value);
        }
    }
}

