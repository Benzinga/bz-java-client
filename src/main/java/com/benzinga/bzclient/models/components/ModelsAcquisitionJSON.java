/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.benzinga.bzclient.models.components;


import com.benzinga.bzclient.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class ModelsAcquisitionJSON {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ma")
    private Optional<? extends List<Map<String, Object>>> ma;

    @JsonCreator
    public ModelsAcquisitionJSON(
            @JsonProperty("ma") Optional<? extends List<Map<String, Object>>> ma) {
        Utils.checkNotNull(ma, "ma");
        this.ma = ma;
    }
    
    public ModelsAcquisitionJSON() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Map<String, Object>>> ma() {
        return (Optional<List<Map<String, Object>>>) ma;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModelsAcquisitionJSON withMa(List<Map<String, Object>> ma) {
        Utils.checkNotNull(ma, "ma");
        this.ma = Optional.ofNullable(ma);
        return this;
    }

    public ModelsAcquisitionJSON withMa(Optional<? extends List<Map<String, Object>>> ma) {
        Utils.checkNotNull(ma, "ma");
        this.ma = ma;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelsAcquisitionJSON other = (ModelsAcquisitionJSON) o;
        return 
            Objects.deepEquals(this.ma, other.ma);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ma);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModelsAcquisitionJSON.class,
                "ma", ma);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Map<String, Object>>> ma = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ma(List<Map<String, Object>> ma) {
            Utils.checkNotNull(ma, "ma");
            this.ma = Optional.ofNullable(ma);
            return this;
        }

        public Builder ma(Optional<? extends List<Map<String, Object>>> ma) {
            Utils.checkNotNull(ma, "ma");
            this.ma = ma;
            return this;
        }
        
        public ModelsAcquisitionJSON build() {
            return new ModelsAcquisitionJSON(
                ma);
        }
    }
}

