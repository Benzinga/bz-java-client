/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.benzinga.BZClient.utils.SpeakeasyMetadata;
import org.benzinga.BZClient.utils.Utils;


public class GetAnalystInsightsV1Request {

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    private Optional<Long> pageSize;

    /**
     * Symbols
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=symbols")
    private Optional<String> symbols;

    /**
     * Analyst
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=analyst")
    private Optional<String> analyst;

    /**
     * Rating ID
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=rating_id")
    private Optional<String> ratingId;

    /**
     * Firm
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_keys_type")
    private Optional<? extends SearchKeysType> searchKeysType;

    /**
     * Firm name
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_keys")
    private Optional<String> searchKeys;

    @JsonCreator
    public GetAnalystInsightsV1Request(
            Optional<Long> page,
            Optional<Long> pageSize,
            Optional<String> symbols,
            Optional<String> analyst,
            Optional<String> ratingId,
            Optional<? extends SearchKeysType> searchKeysType,
            Optional<String> searchKeys) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(symbols, "symbols");
        Utils.checkNotNull(analyst, "analyst");
        Utils.checkNotNull(ratingId, "ratingId");
        Utils.checkNotNull(searchKeysType, "searchKeysType");
        Utils.checkNotNull(searchKeys, "searchKeys");
        this.page = page;
        this.pageSize = pageSize;
        this.symbols = symbols;
        this.analyst = analyst;
        this.ratingId = ratingId;
        this.searchKeysType = searchKeysType;
        this.searchKeys = searchKeys;
    }
    
    public GetAnalystInsightsV1Request() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * Symbols
     */
    @JsonIgnore
    public Optional<String> symbols() {
        return symbols;
    }

    /**
     * Analyst
     */
    @JsonIgnore
    public Optional<String> analyst() {
        return analyst;
    }

    /**
     * Rating ID
     */
    @JsonIgnore
    public Optional<String> ratingId() {
        return ratingId;
    }

    /**
     * Firm
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchKeysType> searchKeysType() {
        return (Optional<SearchKeysType>) searchKeysType;
    }

    /**
     * Firm name
     */
    @JsonIgnore
    public Optional<String> searchKeys() {
        return searchKeys;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Page number
     */
    public GetAnalystInsightsV1Request withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Page number
     */
    public GetAnalystInsightsV1Request withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetAnalystInsightsV1Request withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Page size
     */
    public GetAnalystInsightsV1Request withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Symbols
     */
    public GetAnalystInsightsV1Request withSymbols(String symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = Optional.ofNullable(symbols);
        return this;
    }

    /**
     * Symbols
     */
    public GetAnalystInsightsV1Request withSymbols(Optional<String> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = symbols;
        return this;
    }

    /**
     * Analyst
     */
    public GetAnalystInsightsV1Request withAnalyst(String analyst) {
        Utils.checkNotNull(analyst, "analyst");
        this.analyst = Optional.ofNullable(analyst);
        return this;
    }

    /**
     * Analyst
     */
    public GetAnalystInsightsV1Request withAnalyst(Optional<String> analyst) {
        Utils.checkNotNull(analyst, "analyst");
        this.analyst = analyst;
        return this;
    }

    /**
     * Rating ID
     */
    public GetAnalystInsightsV1Request withRatingId(String ratingId) {
        Utils.checkNotNull(ratingId, "ratingId");
        this.ratingId = Optional.ofNullable(ratingId);
        return this;
    }

    /**
     * Rating ID
     */
    public GetAnalystInsightsV1Request withRatingId(Optional<String> ratingId) {
        Utils.checkNotNull(ratingId, "ratingId");
        this.ratingId = ratingId;
        return this;
    }

    /**
     * Firm
     */
    public GetAnalystInsightsV1Request withSearchKeysType(SearchKeysType searchKeysType) {
        Utils.checkNotNull(searchKeysType, "searchKeysType");
        this.searchKeysType = Optional.ofNullable(searchKeysType);
        return this;
    }

    /**
     * Firm
     */
    public GetAnalystInsightsV1Request withSearchKeysType(Optional<? extends SearchKeysType> searchKeysType) {
        Utils.checkNotNull(searchKeysType, "searchKeysType");
        this.searchKeysType = searchKeysType;
        return this;
    }

    /**
     * Firm name
     */
    public GetAnalystInsightsV1Request withSearchKeys(String searchKeys) {
        Utils.checkNotNull(searchKeys, "searchKeys");
        this.searchKeys = Optional.ofNullable(searchKeys);
        return this;
    }

    /**
     * Firm name
     */
    public GetAnalystInsightsV1Request withSearchKeys(Optional<String> searchKeys) {
        Utils.checkNotNull(searchKeys, "searchKeys");
        this.searchKeys = searchKeys;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAnalystInsightsV1Request other = (GetAnalystInsightsV1Request) o;
        return 
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.symbols, other.symbols) &&
            Objects.deepEquals(this.analyst, other.analyst) &&
            Objects.deepEquals(this.ratingId, other.ratingId) &&
            Objects.deepEquals(this.searchKeysType, other.searchKeysType) &&
            Objects.deepEquals(this.searchKeys, other.searchKeys);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            page,
            pageSize,
            symbols,
            analyst,
            ratingId,
            searchKeysType,
            searchKeys);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetAnalystInsightsV1Request.class,
                "page", page,
                "pageSize", pageSize,
                "symbols", symbols,
                "analyst", analyst,
                "ratingId", ratingId,
                "searchKeysType", searchKeysType,
                "searchKeys", searchKeys);
    }
    
    public final static class Builder {
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> pageSize = Optional.empty();
 
        private Optional<String> symbols = Optional.empty();
 
        private Optional<String> analyst = Optional.empty();
 
        private Optional<String> ratingId = Optional.empty();
 
        private Optional<? extends SearchKeysType> searchKeysType = Optional.empty();
 
        private Optional<String> searchKeys = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Page size
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Page size
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Symbols
         */
        public Builder symbols(String symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = Optional.ofNullable(symbols);
            return this;
        }

        /**
         * Symbols
         */
        public Builder symbols(Optional<String> symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = symbols;
            return this;
        }

        /**
         * Analyst
         */
        public Builder analyst(String analyst) {
            Utils.checkNotNull(analyst, "analyst");
            this.analyst = Optional.ofNullable(analyst);
            return this;
        }

        /**
         * Analyst
         */
        public Builder analyst(Optional<String> analyst) {
            Utils.checkNotNull(analyst, "analyst");
            this.analyst = analyst;
            return this;
        }

        /**
         * Rating ID
         */
        public Builder ratingId(String ratingId) {
            Utils.checkNotNull(ratingId, "ratingId");
            this.ratingId = Optional.ofNullable(ratingId);
            return this;
        }

        /**
         * Rating ID
         */
        public Builder ratingId(Optional<String> ratingId) {
            Utils.checkNotNull(ratingId, "ratingId");
            this.ratingId = ratingId;
            return this;
        }

        /**
         * Firm
         */
        public Builder searchKeysType(SearchKeysType searchKeysType) {
            Utils.checkNotNull(searchKeysType, "searchKeysType");
            this.searchKeysType = Optional.ofNullable(searchKeysType);
            return this;
        }

        /**
         * Firm
         */
        public Builder searchKeysType(Optional<? extends SearchKeysType> searchKeysType) {
            Utils.checkNotNull(searchKeysType, "searchKeysType");
            this.searchKeysType = searchKeysType;
            return this;
        }

        /**
         * Firm name
         */
        public Builder searchKeys(String searchKeys) {
            Utils.checkNotNull(searchKeys, "searchKeys");
            this.searchKeys = Optional.ofNullable(searchKeys);
            return this;
        }

        /**
         * Firm name
         */
        public Builder searchKeys(Optional<String> searchKeys) {
            Utils.checkNotNull(searchKeys, "searchKeys");
            this.searchKeys = searchKeys;
            return this;
        }
        
        public GetAnalystInsightsV1Request build() {
            return new GetAnalystInsightsV1Request(
                page,
                pageSize,
                symbols,
                analyst,
                ratingId,
                searchKeysType,
                searchKeys);
        }
    }
}

