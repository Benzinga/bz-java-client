/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;
import org.benzinga.BZClient.utils.SpeakeasyMetadata;
import org.benzinga.BZClient.utils.Utils;


public class GetEconomicsRequest {

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pagesize")
    private Optional<Long> pagesize;

    /**
     * Date in YYYY-MM-DD format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[date]")
    private Optional<LocalDate> parametersDate;

    /**
     * Start date in YYYY-MM-DD format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[date_from]")
    private Optional<LocalDate> parametersDateFrom;

    /**
     * End date in YYYY-MM-DD format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[date_to]")
    private Optional<LocalDate> parametersDateTo;

    /**
     * Importance
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[importance]")
    private Optional<? extends GetEconomicsQueryParamParametersImportance> parametersImportance;

    /**
     * Country
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country")
    private Optional<String> country;

    /**
     * Updated time in Unix format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parameters[updated]")
    private Optional<String> parametersUpdated;

    /**
     * Event category
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=event_category")
    private Optional<String> eventCategory;

    @JsonCreator
    public GetEconomicsRequest(
            Optional<Long> page,
            Optional<Long> pagesize,
            Optional<LocalDate> parametersDate,
            Optional<LocalDate> parametersDateFrom,
            Optional<LocalDate> parametersDateTo,
            Optional<? extends GetEconomicsQueryParamParametersImportance> parametersImportance,
            Optional<String> country,
            Optional<String> parametersUpdated,
            Optional<String> eventCategory) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pagesize, "pagesize");
        Utils.checkNotNull(parametersDate, "parametersDate");
        Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
        Utils.checkNotNull(parametersDateTo, "parametersDateTo");
        Utils.checkNotNull(parametersImportance, "parametersImportance");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(parametersUpdated, "parametersUpdated");
        Utils.checkNotNull(eventCategory, "eventCategory");
        this.page = page;
        this.pagesize = pagesize;
        this.parametersDate = parametersDate;
        this.parametersDateFrom = parametersDateFrom;
        this.parametersDateTo = parametersDateTo;
        this.parametersImportance = parametersImportance;
        this.country = country;
        this.parametersUpdated = parametersUpdated;
        this.eventCategory = eventCategory;
    }
    
    public GetEconomicsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> pagesize() {
        return pagesize;
    }

    /**
     * Date in YYYY-MM-DD format
     */
    @JsonIgnore
    public Optional<LocalDate> parametersDate() {
        return parametersDate;
    }

    /**
     * Start date in YYYY-MM-DD format
     */
    @JsonIgnore
    public Optional<LocalDate> parametersDateFrom() {
        return parametersDateFrom;
    }

    /**
     * End date in YYYY-MM-DD format
     */
    @JsonIgnore
    public Optional<LocalDate> parametersDateTo() {
        return parametersDateTo;
    }

    /**
     * Importance
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetEconomicsQueryParamParametersImportance> parametersImportance() {
        return (Optional<GetEconomicsQueryParamParametersImportance>) parametersImportance;
    }

    /**
     * Country
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    /**
     * Updated time in Unix format
     */
    @JsonIgnore
    public Optional<String> parametersUpdated() {
        return parametersUpdated;
    }

    /**
     * Event category
     */
    @JsonIgnore
    public Optional<String> eventCategory() {
        return eventCategory;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Page number
     */
    public GetEconomicsRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Page number
     */
    public GetEconomicsRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetEconomicsRequest withPagesize(long pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = Optional.ofNullable(pagesize);
        return this;
    }

    /**
     * Page size
     */
    public GetEconomicsRequest withPagesize(Optional<Long> pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = pagesize;
        return this;
    }

    /**
     * Date in YYYY-MM-DD format
     */
    public GetEconomicsRequest withParametersDate(LocalDate parametersDate) {
        Utils.checkNotNull(parametersDate, "parametersDate");
        this.parametersDate = Optional.ofNullable(parametersDate);
        return this;
    }

    /**
     * Date in YYYY-MM-DD format
     */
    public GetEconomicsRequest withParametersDate(Optional<LocalDate> parametersDate) {
        Utils.checkNotNull(parametersDate, "parametersDate");
        this.parametersDate = parametersDate;
        return this;
    }

    /**
     * Start date in YYYY-MM-DD format
     */
    public GetEconomicsRequest withParametersDateFrom(LocalDate parametersDateFrom) {
        Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
        this.parametersDateFrom = Optional.ofNullable(parametersDateFrom);
        return this;
    }

    /**
     * Start date in YYYY-MM-DD format
     */
    public GetEconomicsRequest withParametersDateFrom(Optional<LocalDate> parametersDateFrom) {
        Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
        this.parametersDateFrom = parametersDateFrom;
        return this;
    }

    /**
     * End date in YYYY-MM-DD format
     */
    public GetEconomicsRequest withParametersDateTo(LocalDate parametersDateTo) {
        Utils.checkNotNull(parametersDateTo, "parametersDateTo");
        this.parametersDateTo = Optional.ofNullable(parametersDateTo);
        return this;
    }

    /**
     * End date in YYYY-MM-DD format
     */
    public GetEconomicsRequest withParametersDateTo(Optional<LocalDate> parametersDateTo) {
        Utils.checkNotNull(parametersDateTo, "parametersDateTo");
        this.parametersDateTo = parametersDateTo;
        return this;
    }

    /**
     * Importance
     */
    public GetEconomicsRequest withParametersImportance(GetEconomicsQueryParamParametersImportance parametersImportance) {
        Utils.checkNotNull(parametersImportance, "parametersImportance");
        this.parametersImportance = Optional.ofNullable(parametersImportance);
        return this;
    }

    /**
     * Importance
     */
    public GetEconomicsRequest withParametersImportance(Optional<? extends GetEconomicsQueryParamParametersImportance> parametersImportance) {
        Utils.checkNotNull(parametersImportance, "parametersImportance");
        this.parametersImportance = parametersImportance;
        return this;
    }

    /**
     * Country
     */
    public GetEconomicsRequest withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    /**
     * Country
     */
    public GetEconomicsRequest withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Updated time in Unix format
     */
    public GetEconomicsRequest withParametersUpdated(String parametersUpdated) {
        Utils.checkNotNull(parametersUpdated, "parametersUpdated");
        this.parametersUpdated = Optional.ofNullable(parametersUpdated);
        return this;
    }

    /**
     * Updated time in Unix format
     */
    public GetEconomicsRequest withParametersUpdated(Optional<String> parametersUpdated) {
        Utils.checkNotNull(parametersUpdated, "parametersUpdated");
        this.parametersUpdated = parametersUpdated;
        return this;
    }

    /**
     * Event category
     */
    public GetEconomicsRequest withEventCategory(String eventCategory) {
        Utils.checkNotNull(eventCategory, "eventCategory");
        this.eventCategory = Optional.ofNullable(eventCategory);
        return this;
    }

    /**
     * Event category
     */
    public GetEconomicsRequest withEventCategory(Optional<String> eventCategory) {
        Utils.checkNotNull(eventCategory, "eventCategory");
        this.eventCategory = eventCategory;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetEconomicsRequest other = (GetEconomicsRequest) o;
        return 
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pagesize, other.pagesize) &&
            Objects.deepEquals(this.parametersDate, other.parametersDate) &&
            Objects.deepEquals(this.parametersDateFrom, other.parametersDateFrom) &&
            Objects.deepEquals(this.parametersDateTo, other.parametersDateTo) &&
            Objects.deepEquals(this.parametersImportance, other.parametersImportance) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.parametersUpdated, other.parametersUpdated) &&
            Objects.deepEquals(this.eventCategory, other.eventCategory);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            page,
            pagesize,
            parametersDate,
            parametersDateFrom,
            parametersDateTo,
            parametersImportance,
            country,
            parametersUpdated,
            eventCategory);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetEconomicsRequest.class,
                "page", page,
                "pagesize", pagesize,
                "parametersDate", parametersDate,
                "parametersDateFrom", parametersDateFrom,
                "parametersDateTo", parametersDateTo,
                "parametersImportance", parametersImportance,
                "country", country,
                "parametersUpdated", parametersUpdated,
                "eventCategory", eventCategory);
    }
    
    public final static class Builder {
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> pagesize = Optional.empty();
 
        private Optional<LocalDate> parametersDate = Optional.empty();
 
        private Optional<LocalDate> parametersDateFrom = Optional.empty();
 
        private Optional<LocalDate> parametersDateTo = Optional.empty();
 
        private Optional<? extends GetEconomicsQueryParamParametersImportance> parametersImportance = Optional.empty();
 
        private Optional<String> country = Optional.empty();
 
        private Optional<String> parametersUpdated = Optional.empty();
 
        private Optional<String> eventCategory = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Page size
         */
        public Builder pagesize(long pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = Optional.ofNullable(pagesize);
            return this;
        }

        /**
         * Page size
         */
        public Builder pagesize(Optional<Long> pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = pagesize;
            return this;
        }

        /**
         * Date in YYYY-MM-DD format
         */
        public Builder parametersDate(LocalDate parametersDate) {
            Utils.checkNotNull(parametersDate, "parametersDate");
            this.parametersDate = Optional.ofNullable(parametersDate);
            return this;
        }

        /**
         * Date in YYYY-MM-DD format
         */
        public Builder parametersDate(Optional<LocalDate> parametersDate) {
            Utils.checkNotNull(parametersDate, "parametersDate");
            this.parametersDate = parametersDate;
            return this;
        }

        /**
         * Start date in YYYY-MM-DD format
         */
        public Builder parametersDateFrom(LocalDate parametersDateFrom) {
            Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
            this.parametersDateFrom = Optional.ofNullable(parametersDateFrom);
            return this;
        }

        /**
         * Start date in YYYY-MM-DD format
         */
        public Builder parametersDateFrom(Optional<LocalDate> parametersDateFrom) {
            Utils.checkNotNull(parametersDateFrom, "parametersDateFrom");
            this.parametersDateFrom = parametersDateFrom;
            return this;
        }

        /**
         * End date in YYYY-MM-DD format
         */
        public Builder parametersDateTo(LocalDate parametersDateTo) {
            Utils.checkNotNull(parametersDateTo, "parametersDateTo");
            this.parametersDateTo = Optional.ofNullable(parametersDateTo);
            return this;
        }

        /**
         * End date in YYYY-MM-DD format
         */
        public Builder parametersDateTo(Optional<LocalDate> parametersDateTo) {
            Utils.checkNotNull(parametersDateTo, "parametersDateTo");
            this.parametersDateTo = parametersDateTo;
            return this;
        }

        /**
         * Importance
         */
        public Builder parametersImportance(GetEconomicsQueryParamParametersImportance parametersImportance) {
            Utils.checkNotNull(parametersImportance, "parametersImportance");
            this.parametersImportance = Optional.ofNullable(parametersImportance);
            return this;
        }

        /**
         * Importance
         */
        public Builder parametersImportance(Optional<? extends GetEconomicsQueryParamParametersImportance> parametersImportance) {
            Utils.checkNotNull(parametersImportance, "parametersImportance");
            this.parametersImportance = parametersImportance;
            return this;
        }

        /**
         * Country
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * Country
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * Updated time in Unix format
         */
        public Builder parametersUpdated(String parametersUpdated) {
            Utils.checkNotNull(parametersUpdated, "parametersUpdated");
            this.parametersUpdated = Optional.ofNullable(parametersUpdated);
            return this;
        }

        /**
         * Updated time in Unix format
         */
        public Builder parametersUpdated(Optional<String> parametersUpdated) {
            Utils.checkNotNull(parametersUpdated, "parametersUpdated");
            this.parametersUpdated = parametersUpdated;
            return this;
        }

        /**
         * Event category
         */
        public Builder eventCategory(String eventCategory) {
            Utils.checkNotNull(eventCategory, "eventCategory");
            this.eventCategory = Optional.ofNullable(eventCategory);
            return this;
        }

        /**
         * Event category
         */
        public Builder eventCategory(Optional<String> eventCategory) {
            Utils.checkNotNull(eventCategory, "eventCategory");
            this.eventCategory = eventCategory;
            return this;
        }
        
        public GetEconomicsRequest build() {
            return new GetEconomicsRequest(
                page,
                pagesize,
                parametersDate,
                parametersDateFrom,
                parametersDateTo,
                parametersImportance,
                country,
                parametersUpdated,
                eventCategory);
        }
    }
}

