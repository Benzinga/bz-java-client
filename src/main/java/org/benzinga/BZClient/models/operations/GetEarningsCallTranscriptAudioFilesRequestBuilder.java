/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient.models.operations;

import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.benzinga.BZClient.utils.Utils;

public class GetEarningsCallTranscriptAudioFilesRequestBuilder {

    private Optional<? extends List<String>> tickers = Optional.empty();
    private Optional<? extends List<String>> callId = Optional.empty();
    private Optional<Long> page = Optional.empty();
    private Optional<Long> pagesize = Optional.empty();
    private final SDKMethodInterfaces.MethodCallGetEarningsCallTranscriptAudioFiles sdk;

    public GetEarningsCallTranscriptAudioFilesRequestBuilder(SDKMethodInterfaces.MethodCallGetEarningsCallTranscriptAudioFiles sdk) {
        this.sdk = sdk;
    }
                
    public GetEarningsCallTranscriptAudioFilesRequestBuilder tickers(List<String> tickers) {
        Utils.checkNotNull(tickers, "tickers");
        this.tickers = Optional.of(tickers);
        return this;
    }

    public GetEarningsCallTranscriptAudioFilesRequestBuilder tickers(Optional<? extends List<String>> tickers) {
        Utils.checkNotNull(tickers, "tickers");
        this.tickers = tickers;
        return this;
    }
                
    public GetEarningsCallTranscriptAudioFilesRequestBuilder callId(List<String> callId) {
        Utils.checkNotNull(callId, "callId");
        this.callId = Optional.of(callId);
        return this;
    }

    public GetEarningsCallTranscriptAudioFilesRequestBuilder callId(Optional<? extends List<String>> callId) {
        Utils.checkNotNull(callId, "callId");
        this.callId = callId;
        return this;
    }
                
    public GetEarningsCallTranscriptAudioFilesRequestBuilder page(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.of(page);
        return this;
    }

    public GetEarningsCallTranscriptAudioFilesRequestBuilder page(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }
                
    public GetEarningsCallTranscriptAudioFilesRequestBuilder pagesize(long pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = Optional.of(pagesize);
        return this;
    }

    public GetEarningsCallTranscriptAudioFilesRequestBuilder pagesize(Optional<Long> pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = pagesize;
        return this;
    }

    public GetEarningsCallTranscriptAudioFilesResponse call() throws Exception {

        return sdk.getAudio(
            tickers,
            callId,
            page,
            pagesize);
    }
}
