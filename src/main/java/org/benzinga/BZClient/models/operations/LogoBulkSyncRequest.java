/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.benzinga.BZClient.utils.SpeakeasyMetadata;
import org.benzinga.BZClient.utils.Utils;


public class LogoBulkSyncRequest {

    /**
     * Search Keys
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_keys")
    private String searchKeys;

    /**
     * Search Keys Type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_keys_type")
    private Optional<String> searchKeysType;

    /**
     * Fields
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=fields")
    private List<String> fields;

    /**
     * Page
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page Size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pagesize")
    private Optional<Long> pagesize;

    /**
     * Updated At From
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_since")
    private Optional<String> updatedSince;

    /**
     * Scale
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scale")
    private Optional<String> scale;

    /**
     * Composite Radius
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=composite_radius")
    private Optional<Long> compositeRadius;

    @JsonCreator
    public LogoBulkSyncRequest(
            String searchKeys,
            Optional<String> searchKeysType,
            List<String> fields,
            Optional<Long> page,
            Optional<Long> pagesize,
            Optional<String> updatedSince,
            Optional<String> scale,
            Optional<Long> compositeRadius) {
        Utils.checkNotNull(searchKeys, "searchKeys");
        Utils.checkNotNull(searchKeysType, "searchKeysType");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pagesize, "pagesize");
        Utils.checkNotNull(updatedSince, "updatedSince");
        Utils.checkNotNull(scale, "scale");
        Utils.checkNotNull(compositeRadius, "compositeRadius");
        this.searchKeys = searchKeys;
        this.searchKeysType = searchKeysType;
        this.fields = fields;
        this.page = page;
        this.pagesize = pagesize;
        this.updatedSince = updatedSince;
        this.scale = scale;
        this.compositeRadius = compositeRadius;
    }
    
    public LogoBulkSyncRequest(
            String searchKeys,
            List<String> fields) {
        this(searchKeys, Optional.empty(), fields, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Search Keys
     */
    @JsonIgnore
    public String searchKeys() {
        return searchKeys;
    }

    /**
     * Search Keys Type
     */
    @JsonIgnore
    public Optional<String> searchKeysType() {
        return searchKeysType;
    }

    /**
     * Fields
     */
    @JsonIgnore
    public List<String> fields() {
        return fields;
    }

    /**
     * Page
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page Size
     */
    @JsonIgnore
    public Optional<Long> pagesize() {
        return pagesize;
    }

    /**
     * Updated At From
     */
    @JsonIgnore
    public Optional<String> updatedSince() {
        return updatedSince;
    }

    /**
     * Scale
     */
    @JsonIgnore
    public Optional<String> scale() {
        return scale;
    }

    /**
     * Composite Radius
     */
    @JsonIgnore
    public Optional<Long> compositeRadius() {
        return compositeRadius;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Search Keys
     */
    public LogoBulkSyncRequest withSearchKeys(String searchKeys) {
        Utils.checkNotNull(searchKeys, "searchKeys");
        this.searchKeys = searchKeys;
        return this;
    }

    /**
     * Search Keys Type
     */
    public LogoBulkSyncRequest withSearchKeysType(String searchKeysType) {
        Utils.checkNotNull(searchKeysType, "searchKeysType");
        this.searchKeysType = Optional.ofNullable(searchKeysType);
        return this;
    }

    /**
     * Search Keys Type
     */
    public LogoBulkSyncRequest withSearchKeysType(Optional<String> searchKeysType) {
        Utils.checkNotNull(searchKeysType, "searchKeysType");
        this.searchKeysType = searchKeysType;
        return this;
    }

    /**
     * Fields
     */
    public LogoBulkSyncRequest withFields(List<String> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * Page
     */
    public LogoBulkSyncRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Page
     */
    public LogoBulkSyncRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page Size
     */
    public LogoBulkSyncRequest withPagesize(long pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = Optional.ofNullable(pagesize);
        return this;
    }

    /**
     * Page Size
     */
    public LogoBulkSyncRequest withPagesize(Optional<Long> pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = pagesize;
        return this;
    }

    /**
     * Updated At From
     */
    public LogoBulkSyncRequest withUpdatedSince(String updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }

    /**
     * Updated At From
     */
    public LogoBulkSyncRequest withUpdatedSince(Optional<String> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }

    /**
     * Scale
     */
    public LogoBulkSyncRequest withScale(String scale) {
        Utils.checkNotNull(scale, "scale");
        this.scale = Optional.ofNullable(scale);
        return this;
    }

    /**
     * Scale
     */
    public LogoBulkSyncRequest withScale(Optional<String> scale) {
        Utils.checkNotNull(scale, "scale");
        this.scale = scale;
        return this;
    }

    /**
     * Composite Radius
     */
    public LogoBulkSyncRequest withCompositeRadius(long compositeRadius) {
        Utils.checkNotNull(compositeRadius, "compositeRadius");
        this.compositeRadius = Optional.ofNullable(compositeRadius);
        return this;
    }

    /**
     * Composite Radius
     */
    public LogoBulkSyncRequest withCompositeRadius(Optional<Long> compositeRadius) {
        Utils.checkNotNull(compositeRadius, "compositeRadius");
        this.compositeRadius = compositeRadius;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LogoBulkSyncRequest other = (LogoBulkSyncRequest) o;
        return 
            Objects.deepEquals(this.searchKeys, other.searchKeys) &&
            Objects.deepEquals(this.searchKeysType, other.searchKeysType) &&
            Objects.deepEquals(this.fields, other.fields) &&
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pagesize, other.pagesize) &&
            Objects.deepEquals(this.updatedSince, other.updatedSince) &&
            Objects.deepEquals(this.scale, other.scale) &&
            Objects.deepEquals(this.compositeRadius, other.compositeRadius);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            searchKeys,
            searchKeysType,
            fields,
            page,
            pagesize,
            updatedSince,
            scale,
            compositeRadius);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LogoBulkSyncRequest.class,
                "searchKeys", searchKeys,
                "searchKeysType", searchKeysType,
                "fields", fields,
                "page", page,
                "pagesize", pagesize,
                "updatedSince", updatedSince,
                "scale", scale,
                "compositeRadius", compositeRadius);
    }
    
    public final static class Builder {
 
        private String searchKeys;
 
        private Optional<String> searchKeysType = Optional.empty();
 
        private List<String> fields;
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> pagesize = Optional.empty();
 
        private Optional<String> updatedSince = Optional.empty();
 
        private Optional<String> scale = Optional.empty();
 
        private Optional<Long> compositeRadius = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Search Keys
         */
        public Builder searchKeys(String searchKeys) {
            Utils.checkNotNull(searchKeys, "searchKeys");
            this.searchKeys = searchKeys;
            return this;
        }

        /**
         * Search Keys Type
         */
        public Builder searchKeysType(String searchKeysType) {
            Utils.checkNotNull(searchKeysType, "searchKeysType");
            this.searchKeysType = Optional.ofNullable(searchKeysType);
            return this;
        }

        /**
         * Search Keys Type
         */
        public Builder searchKeysType(Optional<String> searchKeysType) {
            Utils.checkNotNull(searchKeysType, "searchKeysType");
            this.searchKeysType = searchKeysType;
            return this;
        }

        /**
         * Fields
         */
        public Builder fields(List<String> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        /**
         * Page
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Page Size
         */
        public Builder pagesize(long pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = Optional.ofNullable(pagesize);
            return this;
        }

        /**
         * Page Size
         */
        public Builder pagesize(Optional<Long> pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = pagesize;
            return this;
        }

        /**
         * Updated At From
         */
        public Builder updatedSince(String updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        /**
         * Updated At From
         */
        public Builder updatedSince(Optional<String> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }

        /**
         * Scale
         */
        public Builder scale(String scale) {
            Utils.checkNotNull(scale, "scale");
            this.scale = Optional.ofNullable(scale);
            return this;
        }

        /**
         * Scale
         */
        public Builder scale(Optional<String> scale) {
            Utils.checkNotNull(scale, "scale");
            this.scale = scale;
            return this;
        }

        /**
         * Composite Radius
         */
        public Builder compositeRadius(long compositeRadius) {
            Utils.checkNotNull(compositeRadius, "compositeRadius");
            this.compositeRadius = Optional.ofNullable(compositeRadius);
            return this;
        }

        /**
         * Composite Radius
         */
        public Builder compositeRadius(Optional<Long> compositeRadius) {
            Utils.checkNotNull(compositeRadius, "compositeRadius");
            this.compositeRadius = compositeRadius;
            return this;
        }
        
        public LogoBulkSyncRequest build() {
            return new LogoBulkSyncRequest(
                searchKeys,
                searchKeysType,
                fields,
                page,
                pagesize,
                updatedSince,
                scale,
                compositeRadius);
        }
    }
}

