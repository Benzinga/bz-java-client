/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;
import org.benzinga.BZClient.utils.SpeakeasyMetadata;
import org.benzinga.BZClient.utils.Utils;


public class GetNewsRequest {

    /**
     * Tickers
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=tickers")
    private Optional<String> tickers;

    /**
     * CUSIPs
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cusips")
    private Optional<String> cusips;

    /**
     * ISINs
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=isins")
    private Optional<String> isins;

    /**
     * Channels
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=channels")
    private Optional<String> channels;

    /**
     * Topics
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=topics")
    private Optional<String> topics;

    /**
     * Authors
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=authors")
    private Optional<String> authors;

    /**
     * Content Types
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contentTypes")
    private Optional<String> contentTypes;

    /**
     * Sort
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    private Optional<String> sort;

    /**
     * Date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date")
    private Optional<LocalDate> date;

    /**
     * Published Since
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=publishedSince")
    private Optional<String> publishedSince;

    /**
     * Updated Since
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updatedSince")
    private Optional<String> updatedSince;

    /**
     * Date From
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dateFrom")
    private Optional<String> dateFrom;

    /**
     * Date To
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dateTo")
    private Optional<String> dateTo;

    /**
     * Page Size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    private Optional<Long> pageSize;

    /**
     * Page
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Last ID
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=lastID")
    private Optional<String> lastID;

    /**
     * Display Output
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=displayOutput")
    private Optional<String> displayOutput;

    /**
     * Noise
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=noise")
    private Optional<String> noise;

    /**
     * Format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=format")
    private Optional<String> format;

    @JsonCreator
    public GetNewsRequest(
            Optional<String> tickers,
            Optional<String> cusips,
            Optional<String> isins,
            Optional<String> channels,
            Optional<String> topics,
            Optional<String> authors,
            Optional<String> contentTypes,
            Optional<String> sort,
            Optional<LocalDate> date,
            Optional<String> publishedSince,
            Optional<String> updatedSince,
            Optional<String> dateFrom,
            Optional<String> dateTo,
            Optional<Long> pageSize,
            Optional<Long> page,
            Optional<String> lastID,
            Optional<String> displayOutput,
            Optional<String> noise,
            Optional<String> format) {
        Utils.checkNotNull(tickers, "tickers");
        Utils.checkNotNull(cusips, "cusips");
        Utils.checkNotNull(isins, "isins");
        Utils.checkNotNull(channels, "channels");
        Utils.checkNotNull(topics, "topics");
        Utils.checkNotNull(authors, "authors");
        Utils.checkNotNull(contentTypes, "contentTypes");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(publishedSince, "publishedSince");
        Utils.checkNotNull(updatedSince, "updatedSince");
        Utils.checkNotNull(dateFrom, "dateFrom");
        Utils.checkNotNull(dateTo, "dateTo");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(lastID, "lastID");
        Utils.checkNotNull(displayOutput, "displayOutput");
        Utils.checkNotNull(noise, "noise");
        Utils.checkNotNull(format, "format");
        this.tickers = tickers;
        this.cusips = cusips;
        this.isins = isins;
        this.channels = channels;
        this.topics = topics;
        this.authors = authors;
        this.contentTypes = contentTypes;
        this.sort = sort;
        this.date = date;
        this.publishedSince = publishedSince;
        this.updatedSince = updatedSince;
        this.dateFrom = dateFrom;
        this.dateTo = dateTo;
        this.pageSize = pageSize;
        this.page = page;
        this.lastID = lastID;
        this.displayOutput = displayOutput;
        this.noise = noise;
        this.format = format;
    }
    
    public GetNewsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Tickers
     */
    @JsonIgnore
    public Optional<String> tickers() {
        return tickers;
    }

    /**
     * CUSIPs
     */
    @JsonIgnore
    public Optional<String> cusips() {
        return cusips;
    }

    /**
     * ISINs
     */
    @JsonIgnore
    public Optional<String> isins() {
        return isins;
    }

    /**
     * Channels
     */
    @JsonIgnore
    public Optional<String> channels() {
        return channels;
    }

    /**
     * Topics
     */
    @JsonIgnore
    public Optional<String> topics() {
        return topics;
    }

    /**
     * Authors
     */
    @JsonIgnore
    public Optional<String> authors() {
        return authors;
    }

    /**
     * Content Types
     */
    @JsonIgnore
    public Optional<String> contentTypes() {
        return contentTypes;
    }

    /**
     * Sort
     */
    @JsonIgnore
    public Optional<String> sort() {
        return sort;
    }

    /**
     * Date
     */
    @JsonIgnore
    public Optional<LocalDate> date() {
        return date;
    }

    /**
     * Published Since
     */
    @JsonIgnore
    public Optional<String> publishedSince() {
        return publishedSince;
    }

    /**
     * Updated Since
     */
    @JsonIgnore
    public Optional<String> updatedSince() {
        return updatedSince;
    }

    /**
     * Date From
     */
    @JsonIgnore
    public Optional<String> dateFrom() {
        return dateFrom;
    }

    /**
     * Date To
     */
    @JsonIgnore
    public Optional<String> dateTo() {
        return dateTo;
    }

    /**
     * Page Size
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * Page
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Last ID
     */
    @JsonIgnore
    public Optional<String> lastID() {
        return lastID;
    }

    /**
     * Display Output
     */
    @JsonIgnore
    public Optional<String> displayOutput() {
        return displayOutput;
    }

    /**
     * Noise
     */
    @JsonIgnore
    public Optional<String> noise() {
        return noise;
    }

    /**
     * Format
     */
    @JsonIgnore
    public Optional<String> format() {
        return format;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Tickers
     */
    public GetNewsRequest withTickers(String tickers) {
        Utils.checkNotNull(tickers, "tickers");
        this.tickers = Optional.ofNullable(tickers);
        return this;
    }

    /**
     * Tickers
     */
    public GetNewsRequest withTickers(Optional<String> tickers) {
        Utils.checkNotNull(tickers, "tickers");
        this.tickers = tickers;
        return this;
    }

    /**
     * CUSIPs
     */
    public GetNewsRequest withCusips(String cusips) {
        Utils.checkNotNull(cusips, "cusips");
        this.cusips = Optional.ofNullable(cusips);
        return this;
    }

    /**
     * CUSIPs
     */
    public GetNewsRequest withCusips(Optional<String> cusips) {
        Utils.checkNotNull(cusips, "cusips");
        this.cusips = cusips;
        return this;
    }

    /**
     * ISINs
     */
    public GetNewsRequest withIsins(String isins) {
        Utils.checkNotNull(isins, "isins");
        this.isins = Optional.ofNullable(isins);
        return this;
    }

    /**
     * ISINs
     */
    public GetNewsRequest withIsins(Optional<String> isins) {
        Utils.checkNotNull(isins, "isins");
        this.isins = isins;
        return this;
    }

    /**
     * Channels
     */
    public GetNewsRequest withChannels(String channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = Optional.ofNullable(channels);
        return this;
    }

    /**
     * Channels
     */
    public GetNewsRequest withChannels(Optional<String> channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = channels;
        return this;
    }

    /**
     * Topics
     */
    public GetNewsRequest withTopics(String topics) {
        Utils.checkNotNull(topics, "topics");
        this.topics = Optional.ofNullable(topics);
        return this;
    }

    /**
     * Topics
     */
    public GetNewsRequest withTopics(Optional<String> topics) {
        Utils.checkNotNull(topics, "topics");
        this.topics = topics;
        return this;
    }

    /**
     * Authors
     */
    public GetNewsRequest withAuthors(String authors) {
        Utils.checkNotNull(authors, "authors");
        this.authors = Optional.ofNullable(authors);
        return this;
    }

    /**
     * Authors
     */
    public GetNewsRequest withAuthors(Optional<String> authors) {
        Utils.checkNotNull(authors, "authors");
        this.authors = authors;
        return this;
    }

    /**
     * Content Types
     */
    public GetNewsRequest withContentTypes(String contentTypes) {
        Utils.checkNotNull(contentTypes, "contentTypes");
        this.contentTypes = Optional.ofNullable(contentTypes);
        return this;
    }

    /**
     * Content Types
     */
    public GetNewsRequest withContentTypes(Optional<String> contentTypes) {
        Utils.checkNotNull(contentTypes, "contentTypes");
        this.contentTypes = contentTypes;
        return this;
    }

    /**
     * Sort
     */
    public GetNewsRequest withSort(String sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }

    /**
     * Sort
     */
    public GetNewsRequest withSort(Optional<String> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    /**
     * Date
     */
    public GetNewsRequest withDate(LocalDate date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    /**
     * Date
     */
    public GetNewsRequest withDate(Optional<LocalDate> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Published Since
     */
    public GetNewsRequest withPublishedSince(String publishedSince) {
        Utils.checkNotNull(publishedSince, "publishedSince");
        this.publishedSince = Optional.ofNullable(publishedSince);
        return this;
    }

    /**
     * Published Since
     */
    public GetNewsRequest withPublishedSince(Optional<String> publishedSince) {
        Utils.checkNotNull(publishedSince, "publishedSince");
        this.publishedSince = publishedSince;
        return this;
    }

    /**
     * Updated Since
     */
    public GetNewsRequest withUpdatedSince(String updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }

    /**
     * Updated Since
     */
    public GetNewsRequest withUpdatedSince(Optional<String> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }

    /**
     * Date From
     */
    public GetNewsRequest withDateFrom(String dateFrom) {
        Utils.checkNotNull(dateFrom, "dateFrom");
        this.dateFrom = Optional.ofNullable(dateFrom);
        return this;
    }

    /**
     * Date From
     */
    public GetNewsRequest withDateFrom(Optional<String> dateFrom) {
        Utils.checkNotNull(dateFrom, "dateFrom");
        this.dateFrom = dateFrom;
        return this;
    }

    /**
     * Date To
     */
    public GetNewsRequest withDateTo(String dateTo) {
        Utils.checkNotNull(dateTo, "dateTo");
        this.dateTo = Optional.ofNullable(dateTo);
        return this;
    }

    /**
     * Date To
     */
    public GetNewsRequest withDateTo(Optional<String> dateTo) {
        Utils.checkNotNull(dateTo, "dateTo");
        this.dateTo = dateTo;
        return this;
    }

    /**
     * Page Size
     */
    public GetNewsRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Page Size
     */
    public GetNewsRequest withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Page
     */
    public GetNewsRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Page
     */
    public GetNewsRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Last ID
     */
    public GetNewsRequest withLastID(String lastID) {
        Utils.checkNotNull(lastID, "lastID");
        this.lastID = Optional.ofNullable(lastID);
        return this;
    }

    /**
     * Last ID
     */
    public GetNewsRequest withLastID(Optional<String> lastID) {
        Utils.checkNotNull(lastID, "lastID");
        this.lastID = lastID;
        return this;
    }

    /**
     * Display Output
     */
    public GetNewsRequest withDisplayOutput(String displayOutput) {
        Utils.checkNotNull(displayOutput, "displayOutput");
        this.displayOutput = Optional.ofNullable(displayOutput);
        return this;
    }

    /**
     * Display Output
     */
    public GetNewsRequest withDisplayOutput(Optional<String> displayOutput) {
        Utils.checkNotNull(displayOutput, "displayOutput");
        this.displayOutput = displayOutput;
        return this;
    }

    /**
     * Noise
     */
    public GetNewsRequest withNoise(String noise) {
        Utils.checkNotNull(noise, "noise");
        this.noise = Optional.ofNullable(noise);
        return this;
    }

    /**
     * Noise
     */
    public GetNewsRequest withNoise(Optional<String> noise) {
        Utils.checkNotNull(noise, "noise");
        this.noise = noise;
        return this;
    }

    /**
     * Format
     */
    public GetNewsRequest withFormat(String format) {
        Utils.checkNotNull(format, "format");
        this.format = Optional.ofNullable(format);
        return this;
    }

    /**
     * Format
     */
    public GetNewsRequest withFormat(Optional<String> format) {
        Utils.checkNotNull(format, "format");
        this.format = format;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetNewsRequest other = (GetNewsRequest) o;
        return 
            Objects.deepEquals(this.tickers, other.tickers) &&
            Objects.deepEquals(this.cusips, other.cusips) &&
            Objects.deepEquals(this.isins, other.isins) &&
            Objects.deepEquals(this.channels, other.channels) &&
            Objects.deepEquals(this.topics, other.topics) &&
            Objects.deepEquals(this.authors, other.authors) &&
            Objects.deepEquals(this.contentTypes, other.contentTypes) &&
            Objects.deepEquals(this.sort, other.sort) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.publishedSince, other.publishedSince) &&
            Objects.deepEquals(this.updatedSince, other.updatedSince) &&
            Objects.deepEquals(this.dateFrom, other.dateFrom) &&
            Objects.deepEquals(this.dateTo, other.dateTo) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.lastID, other.lastID) &&
            Objects.deepEquals(this.displayOutput, other.displayOutput) &&
            Objects.deepEquals(this.noise, other.noise) &&
            Objects.deepEquals(this.format, other.format);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            tickers,
            cusips,
            isins,
            channels,
            topics,
            authors,
            contentTypes,
            sort,
            date,
            publishedSince,
            updatedSince,
            dateFrom,
            dateTo,
            pageSize,
            page,
            lastID,
            displayOutput,
            noise,
            format);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetNewsRequest.class,
                "tickers", tickers,
                "cusips", cusips,
                "isins", isins,
                "channels", channels,
                "topics", topics,
                "authors", authors,
                "contentTypes", contentTypes,
                "sort", sort,
                "date", date,
                "publishedSince", publishedSince,
                "updatedSince", updatedSince,
                "dateFrom", dateFrom,
                "dateTo", dateTo,
                "pageSize", pageSize,
                "page", page,
                "lastID", lastID,
                "displayOutput", displayOutput,
                "noise", noise,
                "format", format);
    }
    
    public final static class Builder {
 
        private Optional<String> tickers = Optional.empty();
 
        private Optional<String> cusips = Optional.empty();
 
        private Optional<String> isins = Optional.empty();
 
        private Optional<String> channels = Optional.empty();
 
        private Optional<String> topics = Optional.empty();
 
        private Optional<String> authors = Optional.empty();
 
        private Optional<String> contentTypes = Optional.empty();
 
        private Optional<String> sort = Optional.empty();
 
        private Optional<LocalDate> date = Optional.empty();
 
        private Optional<String> publishedSince = Optional.empty();
 
        private Optional<String> updatedSince = Optional.empty();
 
        private Optional<String> dateFrom = Optional.empty();
 
        private Optional<String> dateTo = Optional.empty();
 
        private Optional<Long> pageSize = Optional.empty();
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<String> lastID = Optional.empty();
 
        private Optional<String> displayOutput = Optional.empty();
 
        private Optional<String> noise = Optional.empty();
 
        private Optional<String> format = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Tickers
         */
        public Builder tickers(String tickers) {
            Utils.checkNotNull(tickers, "tickers");
            this.tickers = Optional.ofNullable(tickers);
            return this;
        }

        /**
         * Tickers
         */
        public Builder tickers(Optional<String> tickers) {
            Utils.checkNotNull(tickers, "tickers");
            this.tickers = tickers;
            return this;
        }

        /**
         * CUSIPs
         */
        public Builder cusips(String cusips) {
            Utils.checkNotNull(cusips, "cusips");
            this.cusips = Optional.ofNullable(cusips);
            return this;
        }

        /**
         * CUSIPs
         */
        public Builder cusips(Optional<String> cusips) {
            Utils.checkNotNull(cusips, "cusips");
            this.cusips = cusips;
            return this;
        }

        /**
         * ISINs
         */
        public Builder isins(String isins) {
            Utils.checkNotNull(isins, "isins");
            this.isins = Optional.ofNullable(isins);
            return this;
        }

        /**
         * ISINs
         */
        public Builder isins(Optional<String> isins) {
            Utils.checkNotNull(isins, "isins");
            this.isins = isins;
            return this;
        }

        /**
         * Channels
         */
        public Builder channels(String channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = Optional.ofNullable(channels);
            return this;
        }

        /**
         * Channels
         */
        public Builder channels(Optional<String> channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = channels;
            return this;
        }

        /**
         * Topics
         */
        public Builder topics(String topics) {
            Utils.checkNotNull(topics, "topics");
            this.topics = Optional.ofNullable(topics);
            return this;
        }

        /**
         * Topics
         */
        public Builder topics(Optional<String> topics) {
            Utils.checkNotNull(topics, "topics");
            this.topics = topics;
            return this;
        }

        /**
         * Authors
         */
        public Builder authors(String authors) {
            Utils.checkNotNull(authors, "authors");
            this.authors = Optional.ofNullable(authors);
            return this;
        }

        /**
         * Authors
         */
        public Builder authors(Optional<String> authors) {
            Utils.checkNotNull(authors, "authors");
            this.authors = authors;
            return this;
        }

        /**
         * Content Types
         */
        public Builder contentTypes(String contentTypes) {
            Utils.checkNotNull(contentTypes, "contentTypes");
            this.contentTypes = Optional.ofNullable(contentTypes);
            return this;
        }

        /**
         * Content Types
         */
        public Builder contentTypes(Optional<String> contentTypes) {
            Utils.checkNotNull(contentTypes, "contentTypes");
            this.contentTypes = contentTypes;
            return this;
        }

        /**
         * Sort
         */
        public Builder sort(String sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        /**
         * Sort
         */
        public Builder sort(Optional<String> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }

        /**
         * Date
         */
        public Builder date(LocalDate date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        /**
         * Date
         */
        public Builder date(Optional<LocalDate> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        /**
         * Published Since
         */
        public Builder publishedSince(String publishedSince) {
            Utils.checkNotNull(publishedSince, "publishedSince");
            this.publishedSince = Optional.ofNullable(publishedSince);
            return this;
        }

        /**
         * Published Since
         */
        public Builder publishedSince(Optional<String> publishedSince) {
            Utils.checkNotNull(publishedSince, "publishedSince");
            this.publishedSince = publishedSince;
            return this;
        }

        /**
         * Updated Since
         */
        public Builder updatedSince(String updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        /**
         * Updated Since
         */
        public Builder updatedSince(Optional<String> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }

        /**
         * Date From
         */
        public Builder dateFrom(String dateFrom) {
            Utils.checkNotNull(dateFrom, "dateFrom");
            this.dateFrom = Optional.ofNullable(dateFrom);
            return this;
        }

        /**
         * Date From
         */
        public Builder dateFrom(Optional<String> dateFrom) {
            Utils.checkNotNull(dateFrom, "dateFrom");
            this.dateFrom = dateFrom;
            return this;
        }

        /**
         * Date To
         */
        public Builder dateTo(String dateTo) {
            Utils.checkNotNull(dateTo, "dateTo");
            this.dateTo = Optional.ofNullable(dateTo);
            return this;
        }

        /**
         * Date To
         */
        public Builder dateTo(Optional<String> dateTo) {
            Utils.checkNotNull(dateTo, "dateTo");
            this.dateTo = dateTo;
            return this;
        }

        /**
         * Page Size
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Page Size
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Page
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Last ID
         */
        public Builder lastID(String lastID) {
            Utils.checkNotNull(lastID, "lastID");
            this.lastID = Optional.ofNullable(lastID);
            return this;
        }

        /**
         * Last ID
         */
        public Builder lastID(Optional<String> lastID) {
            Utils.checkNotNull(lastID, "lastID");
            this.lastID = lastID;
            return this;
        }

        /**
         * Display Output
         */
        public Builder displayOutput(String displayOutput) {
            Utils.checkNotNull(displayOutput, "displayOutput");
            this.displayOutput = Optional.ofNullable(displayOutput);
            return this;
        }

        /**
         * Display Output
         */
        public Builder displayOutput(Optional<String> displayOutput) {
            Utils.checkNotNull(displayOutput, "displayOutput");
            this.displayOutput = displayOutput;
            return this;
        }

        /**
         * Noise
         */
        public Builder noise(String noise) {
            Utils.checkNotNull(noise, "noise");
            this.noise = Optional.ofNullable(noise);
            return this;
        }

        /**
         * Noise
         */
        public Builder noise(Optional<String> noise) {
            Utils.checkNotNull(noise, "noise");
            this.noise = noise;
            return this;
        }

        /**
         * Format
         */
        public Builder format(String format) {
            Utils.checkNotNull(format, "format");
            this.format = Optional.ofNullable(format);
            return this;
        }

        /**
         * Format
         */
        public Builder format(Optional<String> format) {
            Utils.checkNotNull(format, "format");
            this.format = format;
            return this;
        }
        
        public GetNewsRequest build() {
            return new GetNewsRequest(
                tickers,
                cusips,
                isins,
                channels,
                topics,
                authors,
                contentTypes,
                sort,
                date,
                publishedSince,
                updatedSince,
                dateFrom,
                dateTo,
                pageSize,
                page,
                lastID,
                displayOutput,
                noise,
                format);
        }
    }
}

