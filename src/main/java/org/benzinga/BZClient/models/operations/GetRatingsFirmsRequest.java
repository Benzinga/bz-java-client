/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.benzinga.BZClient.utils.SpeakeasyMetadata;
import org.benzinga.BZClient.utils.Utils;


public class GetRatingsFirmsRequest {

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Page size
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    private Optional<Long> pageSize;

    /**
     * Fields
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    private Optional<String> fields;

    /**
     * Firm
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=firm")
    private Optional<String> firm;

    /**
     * Updated time in Unix format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated")
    private Optional<Long> updated;

    @JsonCreator
    public GetRatingsFirmsRequest(
            Optional<Long> page,
            Optional<Long> pageSize,
            Optional<String> fields,
            Optional<String> firm,
            Optional<Long> updated) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(firm, "firm");
        Utils.checkNotNull(updated, "updated");
        this.page = page;
        this.pageSize = pageSize;
        this.fields = fields;
        this.firm = firm;
        this.updated = updated;
    }
    
    public GetRatingsFirmsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Page size
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * Fields
     */
    @JsonIgnore
    public Optional<String> fields() {
        return fields;
    }

    /**
     * Firm
     */
    @JsonIgnore
    public Optional<String> firm() {
        return firm;
    }

    /**
     * Updated time in Unix format
     */
    @JsonIgnore
    public Optional<Long> updated() {
        return updated;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Page number
     */
    public GetRatingsFirmsRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Page number
     */
    public GetRatingsFirmsRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Page size
     */
    public GetRatingsFirmsRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Page size
     */
    public GetRatingsFirmsRequest withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Fields
     */
    public GetRatingsFirmsRequest withFields(String fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }

    /**
     * Fields
     */
    public GetRatingsFirmsRequest withFields(Optional<String> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * Firm
     */
    public GetRatingsFirmsRequest withFirm(String firm) {
        Utils.checkNotNull(firm, "firm");
        this.firm = Optional.ofNullable(firm);
        return this;
    }

    /**
     * Firm
     */
    public GetRatingsFirmsRequest withFirm(Optional<String> firm) {
        Utils.checkNotNull(firm, "firm");
        this.firm = firm;
        return this;
    }

    /**
     * Updated time in Unix format
     */
    public GetRatingsFirmsRequest withUpdated(long updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = Optional.ofNullable(updated);
        return this;
    }

    /**
     * Updated time in Unix format
     */
    public GetRatingsFirmsRequest withUpdated(Optional<Long> updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = updated;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetRatingsFirmsRequest other = (GetRatingsFirmsRequest) o;
        return 
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.fields, other.fields) &&
            Objects.deepEquals(this.firm, other.firm) &&
            Objects.deepEquals(this.updated, other.updated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            page,
            pageSize,
            fields,
            firm,
            updated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetRatingsFirmsRequest.class,
                "page", page,
                "pageSize", pageSize,
                "fields", fields,
                "firm", firm,
                "updated", updated);
    }
    
    public final static class Builder {
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> pageSize = Optional.empty();
 
        private Optional<String> fields = Optional.empty();
 
        private Optional<String> firm = Optional.empty();
 
        private Optional<Long> updated = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Page size
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Page size
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Fields
         */
        public Builder fields(String fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * Fields
         */
        public Builder fields(Optional<String> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        /**
         * Firm
         */
        public Builder firm(String firm) {
            Utils.checkNotNull(firm, "firm");
            this.firm = Optional.ofNullable(firm);
            return this;
        }

        /**
         * Firm
         */
        public Builder firm(Optional<String> firm) {
            Utils.checkNotNull(firm, "firm");
            this.firm = firm;
            return this;
        }

        /**
         * Updated time in Unix format
         */
        public Builder updated(long updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = Optional.ofNullable(updated);
            return this;
        }

        /**
         * Updated time in Unix format
         */
        public Builder updated(Optional<Long> updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = updated;
            return this;
        }
        
        public GetRatingsFirmsRequest build() {
            return new GetRatingsFirmsRequest(
                page,
                pageSize,
                fields,
                firm,
                updated);
        }
    }
}

