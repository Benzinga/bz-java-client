/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.benzinga.BZClient.utils.SpeakeasyMetadata;
import org.benzinga.BZClient.utils.Utils;


public class GetNewsquantifiedDataRequest {

    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Number of results per page
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pagesize")
    private Optional<Long> pagesize;

    /**
     * Updated since
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_since")
    private Optional<Long> updatedSince;

    /**
     * Symbols
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=symbols")
    private Optional<String> symbols;

    /**
     * Date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date")
    private Optional<String> date;

    /**
     * Date From
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date_from")
    private Optional<String> dateFrom;

    /**
     * Date To
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date_to")
    private Optional<String> dateTo;

    @JsonCreator
    public GetNewsquantifiedDataRequest(
            Optional<Long> page,
            Optional<Long> pagesize,
            Optional<Long> updatedSince,
            Optional<String> symbols,
            Optional<String> date,
            Optional<String> dateFrom,
            Optional<String> dateTo) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pagesize, "pagesize");
        Utils.checkNotNull(updatedSince, "updatedSince");
        Utils.checkNotNull(symbols, "symbols");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(dateFrom, "dateFrom");
        Utils.checkNotNull(dateTo, "dateTo");
        this.page = page;
        this.pagesize = pagesize;
        this.updatedSince = updatedSince;
        this.symbols = symbols;
        this.date = date;
        this.dateFrom = dateFrom;
        this.dateTo = dateTo;
    }
    
    public GetNewsquantifiedDataRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Page number
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Number of results per page
     */
    @JsonIgnore
    public Optional<Long> pagesize() {
        return pagesize;
    }

    /**
     * Updated since
     */
    @JsonIgnore
    public Optional<Long> updatedSince() {
        return updatedSince;
    }

    /**
     * Symbols
     */
    @JsonIgnore
    public Optional<String> symbols() {
        return symbols;
    }

    /**
     * Date
     */
    @JsonIgnore
    public Optional<String> date() {
        return date;
    }

    /**
     * Date From
     */
    @JsonIgnore
    public Optional<String> dateFrom() {
        return dateFrom;
    }

    /**
     * Date To
     */
    @JsonIgnore
    public Optional<String> dateTo() {
        return dateTo;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Page number
     */
    public GetNewsquantifiedDataRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Page number
     */
    public GetNewsquantifiedDataRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Number of results per page
     */
    public GetNewsquantifiedDataRequest withPagesize(long pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = Optional.ofNullable(pagesize);
        return this;
    }

    /**
     * Number of results per page
     */
    public GetNewsquantifiedDataRequest withPagesize(Optional<Long> pagesize) {
        Utils.checkNotNull(pagesize, "pagesize");
        this.pagesize = pagesize;
        return this;
    }

    /**
     * Updated since
     */
    public GetNewsquantifiedDataRequest withUpdatedSince(long updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }

    /**
     * Updated since
     */
    public GetNewsquantifiedDataRequest withUpdatedSince(Optional<Long> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }

    /**
     * Symbols
     */
    public GetNewsquantifiedDataRequest withSymbols(String symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = Optional.ofNullable(symbols);
        return this;
    }

    /**
     * Symbols
     */
    public GetNewsquantifiedDataRequest withSymbols(Optional<String> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = symbols;
        return this;
    }

    /**
     * Date
     */
    public GetNewsquantifiedDataRequest withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    /**
     * Date
     */
    public GetNewsquantifiedDataRequest withDate(Optional<String> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Date From
     */
    public GetNewsquantifiedDataRequest withDateFrom(String dateFrom) {
        Utils.checkNotNull(dateFrom, "dateFrom");
        this.dateFrom = Optional.ofNullable(dateFrom);
        return this;
    }

    /**
     * Date From
     */
    public GetNewsquantifiedDataRequest withDateFrom(Optional<String> dateFrom) {
        Utils.checkNotNull(dateFrom, "dateFrom");
        this.dateFrom = dateFrom;
        return this;
    }

    /**
     * Date To
     */
    public GetNewsquantifiedDataRequest withDateTo(String dateTo) {
        Utils.checkNotNull(dateTo, "dateTo");
        this.dateTo = Optional.ofNullable(dateTo);
        return this;
    }

    /**
     * Date To
     */
    public GetNewsquantifiedDataRequest withDateTo(Optional<String> dateTo) {
        Utils.checkNotNull(dateTo, "dateTo");
        this.dateTo = dateTo;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetNewsquantifiedDataRequest other = (GetNewsquantifiedDataRequest) o;
        return 
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pagesize, other.pagesize) &&
            Objects.deepEquals(this.updatedSince, other.updatedSince) &&
            Objects.deepEquals(this.symbols, other.symbols) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.dateFrom, other.dateFrom) &&
            Objects.deepEquals(this.dateTo, other.dateTo);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            page,
            pagesize,
            updatedSince,
            symbols,
            date,
            dateFrom,
            dateTo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetNewsquantifiedDataRequest.class,
                "page", page,
                "pagesize", pagesize,
                "updatedSince", updatedSince,
                "symbols", symbols,
                "date", date,
                "dateFrom", dateFrom,
                "dateTo", dateTo);
    }
    
    public final static class Builder {
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> pagesize = Optional.empty();
 
        private Optional<Long> updatedSince = Optional.empty();
 
        private Optional<String> symbols = Optional.empty();
 
        private Optional<String> date = Optional.empty();
 
        private Optional<String> dateFrom = Optional.empty();
 
        private Optional<String> dateTo = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Page number
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Page number
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Number of results per page
         */
        public Builder pagesize(long pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = Optional.ofNullable(pagesize);
            return this;
        }

        /**
         * Number of results per page
         */
        public Builder pagesize(Optional<Long> pagesize) {
            Utils.checkNotNull(pagesize, "pagesize");
            this.pagesize = pagesize;
            return this;
        }

        /**
         * Updated since
         */
        public Builder updatedSince(long updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        /**
         * Updated since
         */
        public Builder updatedSince(Optional<Long> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }

        /**
         * Symbols
         */
        public Builder symbols(String symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = Optional.ofNullable(symbols);
            return this;
        }

        /**
         * Symbols
         */
        public Builder symbols(Optional<String> symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = symbols;
            return this;
        }

        /**
         * Date
         */
        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        /**
         * Date
         */
        public Builder date(Optional<String> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        /**
         * Date From
         */
        public Builder dateFrom(String dateFrom) {
            Utils.checkNotNull(dateFrom, "dateFrom");
            this.dateFrom = Optional.ofNullable(dateFrom);
            return this;
        }

        /**
         * Date From
         */
        public Builder dateFrom(Optional<String> dateFrom) {
            Utils.checkNotNull(dateFrom, "dateFrom");
            this.dateFrom = dateFrom;
            return this;
        }

        /**
         * Date To
         */
        public Builder dateTo(String dateTo) {
            Utils.checkNotNull(dateTo, "dateTo");
            this.dateTo = Optional.ofNullable(dateTo);
            return this;
        }

        /**
         * Date To
         */
        public Builder dateTo(Optional<String> dateTo) {
            Utils.checkNotNull(dateTo, "dateTo");
            this.dateTo = dateTo;
            return this;
        }
        
        public GetNewsquantifiedDataRequest build() {
            return new GetNewsquantifiedDataRequest(
                page,
                pagesize,
                updatedSince,
                symbols,
                date,
                dateFrom,
                dateTo);
        }
    }
}

