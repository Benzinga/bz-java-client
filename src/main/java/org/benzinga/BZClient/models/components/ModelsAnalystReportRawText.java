/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.benzinga.BZClient.utils.Utils;


public class ModelsAnalystReportRawText {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private Optional<String> date;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exchange")
    private Optional<String> exchange;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extracted_paragraphs")
    private Optional<? extends List<String>> extractedParagraphs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firm_id")
    private Optional<String> firmId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticker")
    private Optional<String> ticker;

    @JsonCreator
    public ModelsAnalystReportRawText(
            @JsonProperty("date") Optional<String> date,
            @JsonProperty("exchange") Optional<String> exchange,
            @JsonProperty("extracted_paragraphs") Optional<? extends List<String>> extractedParagraphs,
            @JsonProperty("firm_id") Optional<String> firmId,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("ticker") Optional<String> ticker) {
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(exchange, "exchange");
        Utils.checkNotNull(extractedParagraphs, "extractedParagraphs");
        Utils.checkNotNull(firmId, "firmId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(ticker, "ticker");
        this.date = date;
        this.exchange = exchange;
        this.extractedParagraphs = extractedParagraphs;
        this.firmId = firmId;
        this.id = id;
        this.ticker = ticker;
    }
    
    public ModelsAnalystReportRawText() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> date() {
        return date;
    }

    @JsonIgnore
    public Optional<String> exchange() {
        return exchange;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> extractedParagraphs() {
        return (Optional<List<String>>) extractedParagraphs;
    }

    @JsonIgnore
    public Optional<String> firmId() {
        return firmId;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> ticker() {
        return ticker;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModelsAnalystReportRawText withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    public ModelsAnalystReportRawText withDate(Optional<String> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public ModelsAnalystReportRawText withExchange(String exchange) {
        Utils.checkNotNull(exchange, "exchange");
        this.exchange = Optional.ofNullable(exchange);
        return this;
    }

    public ModelsAnalystReportRawText withExchange(Optional<String> exchange) {
        Utils.checkNotNull(exchange, "exchange");
        this.exchange = exchange;
        return this;
    }

    public ModelsAnalystReportRawText withExtractedParagraphs(List<String> extractedParagraphs) {
        Utils.checkNotNull(extractedParagraphs, "extractedParagraphs");
        this.extractedParagraphs = Optional.ofNullable(extractedParagraphs);
        return this;
    }

    public ModelsAnalystReportRawText withExtractedParagraphs(Optional<? extends List<String>> extractedParagraphs) {
        Utils.checkNotNull(extractedParagraphs, "extractedParagraphs");
        this.extractedParagraphs = extractedParagraphs;
        return this;
    }

    public ModelsAnalystReportRawText withFirmId(String firmId) {
        Utils.checkNotNull(firmId, "firmId");
        this.firmId = Optional.ofNullable(firmId);
        return this;
    }

    public ModelsAnalystReportRawText withFirmId(Optional<String> firmId) {
        Utils.checkNotNull(firmId, "firmId");
        this.firmId = firmId;
        return this;
    }

    public ModelsAnalystReportRawText withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ModelsAnalystReportRawText withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ModelsAnalystReportRawText withTicker(String ticker) {
        Utils.checkNotNull(ticker, "ticker");
        this.ticker = Optional.ofNullable(ticker);
        return this;
    }

    public ModelsAnalystReportRawText withTicker(Optional<String> ticker) {
        Utils.checkNotNull(ticker, "ticker");
        this.ticker = ticker;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelsAnalystReportRawText other = (ModelsAnalystReportRawText) o;
        return 
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.exchange, other.exchange) &&
            Objects.deepEquals(this.extractedParagraphs, other.extractedParagraphs) &&
            Objects.deepEquals(this.firmId, other.firmId) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.ticker, other.ticker);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            date,
            exchange,
            extractedParagraphs,
            firmId,
            id,
            ticker);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModelsAnalystReportRawText.class,
                "date", date,
                "exchange", exchange,
                "extractedParagraphs", extractedParagraphs,
                "firmId", firmId,
                "id", id,
                "ticker", ticker);
    }
    
    public final static class Builder {
 
        private Optional<String> date = Optional.empty();
 
        private Optional<String> exchange = Optional.empty();
 
        private Optional<? extends List<String>> extractedParagraphs = Optional.empty();
 
        private Optional<String> firmId = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> ticker = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        public Builder date(Optional<String> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder exchange(String exchange) {
            Utils.checkNotNull(exchange, "exchange");
            this.exchange = Optional.ofNullable(exchange);
            return this;
        }

        public Builder exchange(Optional<String> exchange) {
            Utils.checkNotNull(exchange, "exchange");
            this.exchange = exchange;
            return this;
        }

        public Builder extractedParagraphs(List<String> extractedParagraphs) {
            Utils.checkNotNull(extractedParagraphs, "extractedParagraphs");
            this.extractedParagraphs = Optional.ofNullable(extractedParagraphs);
            return this;
        }

        public Builder extractedParagraphs(Optional<? extends List<String>> extractedParagraphs) {
            Utils.checkNotNull(extractedParagraphs, "extractedParagraphs");
            this.extractedParagraphs = extractedParagraphs;
            return this;
        }

        public Builder firmId(String firmId) {
            Utils.checkNotNull(firmId, "firmId");
            this.firmId = Optional.ofNullable(firmId);
            return this;
        }

        public Builder firmId(Optional<String> firmId) {
            Utils.checkNotNull(firmId, "firmId");
            this.firmId = firmId;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder ticker(String ticker) {
            Utils.checkNotNull(ticker, "ticker");
            this.ticker = Optional.ofNullable(ticker);
            return this;
        }

        public Builder ticker(Optional<String> ticker) {
            Utils.checkNotNull(ticker, "ticker");
            this.ticker = ticker;
            return this;
        }
        
        public ModelsAnalystReportRawText build() {
            return new ModelsAnalystReportRawText(
                date,
                exchange,
                extractedParagraphs,
                firmId,
                id,
                ticker);
        }
    }
}

