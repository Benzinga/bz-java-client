/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.benzinga.BZClient.utils.Utils;


public class ModelsTranscriptAudioFile {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_url")
    private Optional<String> fileUrl;

    @JsonCreator
    public ModelsTranscriptAudioFile(
            @JsonProperty("file_url") Optional<String> fileUrl) {
        Utils.checkNotNull(fileUrl, "fileUrl");
        this.fileUrl = fileUrl;
    }
    
    public ModelsTranscriptAudioFile() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> fileUrl() {
        return fileUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModelsTranscriptAudioFile withFileUrl(String fileUrl) {
        Utils.checkNotNull(fileUrl, "fileUrl");
        this.fileUrl = Optional.ofNullable(fileUrl);
        return this;
    }

    public ModelsTranscriptAudioFile withFileUrl(Optional<String> fileUrl) {
        Utils.checkNotNull(fileUrl, "fileUrl");
        this.fileUrl = fileUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelsTranscriptAudioFile other = (ModelsTranscriptAudioFile) o;
        return 
            Objects.deepEquals(this.fileUrl, other.fileUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fileUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModelsTranscriptAudioFile.class,
                "fileUrl", fileUrl);
    }
    
    public final static class Builder {
 
        private Optional<String> fileUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder fileUrl(String fileUrl) {
            Utils.checkNotNull(fileUrl, "fileUrl");
            this.fileUrl = Optional.ofNullable(fileUrl);
            return this;
        }

        public Builder fileUrl(Optional<String> fileUrl) {
            Utils.checkNotNull(fileUrl, "fileUrl");
            this.fileUrl = fileUrl;
            return this;
        }
        
        public ModelsTranscriptAudioFile build() {
            return new ModelsTranscriptAudioFile(
                fileUrl);
        }
    }
}

