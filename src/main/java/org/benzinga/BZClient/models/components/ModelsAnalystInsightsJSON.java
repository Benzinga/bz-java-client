/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.benzinga.BZClient.utils.Utils;


public class ModelsAnalystInsightsJSON {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("analystInsights")
    private Optional<? extends List<Map<String, Object>>> analystInsights;

    @JsonCreator
    public ModelsAnalystInsightsJSON(
            @JsonProperty("analystInsights") Optional<? extends List<Map<String, Object>>> analystInsights) {
        Utils.checkNotNull(analystInsights, "analystInsights");
        this.analystInsights = analystInsights;
    }
    
    public ModelsAnalystInsightsJSON() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Map<String, Object>>> analystInsights() {
        return (Optional<List<Map<String, Object>>>) analystInsights;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModelsAnalystInsightsJSON withAnalystInsights(List<Map<String, Object>> analystInsights) {
        Utils.checkNotNull(analystInsights, "analystInsights");
        this.analystInsights = Optional.ofNullable(analystInsights);
        return this;
    }

    public ModelsAnalystInsightsJSON withAnalystInsights(Optional<? extends List<Map<String, Object>>> analystInsights) {
        Utils.checkNotNull(analystInsights, "analystInsights");
        this.analystInsights = analystInsights;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelsAnalystInsightsJSON other = (ModelsAnalystInsightsJSON) o;
        return 
            Objects.deepEquals(this.analystInsights, other.analystInsights);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            analystInsights);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModelsAnalystInsightsJSON.class,
                "analystInsights", analystInsights);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Map<String, Object>>> analystInsights = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder analystInsights(List<Map<String, Object>> analystInsights) {
            Utils.checkNotNull(analystInsights, "analystInsights");
            this.analystInsights = Optional.ofNullable(analystInsights);
            return this;
        }

        public Builder analystInsights(Optional<? extends List<Map<String, Object>>> analystInsights) {
            Utils.checkNotNull(analystInsights, "analystInsights");
            this.analystInsights = analystInsights;
            return this;
        }
        
        public ModelsAnalystInsightsJSON build() {
            return new ModelsAnalystInsightsJSON(
                analystInsights);
        }
    }
}

