/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.benzinga.BZClient;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import org.benzinga.BZClient.models.components.ModelsTranscriptSummary;
import org.benzinga.BZClient.models.components.ModelsTranscriptSummaryAudio;
import org.benzinga.BZClient.models.errors.APIException;
import org.benzinga.BZClient.models.operations.GetEarningsCallTranscriptAudioFilesRequest;
import org.benzinga.BZClient.models.operations.GetEarningsCallTranscriptAudioFilesRequestBuilder;
import org.benzinga.BZClient.models.operations.GetEarningsCallTranscriptAudioFilesResponse;
import org.benzinga.BZClient.models.operations.GetEarningsCallTranscriptsRequest;
import org.benzinga.BZClient.models.operations.GetEarningsCallTranscriptsRequestBuilder;
import org.benzinga.BZClient.models.operations.GetEarningsCallTranscriptsResponse;
import org.benzinga.BZClient.models.operations.SDKMethodInterfaces.*;
import org.benzinga.BZClient.utils.BackoffStrategy;
import org.benzinga.BZClient.utils.HTTPClient;
import org.benzinga.BZClient.utils.HTTPRequest;
import org.benzinga.BZClient.utils.Hook.AfterErrorContextImpl;
import org.benzinga.BZClient.utils.Hook.AfterSuccessContextImpl;
import org.benzinga.BZClient.utils.Hook.BeforeRequestContextImpl;
import org.benzinga.BZClient.utils.Options;
import org.benzinga.BZClient.utils.Retries.NonRetryableException;
import org.benzinga.BZClient.utils.Retries;
import org.benzinga.BZClient.utils.RetryConfig;
import org.benzinga.BZClient.utils.Utils; 

public class EarningsCallTranscripts implements
            MethodCallGetEarningsCallTranscripts,
            MethodCallGetEarningsCallTranscriptAudioFiles {

    private final SDKConfiguration sdkConfiguration;

    EarningsCallTranscripts(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Get Earnings Call Transcripts
     * Get Earnings Call Transcripts
     * @return The call builder
     */
    public GetEarningsCallTranscriptsRequestBuilder get() {
        return new GetEarningsCallTranscriptsRequestBuilder(this);
    }

    /**
     * Get Earnings Call Transcripts
     * Get Earnings Call Transcripts
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetEarningsCallTranscriptsResponse getDirect() throws Exception {
        return get(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Get Earnings Call Transcripts
     * Get Earnings Call Transcripts
     * @param tickers Tickers
     * @param callId Call ID
     * @param page Page
     * @param pagesize Page Size
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetEarningsCallTranscriptsResponse get(
            Optional<? extends List<String>> tickers,
            Optional<? extends List<String>> callId,
            Optional<Long> page,
            Optional<Long> pagesize,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        GetEarningsCallTranscriptsRequest request =
            GetEarningsCallTranscriptsRequest
                .builder()
                .tickers(tickers)
                .callId(callId)
                .page(page)
                .pagesize(pagesize)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/v1/earnings-call-transcripts");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetEarningsCallTranscriptsRequest.class,
                request, 
                null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                "get-earnings-call-transcripts", 
                                Optional.of(List.of()), 
                                sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                "get-earnings-call-transcripts",
                                 Optional.of(List.of()),
                                 sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         "get-earnings-call-transcripts", 
                         Optional.of(List.of()), 
                         sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetEarningsCallTranscriptsResponse.Builder _resBuilder = 
            GetEarningsCallTranscriptsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetEarningsCallTranscriptsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<ModelsTranscriptSummary> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<ModelsTranscriptSummary>>() {});
                _res.withModelsTranscriptSummaries(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "500", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Earnings Call Transcript Audio Files
     * Get Earnings Call Transcript Audio Files
     * @return The call builder
     */
    public GetEarningsCallTranscriptAudioFilesRequestBuilder getAudio() {
        return new GetEarningsCallTranscriptAudioFilesRequestBuilder(this);
    }

    /**
     * Get Earnings Call Transcript Audio Files
     * Get Earnings Call Transcript Audio Files
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetEarningsCallTranscriptAudioFilesResponse getAudioDirect() throws Exception {
        return getAudio(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Get Earnings Call Transcript Audio Files
     * Get Earnings Call Transcript Audio Files
     * @param tickers Tickers
     * @param callId Call ID
     * @param page Page
     * @param pagesize Page Size
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetEarningsCallTranscriptAudioFilesResponse getAudio(
            Optional<? extends List<String>> tickers,
            Optional<? extends List<String>> callId,
            Optional<Long> page,
            Optional<Long> pagesize,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        GetEarningsCallTranscriptAudioFilesRequest request =
            GetEarningsCallTranscriptAudioFilesRequest
                .builder()
                .tickers(tickers)
                .callId(callId)
                .page(page)
                .pagesize(pagesize)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/v1/earnings-call-transcripts/audio");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetEarningsCallTranscriptAudioFilesRequest.class,
                request, 
                null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                "get-earnings-call-transcript-audio-files", 
                                Optional.of(List.of()), 
                                sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                "get-earnings-call-transcript-audio-files",
                                 Optional.of(List.of()),
                                 sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         "get-earnings-call-transcript-audio-files", 
                         Optional.of(List.of()), 
                         sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetEarningsCallTranscriptAudioFilesResponse.Builder _resBuilder = 
            GetEarningsCallTranscriptAudioFilesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetEarningsCallTranscriptAudioFilesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<ModelsTranscriptSummaryAudio> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<ModelsTranscriptSummaryAudio>>() {});
                _res.withModelsTranscriptSummaryAudios(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "500", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
